
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004043c4  004043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  004043cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000108  204009d0  00404d9c  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400ad8  00404ea4  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402ad8  00406ea4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015082  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002de0  00000000  00000000  00035ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000049ff  00000000  00000000  000388b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a98  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae8  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020cef  00000000  00000000  0003e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bbf9  00000000  00000000  0005f527  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093c2d  00000000  00000000  0006b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002380  00000000  00000000  000fed50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2a 40 20 55 0b 40 00 53 0b 40 00 53 0b 40 00     .*@ U.@.S.@.S.@.
  400010:	53 0b 40 00 53 0b 40 00 53 0b 40 00 00 00 00 00     S.@.S.@.S.@.....
	...
  40002c:	53 0b 40 00 53 0b 40 00 00 00 00 00 53 0b 40 00     S.@.S.@.....S.@.
  40003c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 b5 0f 40 00     S.@.S.@.S.@...@.
  40004c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  40005c:	53 0b 40 00 53 0b 40 00 00 00 00 00 c5 04 40 00     S.@.S.@.......@.
  40006c:	d9 04 40 00 ed 04 40 00 53 0b 40 00 53 0b 40 00     ..@...@.S.@.S.@.
  40007c:	53 0b 40 00 01 05 40 00 15 05 40 00 53 0b 40 00     S.@...@...@.S.@.
  40008c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  40009c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  4000ac:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  4000bc:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  4000cc:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  4000dc:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  4000ec:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  4000fc:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  40010c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 00 00 00 00     S.@.S.@.S.@.....
  40011c:	00 00 00 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     ....S.@.S.@.S.@.
  40012c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  40013c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  40014c:	53 0b 40 00 53 0b 40 00 53 0b 40 00 53 0b 40 00     S.@.S.@.S.@.S.@.
  40015c:	53 0b 40 00 53 0b 40 00 53 0b 40 00                 S.@.S.@.S.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009d0 	.word	0x204009d0
  400184:	00000000 	.word	0x00000000
  400188:	004043cc 	.word	0x004043cc

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004043cc 	.word	0x004043cc
  4001c8:	204009d4 	.word	0x204009d4
  4001cc:	004043cc 	.word	0x004043cc
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400d29 	.word	0x00400d29
  400220:	004005c5 	.word	0x004005c5
  400224:	00400619 	.word	0x00400619
  400228:	00400629 	.word	0x00400629
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400639 	.word	0x00400639
  400238:	00400529 	.word	0x00400529
  40023c:	00400561 	.word	0x00400561
  400240:	00400c1d 	.word	0x00400c1d

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400aac 	.word	0x20400aac
  40027c:	20400aa4 	.word	0x20400aa4

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400aa8 	.word	0x20400aa8
  4002cc:	20400aac 	.word	0x20400aac

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5c      	ldr	r3, [pc, #368]	; (400448 <board_init+0x178>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b5a      	ldr	r3, [pc, #360]	; (40044c <board_init+0x17c>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3f      	ldr	r3, [pc, #252]	; (40044c <board_init+0x17c>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3c      	ldr	r2, [pc, #240]	; (400450 <board_init+0x180>)
  400360:	493c      	ldr	r1, [pc, #240]	; (400454 <board_init+0x184>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c30      	ldr	r4, [pc, #192]	; (400458 <board_init+0x188>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2c      	ldr	r3, [pc, #176]	; (40045c <board_init+0x18c>)
  4003aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003b6:	492a      	ldr	r1, [pc, #168]	; (400460 <board_init+0x190>)
  4003b8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4003bc:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003c2:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003c4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003ca:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003d2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003da:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4003de:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4003e6:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003fe:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400400:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400406:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400408:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40040e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400410:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400414:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400416:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400418:	4a12      	ldr	r2, [pc, #72]	; (400464 <board_init+0x194>)
  40041a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40041e:	f043 0310 	orr.w	r3, r3, #16
  400422:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400426:	4b10      	ldr	r3, [pc, #64]	; (400468 <board_init+0x198>)
  400428:	2210      	movs	r2, #16
  40042a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40042c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400430:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400432:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400438:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40043a:	4311      	orrs	r1, r2
  40043c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40043e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400440:	4311      	orrs	r1, r2
  400442:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400444:	605a      	str	r2, [r3, #4]
  400446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400448:	400e1850 	.word	0x400e1850
  40044c:	e000ed00 	.word	0xe000ed00
  400450:	400e0c00 	.word	0x400e0c00
  400454:	5a00080c 	.word	0x5a00080c
  400458:	00400649 	.word	0x00400649
  40045c:	400e0e00 	.word	0x400e0e00
  400460:	400e1200 	.word	0x400e1200
  400464:	40088000 	.word	0x40088000
  400468:	400e1000 	.word	0x400e1000

0040046c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40046c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40046e:	4770      	bx	lr

00400470 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400470:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400472:	4770      	bx	lr

00400474 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400478:	4604      	mov	r4, r0
  40047a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40047c:	4b0e      	ldr	r3, [pc, #56]	; (4004b8 <pio_handler_process+0x44>)
  40047e:	4798      	blx	r3
  400480:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400482:	4620      	mov	r0, r4
  400484:	4b0d      	ldr	r3, [pc, #52]	; (4004bc <pio_handler_process+0x48>)
  400486:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400488:	4005      	ands	r5, r0
  40048a:	d013      	beq.n	4004b4 <pio_handler_process+0x40>
  40048c:	4c0c      	ldr	r4, [pc, #48]	; (4004c0 <pio_handler_process+0x4c>)
  40048e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400492:	e003      	b.n	40049c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400494:	42b4      	cmp	r4, r6
  400496:	d00d      	beq.n	4004b4 <pio_handler_process+0x40>
  400498:	3410      	adds	r4, #16
		while (status != 0) {
  40049a:	b15d      	cbz	r5, 4004b4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40049c:	6820      	ldr	r0, [r4, #0]
  40049e:	4540      	cmp	r0, r8
  4004a0:	d1f8      	bne.n	400494 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004a2:	6861      	ldr	r1, [r4, #4]
  4004a4:	4229      	tst	r1, r5
  4004a6:	d0f5      	beq.n	400494 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004a8:	68e3      	ldr	r3, [r4, #12]
  4004aa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4004ac:	6863      	ldr	r3, [r4, #4]
  4004ae:	ea25 0503 	bic.w	r5, r5, r3
  4004b2:	e7ef      	b.n	400494 <pio_handler_process+0x20>
  4004b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004b8:	0040046d 	.word	0x0040046d
  4004bc:	00400471 	.word	0x00400471
  4004c0:	204009ec 	.word	0x204009ec

004004c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4004c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4004c6:	210a      	movs	r1, #10
  4004c8:	4801      	ldr	r0, [pc, #4]	; (4004d0 <PIOA_Handler+0xc>)
  4004ca:	4b02      	ldr	r3, [pc, #8]	; (4004d4 <PIOA_Handler+0x10>)
  4004cc:	4798      	blx	r3
  4004ce:	bd08      	pop	{r3, pc}
  4004d0:	400e0e00 	.word	0x400e0e00
  4004d4:	00400475 	.word	0x00400475

004004d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4004d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4004da:	210b      	movs	r1, #11
  4004dc:	4801      	ldr	r0, [pc, #4]	; (4004e4 <PIOB_Handler+0xc>)
  4004de:	4b02      	ldr	r3, [pc, #8]	; (4004e8 <PIOB_Handler+0x10>)
  4004e0:	4798      	blx	r3
  4004e2:	bd08      	pop	{r3, pc}
  4004e4:	400e1000 	.word	0x400e1000
  4004e8:	00400475 	.word	0x00400475

004004ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004ee:	210c      	movs	r1, #12
  4004f0:	4801      	ldr	r0, [pc, #4]	; (4004f8 <PIOC_Handler+0xc>)
  4004f2:	4b02      	ldr	r3, [pc, #8]	; (4004fc <PIOC_Handler+0x10>)
  4004f4:	4798      	blx	r3
  4004f6:	bd08      	pop	{r3, pc}
  4004f8:	400e1200 	.word	0x400e1200
  4004fc:	00400475 	.word	0x00400475

00400500 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400500:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400502:	2110      	movs	r1, #16
  400504:	4801      	ldr	r0, [pc, #4]	; (40050c <PIOD_Handler+0xc>)
  400506:	4b02      	ldr	r3, [pc, #8]	; (400510 <PIOD_Handler+0x10>)
  400508:	4798      	blx	r3
  40050a:	bd08      	pop	{r3, pc}
  40050c:	400e1400 	.word	0x400e1400
  400510:	00400475 	.word	0x00400475

00400514 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400514:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400516:	2111      	movs	r1, #17
  400518:	4801      	ldr	r0, [pc, #4]	; (400520 <PIOE_Handler+0xc>)
  40051a:	4b02      	ldr	r3, [pc, #8]	; (400524 <PIOE_Handler+0x10>)
  40051c:	4798      	blx	r3
  40051e:	bd08      	pop	{r3, pc}
  400520:	400e1600 	.word	0x400e1600
  400524:	00400475 	.word	0x00400475

00400528 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400528:	2803      	cmp	r0, #3
  40052a:	d011      	beq.n	400550 <pmc_mck_set_division+0x28>
  40052c:	2804      	cmp	r0, #4
  40052e:	d012      	beq.n	400556 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400530:	2802      	cmp	r0, #2
  400532:	bf0c      	ite	eq
  400534:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400538:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40053a:	4a08      	ldr	r2, [pc, #32]	; (40055c <pmc_mck_set_division+0x34>)
  40053c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40053e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400542:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400544:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400546:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400548:	f013 0f08 	tst.w	r3, #8
  40054c:	d0fb      	beq.n	400546 <pmc_mck_set_division+0x1e>
}
  40054e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400550:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400554:	e7f1      	b.n	40053a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400556:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40055a:	e7ee      	b.n	40053a <pmc_mck_set_division+0x12>
  40055c:	400e0600 	.word	0x400e0600

00400560 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400560:	4a17      	ldr	r2, [pc, #92]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  400562:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400568:	4318      	orrs	r0, r3
  40056a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40056c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40056e:	f013 0f08 	tst.w	r3, #8
  400572:	d10a      	bne.n	40058a <pmc_switch_mck_to_pllack+0x2a>
  400574:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400578:	4911      	ldr	r1, [pc, #68]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  40057a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40057c:	f012 0f08 	tst.w	r2, #8
  400580:	d103      	bne.n	40058a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400582:	3b01      	subs	r3, #1
  400584:	d1f9      	bne.n	40057a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400586:	2001      	movs	r0, #1
  400588:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40058a:	4a0d      	ldr	r2, [pc, #52]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  40058c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40058e:	f023 0303 	bic.w	r3, r3, #3
  400592:	f043 0302 	orr.w	r3, r3, #2
  400596:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400598:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40059a:	f013 0f08 	tst.w	r3, #8
  40059e:	d10a      	bne.n	4005b6 <pmc_switch_mck_to_pllack+0x56>
  4005a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005a4:	4906      	ldr	r1, [pc, #24]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  4005a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005a8:	f012 0f08 	tst.w	r2, #8
  4005ac:	d105      	bne.n	4005ba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ae:	3b01      	subs	r3, #1
  4005b0:	d1f9      	bne.n	4005a6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4005b2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005b4:	4770      	bx	lr
	return 0;
  4005b6:	2000      	movs	r0, #0
  4005b8:	4770      	bx	lr
  4005ba:	2000      	movs	r0, #0
  4005bc:	4770      	bx	lr
  4005be:	bf00      	nop
  4005c0:	400e0600 	.word	0x400e0600

004005c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005c4:	b9a0      	cbnz	r0, 4005f0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005c6:	480e      	ldr	r0, [pc, #56]	; (400600 <pmc_switch_mainck_to_xtal+0x3c>)
  4005c8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005ca:	0209      	lsls	r1, r1, #8
  4005cc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005ce:	4a0d      	ldr	r2, [pc, #52]	; (400604 <pmc_switch_mainck_to_xtal+0x40>)
  4005d0:	401a      	ands	r2, r3
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <pmc_switch_mainck_to_xtal+0x44>)
  4005d4:	4313      	orrs	r3, r2
  4005d6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005d8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005da:	4602      	mov	r2, r0
  4005dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005de:	f013 0f01 	tst.w	r3, #1
  4005e2:	d0fb      	beq.n	4005dc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005e4:	4a06      	ldr	r2, [pc, #24]	; (400600 <pmc_switch_mainck_to_xtal+0x3c>)
  4005e6:	6a11      	ldr	r1, [r2, #32]
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <pmc_switch_mainck_to_xtal+0x48>)
  4005ea:	430b      	orrs	r3, r1
  4005ec:	6213      	str	r3, [r2, #32]
  4005ee:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005f0:	4903      	ldr	r1, [pc, #12]	; (400600 <pmc_switch_mainck_to_xtal+0x3c>)
  4005f2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4005f4:	4a06      	ldr	r2, [pc, #24]	; (400610 <pmc_switch_mainck_to_xtal+0x4c>)
  4005f6:	401a      	ands	r2, r3
  4005f8:	4b06      	ldr	r3, [pc, #24]	; (400614 <pmc_switch_mainck_to_xtal+0x50>)
  4005fa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005fc:	620b      	str	r3, [r1, #32]
  4005fe:	4770      	bx	lr
  400600:	400e0600 	.word	0x400e0600
  400604:	ffc8fffc 	.word	0xffc8fffc
  400608:	00370001 	.word	0x00370001
  40060c:	01370000 	.word	0x01370000
  400610:	fec8fffc 	.word	0xfec8fffc
  400614:	01370002 	.word	0x01370002

00400618 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400618:	4b02      	ldr	r3, [pc, #8]	; (400624 <pmc_osc_is_ready_mainck+0xc>)
  40061a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40061c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400620:	4770      	bx	lr
  400622:	bf00      	nop
  400624:	400e0600 	.word	0x400e0600

00400628 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400628:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40062c:	4b01      	ldr	r3, [pc, #4]	; (400634 <pmc_disable_pllack+0xc>)
  40062e:	629a      	str	r2, [r3, #40]	; 0x28
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	400e0600 	.word	0x400e0600

00400638 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400638:	4b02      	ldr	r3, [pc, #8]	; (400644 <pmc_is_locked_pllack+0xc>)
  40063a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40063c:	f000 0002 	and.w	r0, r0, #2
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	400e0600 	.word	0x400e0600

00400648 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400648:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40064c:	4b05      	ldr	r3, [pc, #20]	; (400664 <pmc_enable_periph_clk+0x1c>)
  40064e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400652:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400656:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40065a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40065e:	2000      	movs	r0, #0
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	400e0600 	.word	0x400e0600

00400668 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400668:	4770      	bx	lr
	...

0040066c <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40066c:	4a10      	ldr	r2, [pc, #64]	; (4006b0 <pmc_enable_waitmode+0x44>)
  40066e:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400670:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  400678:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40067a:	6a11      	ldr	r1, [r2, #32]
  40067c:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <pmc_enable_waitmode+0x48>)
  40067e:	430b      	orrs	r3, r1
  400680:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400682:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400684:	f013 0f08 	tst.w	r3, #8
  400688:	d0fb      	beq.n	400682 <pmc_enable_waitmode+0x16>
  40068a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
		__NOP();
  40068e:	bf00      	nop
	for (i = 0; i < 500; i++) {
  400690:	3b01      	subs	r3, #1
  400692:	d1fc      	bne.n	40068e <pmc_enable_waitmode+0x22>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400694:	4a06      	ldr	r2, [pc, #24]	; (4006b0 <pmc_enable_waitmode+0x44>)
  400696:	6a13      	ldr	r3, [r2, #32]
  400698:	f013 0f08 	tst.w	r3, #8
  40069c:	d0fb      	beq.n	400696 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40069e:	4a04      	ldr	r2, [pc, #16]	; (4006b0 <pmc_enable_waitmode+0x44>)
  4006a0:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4006a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4006a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4006aa:	6713      	str	r3, [r2, #112]	; 0x70
  4006ac:	4770      	bx	lr
  4006ae:	bf00      	nop
  4006b0:	400e0600 	.word	0x400e0600
  4006b4:	00370004 	.word	0x00370004

004006b8 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4006b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4006bc:	1e43      	subs	r3, r0, #1
  4006be:	2b04      	cmp	r3, #4
  4006c0:	f200 8107 	bhi.w	4008d2 <pmc_sleep+0x21a>
  4006c4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006c8:	00050005 	.word	0x00050005
  4006cc:	00150015 	.word	0x00150015
  4006d0:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4006d2:	4a81      	ldr	r2, [pc, #516]	; (4008d8 <pmc_sleep+0x220>)
  4006d4:	6913      	ldr	r3, [r2, #16]
  4006d6:	f023 0304 	bic.w	r3, r3, #4
  4006da:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4006dc:	2201      	movs	r2, #1
  4006de:	4b7f      	ldr	r3, [pc, #508]	; (4008dc <pmc_sleep+0x224>)
  4006e0:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4006e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006e6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
  4006e8:	f3bf 8f4f 	dsb	sy
		__DSB();
		__WFI();
  4006ec:	bf30      	wfi
		break;
  4006ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006f2:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4006f4:	2803      	cmp	r0, #3
  4006f6:	bf0c      	ite	eq
  4006f8:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4006fa:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  4006fe:	4b78      	ldr	r3, [pc, #480]	; (4008e0 <pmc_sleep+0x228>)
  400700:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400702:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400704:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400708:	2200      	movs	r2, #0
  40070a:	4b74      	ldr	r3, [pc, #464]	; (4008dc <pmc_sleep+0x224>)
  40070c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40070e:	2201      	movs	r2, #1
  400710:	4b74      	ldr	r3, [pc, #464]	; (4008e4 <pmc_sleep+0x22c>)
  400712:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400714:	4b74      	ldr	r3, [pc, #464]	; (4008e8 <pmc_sleep+0x230>)
  400716:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400718:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40071a:	4a74      	ldr	r2, [pc, #464]	; (4008ec <pmc_sleep+0x234>)
  40071c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400720:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400722:	4a73      	ldr	r2, [pc, #460]	; (4008f0 <pmc_sleep+0x238>)
  400724:	433a      	orrs	r2, r7
  400726:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400728:	f005 0903 	and.w	r9, r5, #3
  40072c:	f1b9 0f01 	cmp.w	r9, #1
  400730:	f240 8089 	bls.w	400846 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400734:	f025 0103 	bic.w	r1, r5, #3
  400738:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40073c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40073e:	461a      	mov	r2, r3
  400740:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400742:	f013 0f08 	tst.w	r3, #8
  400746:	d0fb      	beq.n	400740 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400748:	f011 0f70 	tst.w	r1, #112	; 0x70
  40074c:	d008      	beq.n	400760 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40074e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400752:	4b65      	ldr	r3, [pc, #404]	; (4008e8 <pmc_sleep+0x230>)
  400754:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400756:	461a      	mov	r2, r3
  400758:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40075a:	f013 0f08 	tst.w	r3, #8
  40075e:	d0fb      	beq.n	400758 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  400760:	4b64      	ldr	r3, [pc, #400]	; (4008f4 <pmc_sleep+0x23c>)
  400762:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400764:	4a60      	ldr	r2, [pc, #384]	; (4008e8 <pmc_sleep+0x230>)
  400766:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400768:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40076c:	d0fb      	beq.n	400766 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40076e:	4a5e      	ldr	r2, [pc, #376]	; (4008e8 <pmc_sleep+0x230>)
  400770:	6a11      	ldr	r1, [r2, #32]
  400772:	4b61      	ldr	r3, [pc, #388]	; (4008f8 <pmc_sleep+0x240>)
  400774:	400b      	ands	r3, r1
  400776:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40077a:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40077c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40077e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400782:	d0fb      	beq.n	40077c <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400784:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  400788:	4a58      	ldr	r2, [pc, #352]	; (4008ec <pmc_sleep+0x234>)
  40078a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  40078c:	2c04      	cmp	r4, #4
  40078e:	d05c      	beq.n	40084a <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  400790:	4c52      	ldr	r4, [pc, #328]	; (4008dc <pmc_sleep+0x224>)
  400792:	2301      	movs	r3, #1
  400794:	7023      	strb	r3, [r4, #0]
  400796:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40079a:	b662      	cpsie	i

		pmc_enable_waitmode();
  40079c:	4b57      	ldr	r3, [pc, #348]	; (4008fc <pmc_sleep+0x244>)
  40079e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4007a0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4007a2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4007a6:	2300      	movs	r3, #0
  4007a8:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4007aa:	f017 0f02 	tst.w	r7, #2
  4007ae:	d055      	beq.n	40085c <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007b0:	4a4d      	ldr	r2, [pc, #308]	; (4008e8 <pmc_sleep+0x230>)
  4007b2:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007b4:	4952      	ldr	r1, [pc, #328]	; (400900 <pmc_sleep+0x248>)
  4007b6:	4019      	ands	r1, r3
  4007b8:	4b52      	ldr	r3, [pc, #328]	; (400904 <pmc_sleep+0x24c>)
  4007ba:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007bc:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007be:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4007c0:	4b51      	ldr	r3, [pc, #324]	; (400908 <pmc_sleep+0x250>)
  4007c2:	400b      	ands	r3, r1
  4007c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007c8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4007ca:	4b50      	ldr	r3, [pc, #320]	; (40090c <pmc_sleep+0x254>)
  4007cc:	4033      	ands	r3, r6
  4007ce:	2b00      	cmp	r3, #0
  4007d0:	d06e      	beq.n	4008b0 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4007d2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4007d6:	4b44      	ldr	r3, [pc, #272]	; (4008e8 <pmc_sleep+0x230>)
  4007d8:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4007da:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4007dc:	f1b9 0f02 	cmp.w	r9, #2
  4007e0:	d104      	bne.n	4007ec <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4007e2:	4a41      	ldr	r2, [pc, #260]	; (4008e8 <pmc_sleep+0x230>)
  4007e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e6:	f013 0f02 	tst.w	r3, #2
  4007ea:	d0fb      	beq.n	4007e4 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4007ec:	4a3e      	ldr	r2, [pc, #248]	; (4008e8 <pmc_sleep+0x230>)
  4007ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4007f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4007f4:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4007f8:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4007fa:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007fe:	f013 0f08 	tst.w	r3, #8
  400802:	d0fb      	beq.n	4007fc <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  400804:	4b39      	ldr	r3, [pc, #228]	; (4008ec <pmc_sleep+0x234>)
  400806:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40080a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40080e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400810:	461a      	mov	r2, r3
  400812:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400814:	f013 0f08 	tst.w	r3, #8
  400818:	d0fb      	beq.n	400812 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40081a:	4a33      	ldr	r2, [pc, #204]	; (4008e8 <pmc_sleep+0x230>)
  40081c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40081e:	420b      	tst	r3, r1
  400820:	d0fc      	beq.n	40081c <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400822:	2200      	movs	r2, #0
  400824:	4b2f      	ldr	r3, [pc, #188]	; (4008e4 <pmc_sleep+0x22c>)
  400826:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400828:	4b39      	ldr	r3, [pc, #228]	; (400910 <pmc_sleep+0x258>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	b11b      	cbz	r3, 400836 <pmc_sleep+0x17e>
			callback_clocks_restored();
  40082e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400830:	2200      	movs	r2, #0
  400832:	4b37      	ldr	r3, [pc, #220]	; (400910 <pmc_sleep+0x258>)
  400834:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400836:	2201      	movs	r2, #1
  400838:	4b28      	ldr	r3, [pc, #160]	; (4008dc <pmc_sleep+0x224>)
  40083a:	701a      	strb	r2, [r3, #0]
  40083c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400840:	b662      	cpsie	i
  400842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400846:	4629      	mov	r1, r5
  400848:	e77e      	b.n	400748 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40084a:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  40084e:	6a11      	ldr	r1, [r2, #32]
  400850:	4b30      	ldr	r3, [pc, #192]	; (400914 <pmc_sleep+0x25c>)
  400852:	400b      	ands	r3, r1
  400854:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400858:	6213      	str	r3, [r2, #32]
  40085a:	e799      	b.n	400790 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40085c:	f017 0f01 	tst.w	r7, #1
  400860:	d0b3      	beq.n	4007ca <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400862:	4b21      	ldr	r3, [pc, #132]	; (4008e8 <pmc_sleep+0x230>)
  400864:	6a1b      	ldr	r3, [r3, #32]
  400866:	f013 0f01 	tst.w	r3, #1
  40086a:	d10b      	bne.n	400884 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40086c:	491e      	ldr	r1, [pc, #120]	; (4008e8 <pmc_sleep+0x230>)
  40086e:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400870:	4a29      	ldr	r2, [pc, #164]	; (400918 <pmc_sleep+0x260>)
  400872:	401a      	ands	r2, r3
  400874:	4b29      	ldr	r3, [pc, #164]	; (40091c <pmc_sleep+0x264>)
  400876:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400878:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40087a:	460a      	mov	r2, r1
  40087c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40087e:	f013 0f01 	tst.w	r3, #1
  400882:	d0fb      	beq.n	40087c <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400884:	4b18      	ldr	r3, [pc, #96]	; (4008e8 <pmc_sleep+0x230>)
  400886:	6a1b      	ldr	r3, [r3, #32]
  400888:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40088c:	d108      	bne.n	4008a0 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40088e:	4a16      	ldr	r2, [pc, #88]	; (4008e8 <pmc_sleep+0x230>)
  400890:	6a11      	ldr	r1, [r2, #32]
  400892:	4b23      	ldr	r3, [pc, #140]	; (400920 <pmc_sleep+0x268>)
  400894:	430b      	orrs	r3, r1
  400896:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400898:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40089a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40089e:	d0fb      	beq.n	400898 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008a0:	4a11      	ldr	r2, [pc, #68]	; (4008e8 <pmc_sleep+0x230>)
  4008a2:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4008a4:	4b18      	ldr	r3, [pc, #96]	; (400908 <pmc_sleep+0x250>)
  4008a6:	400b      	ands	r3, r1
  4008a8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008ac:	6213      	str	r3, [r2, #32]
  4008ae:	e78c      	b.n	4007ca <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4008b0:	2100      	movs	r1, #0
  4008b2:	e793      	b.n	4007dc <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4008b4:	4a08      	ldr	r2, [pc, #32]	; (4008d8 <pmc_sleep+0x220>)
  4008b6:	6913      	ldr	r3, [r2, #16]
  4008b8:	f043 0304 	orr.w	r3, r3, #4
  4008bc:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4008be:	4a19      	ldr	r2, [pc, #100]	; (400924 <pmc_sleep+0x26c>)
  4008c0:	4b19      	ldr	r3, [pc, #100]	; (400928 <pmc_sleep+0x270>)
  4008c2:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4008c4:	2201      	movs	r2, #1
  4008c6:	4b05      	ldr	r3, [pc, #20]	; (4008dc <pmc_sleep+0x224>)
  4008c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4008ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008ce:	b662      	cpsie	i
		__WFI() ;
  4008d0:	bf30      	wfi
  4008d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008d6:	bf00      	nop
  4008d8:	e000ed00 	.word	0xe000ed00
  4008dc:	20400000 	.word	0x20400000
  4008e0:	00400669 	.word	0x00400669
  4008e4:	20400a5c 	.word	0x20400a5c
  4008e8:	400e0600 	.word	0x400e0600
  4008ec:	400e0c00 	.word	0x400e0c00
  4008f0:	00370008 	.word	0x00370008
  4008f4:	00400629 	.word	0x00400629
  4008f8:	fec8ffff 	.word	0xfec8ffff
  4008fc:	0040066d 	.word	0x0040066d
  400900:	fec8fffc 	.word	0xfec8fffc
  400904:	01370002 	.word	0x01370002
  400908:	ffc8ff87 	.word	0xffc8ff87
  40090c:	07ff0000 	.word	0x07ff0000
  400910:	20400a60 	.word	0x20400a60
  400914:	ffc8fffe 	.word	0xffc8fffe
  400918:	ffc8fffc 	.word	0xffc8fffc
  40091c:	00370001 	.word	0x00370001
  400920:	01370000 	.word	0x01370000
  400924:	a5000004 	.word	0xa5000004
  400928:	400e1810 	.word	0x400e1810

0040092c <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  40092c:	b921      	cbnz	r1, 400938 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40092e:	6843      	ldr	r3, [r0, #4]
  400930:	f023 0301 	bic.w	r3, r3, #1
  400934:	6043      	str	r3, [r0, #4]
  400936:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400938:	6843      	ldr	r3, [r0, #4]
  40093a:	f043 0301 	orr.w	r3, r3, #1
  40093e:	6043      	str	r3, [r0, #4]
  400940:	4770      	bx	lr

00400942 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  400942:	6201      	str	r1, [r0, #32]
  400944:	4770      	bx	lr

00400946 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400946:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400948:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40094a:	6884      	ldr	r4, [r0, #8]
  40094c:	42a5      	cmp	r5, r4
  40094e:	d003      	beq.n	400958 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  400950:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400952:	6884      	ldr	r4, [r0, #8]
  400954:	42ac      	cmp	r4, r5
  400956:	d1fb      	bne.n	400950 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400958:	b161      	cbz	r1, 400974 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40095a:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40095e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400962:	f3c4 4003 	ubfx	r0, r4, #16, #4
  400966:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40096a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40096e:	bf18      	it	ne
  400970:	300c      	addne	r0, #12
  400972:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400974:	b142      	cbz	r2, 400988 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400976:	f3c4 3102 	ubfx	r1, r4, #12, #3
  40097a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40097e:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400982:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400986:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400988:	b143      	cbz	r3, 40099c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40098a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40098e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400992:	f004 040f 	and.w	r4, r4, #15
  400996:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40099a:	601c      	str	r4, [r3, #0]
	}
}
  40099c:	bc30      	pop	{r4, r5}
  40099e:	4770      	bx	lr

004009a0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4009a0:	b4f0      	push	{r4, r5, r6, r7}
  4009a2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4009a4:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4009a6:	68c4      	ldr	r4, [r0, #12]
  4009a8:	42a5      	cmp	r5, r4
  4009aa:	d003      	beq.n	4009b4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4009ac:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4009ae:	68c4      	ldr	r4, [r0, #12]
  4009b0:	42ac      	cmp	r4, r5
  4009b2:	d1fb      	bne.n	4009ac <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4009b4:	b199      	cbz	r1, 4009de <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4009b6:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4009ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4009be:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4009c2:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4009c6:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4009ca:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4009ce:	f004 000f 	and.w	r0, r4, #15
  4009d2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4009d6:	2564      	movs	r5, #100	; 0x64
  4009d8:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4009dc:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4009de:	b142      	cbz	r2, 4009f2 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4009e0:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4009e4:	0081      	lsls	r1, r0, #2
  4009e6:	4408      	add	r0, r1
  4009e8:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4009ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  4009f0:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  4009f2:	b143      	cbz	r3, 400a06 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4009f4:	f3c4 7201 	ubfx	r2, r4, #28, #2
  4009f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4009fc:	f3c4 6103 	ubfx	r1, r4, #24, #4
  400a00:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400a04:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400a06:	b116      	cbz	r6, 400a0e <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400a08:	f3c4 5442 	ubfx	r4, r4, #21, #3
  400a0c:	6034      	str	r4, [r6, #0]
	}
}
  400a0e:	bcf0      	pop	{r4, r5, r6, r7}
  400a10:	4770      	bx	lr

00400a12 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400a12:	6980      	ldr	r0, [r0, #24]
}
  400a14:	4770      	bx	lr

00400a16 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400a16:	61c1      	str	r1, [r0, #28]
  400a18:	4770      	bx	lr

00400a1a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a1a:	6943      	ldr	r3, [r0, #20]
  400a1c:	f013 0f02 	tst.w	r3, #2
  400a20:	d002      	beq.n	400a28 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a22:	61c1      	str	r1, [r0, #28]
	return 0;
  400a24:	2000      	movs	r0, #0
  400a26:	4770      	bx	lr
		return 1;
  400a28:	2001      	movs	r0, #1
}
  400a2a:	4770      	bx	lr

00400a2c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a2c:	6943      	ldr	r3, [r0, #20]
  400a2e:	f013 0f01 	tst.w	r3, #1
  400a32:	d003      	beq.n	400a3c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a34:	6983      	ldr	r3, [r0, #24]
  400a36:	700b      	strb	r3, [r1, #0]
	return 0;
  400a38:	2000      	movs	r0, #0
  400a3a:	4770      	bx	lr
		return 1;
  400a3c:	2001      	movs	r0, #1
}
  400a3e:	4770      	bx	lr

00400a40 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a40:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a42:	010b      	lsls	r3, r1, #4
  400a44:	4293      	cmp	r3, r2
  400a46:	d914      	bls.n	400a72 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a48:	00c9      	lsls	r1, r1, #3
  400a4a:	084b      	lsrs	r3, r1, #1
  400a4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a50:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a54:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a56:	1e5c      	subs	r4, r3, #1
  400a58:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a5c:	428c      	cmp	r4, r1
  400a5e:	d901      	bls.n	400a64 <usart_set_async_baudrate+0x24>
		return 1;
  400a60:	2001      	movs	r0, #1
  400a62:	e017      	b.n	400a94 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400a64:	6841      	ldr	r1, [r0, #4]
  400a66:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a6a:	6041      	str	r1, [r0, #4]
  400a6c:	e00c      	b.n	400a88 <usart_set_async_baudrate+0x48>
		return 1;
  400a6e:	2001      	movs	r0, #1
  400a70:	e010      	b.n	400a94 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a72:	0859      	lsrs	r1, r3, #1
  400a74:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400a78:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400a7c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a7e:	1e5c      	subs	r4, r3, #1
  400a80:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a84:	428c      	cmp	r4, r1
  400a86:	d8f2      	bhi.n	400a6e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a88:	0412      	lsls	r2, r2, #16
  400a8a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400a8e:	431a      	orrs	r2, r3
  400a90:	6202      	str	r2, [r0, #32]

	return 0;
  400a92:	2000      	movs	r0, #0
}
  400a94:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a98:	4770      	bx	lr
	...

00400a9c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a9c:	4b08      	ldr	r3, [pc, #32]	; (400ac0 <usart_reset+0x24>)
  400a9e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400aa2:	2300      	movs	r3, #0
  400aa4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400aa6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400aa8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400aaa:	2388      	movs	r3, #136	; 0x88
  400aac:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400aae:	2324      	movs	r3, #36	; 0x24
  400ab0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ab6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400ab8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400abc:	6003      	str	r3, [r0, #0]
  400abe:	4770      	bx	lr
  400ac0:	55534100 	.word	0x55534100

00400ac4 <usart_init_rs232>:
{
  400ac4:	b570      	push	{r4, r5, r6, lr}
  400ac6:	4605      	mov	r5, r0
  400ac8:	460c      	mov	r4, r1
  400aca:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400acc:	4b0f      	ldr	r3, [pc, #60]	; (400b0c <usart_init_rs232+0x48>)
  400ace:	4798      	blx	r3
	ul_reg_val = 0;
  400ad0:	2200      	movs	r2, #0
  400ad2:	4b0f      	ldr	r3, [pc, #60]	; (400b10 <usart_init_rs232+0x4c>)
  400ad4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400ad6:	b1a4      	cbz	r4, 400b02 <usart_init_rs232+0x3e>
  400ad8:	4632      	mov	r2, r6
  400ada:	6821      	ldr	r1, [r4, #0]
  400adc:	4628      	mov	r0, r5
  400ade:	4b0d      	ldr	r3, [pc, #52]	; (400b14 <usart_init_rs232+0x50>)
  400ae0:	4798      	blx	r3
  400ae2:	4602      	mov	r2, r0
  400ae4:	b978      	cbnz	r0, 400b06 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ae6:	6863      	ldr	r3, [r4, #4]
  400ae8:	68a1      	ldr	r1, [r4, #8]
  400aea:	430b      	orrs	r3, r1
  400aec:	6921      	ldr	r1, [r4, #16]
  400aee:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400af0:	68e1      	ldr	r1, [r4, #12]
  400af2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400af4:	4906      	ldr	r1, [pc, #24]	; (400b10 <usart_init_rs232+0x4c>)
  400af6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400af8:	6869      	ldr	r1, [r5, #4]
  400afa:	430b      	orrs	r3, r1
  400afc:	606b      	str	r3, [r5, #4]
}
  400afe:	4610      	mov	r0, r2
  400b00:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400b02:	2201      	movs	r2, #1
  400b04:	e7fb      	b.n	400afe <usart_init_rs232+0x3a>
  400b06:	2201      	movs	r2, #1
  400b08:	e7f9      	b.n	400afe <usart_init_rs232+0x3a>
  400b0a:	bf00      	nop
  400b0c:	00400a9d 	.word	0x00400a9d
  400b10:	20400a64 	.word	0x20400a64
  400b14:	00400a41 	.word	0x00400a41

00400b18 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400b18:	2340      	movs	r3, #64	; 0x40
  400b1a:	6003      	str	r3, [r0, #0]
  400b1c:	4770      	bx	lr

00400b1e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400b1e:	2310      	movs	r3, #16
  400b20:	6003      	str	r3, [r0, #0]
  400b22:	4770      	bx	lr

00400b24 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b24:	6943      	ldr	r3, [r0, #20]
  400b26:	f013 0f02 	tst.w	r3, #2
  400b2a:	d004      	beq.n	400b36 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400b2c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400b30:	61c1      	str	r1, [r0, #28]
	return 0;
  400b32:	2000      	movs	r0, #0
  400b34:	4770      	bx	lr
		return 1;
  400b36:	2001      	movs	r0, #1
}
  400b38:	4770      	bx	lr

00400b3a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b3a:	6943      	ldr	r3, [r0, #20]
  400b3c:	f013 0f01 	tst.w	r3, #1
  400b40:	d005      	beq.n	400b4e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b42:	6983      	ldr	r3, [r0, #24]
  400b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b48:	600b      	str	r3, [r1, #0]
	return 0;
  400b4a:	2000      	movs	r0, #0
  400b4c:	4770      	bx	lr
		return 1;
  400b4e:	2001      	movs	r0, #1
}
  400b50:	4770      	bx	lr

00400b52 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b52:	e7fe      	b.n	400b52 <Dummy_Handler>

00400b54 <Reset_Handler>:
{
  400b54:	b500      	push	{lr}
  400b56:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400b58:	4b25      	ldr	r3, [pc, #148]	; (400bf0 <Reset_Handler+0x9c>)
  400b5a:	4a26      	ldr	r2, [pc, #152]	; (400bf4 <Reset_Handler+0xa0>)
  400b5c:	429a      	cmp	r2, r3
  400b5e:	d010      	beq.n	400b82 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400b60:	4b25      	ldr	r3, [pc, #148]	; (400bf8 <Reset_Handler+0xa4>)
  400b62:	4a23      	ldr	r2, [pc, #140]	; (400bf0 <Reset_Handler+0x9c>)
  400b64:	429a      	cmp	r2, r3
  400b66:	d20c      	bcs.n	400b82 <Reset_Handler+0x2e>
  400b68:	3b01      	subs	r3, #1
  400b6a:	1a9b      	subs	r3, r3, r2
  400b6c:	f023 0303 	bic.w	r3, r3, #3
  400b70:	3304      	adds	r3, #4
  400b72:	4413      	add	r3, r2
  400b74:	491f      	ldr	r1, [pc, #124]	; (400bf4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400b76:	f851 0b04 	ldr.w	r0, [r1], #4
  400b7a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400b7e:	429a      	cmp	r2, r3
  400b80:	d1f9      	bne.n	400b76 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400b82:	4b1e      	ldr	r3, [pc, #120]	; (400bfc <Reset_Handler+0xa8>)
  400b84:	4a1e      	ldr	r2, [pc, #120]	; (400c00 <Reset_Handler+0xac>)
  400b86:	429a      	cmp	r2, r3
  400b88:	d20a      	bcs.n	400ba0 <Reset_Handler+0x4c>
  400b8a:	3b01      	subs	r3, #1
  400b8c:	1a9b      	subs	r3, r3, r2
  400b8e:	f023 0303 	bic.w	r3, r3, #3
  400b92:	3304      	adds	r3, #4
  400b94:	4413      	add	r3, r2
                *pDest++ = 0;
  400b96:	2100      	movs	r1, #0
  400b98:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400b9c:	4293      	cmp	r3, r2
  400b9e:	d1fb      	bne.n	400b98 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ba0:	4a18      	ldr	r2, [pc, #96]	; (400c04 <Reset_Handler+0xb0>)
  400ba2:	4b19      	ldr	r3, [pc, #100]	; (400c08 <Reset_Handler+0xb4>)
  400ba4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ba8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400baa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bae:	fab3 f383 	clz	r3, r3
  400bb2:	095b      	lsrs	r3, r3, #5
  400bb4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400bb6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400bb8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bbc:	2200      	movs	r2, #0
  400bbe:	4b13      	ldr	r3, [pc, #76]	; (400c0c <Reset_Handler+0xb8>)
  400bc0:	701a      	strb	r2, [r3, #0]
	return flags;
  400bc2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400bc4:	4a12      	ldr	r2, [pc, #72]	; (400c10 <Reset_Handler+0xbc>)
  400bc6:	6813      	ldr	r3, [r2, #0]
  400bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400bcc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400bce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bd2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400bd6:	b129      	cbz	r1, 400be4 <Reset_Handler+0x90>
		cpu_irq_enable();
  400bd8:	2201      	movs	r2, #1
  400bda:	4b0c      	ldr	r3, [pc, #48]	; (400c0c <Reset_Handler+0xb8>)
  400bdc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400bde:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400be2:	b662      	cpsie	i
        __libc_init_array();
  400be4:	4b0b      	ldr	r3, [pc, #44]	; (400c14 <Reset_Handler+0xc0>)
  400be6:	4798      	blx	r3
        main();
  400be8:	4b0b      	ldr	r3, [pc, #44]	; (400c18 <Reset_Handler+0xc4>)
  400bea:	4798      	blx	r3
  400bec:	e7fe      	b.n	400bec <Reset_Handler+0x98>
  400bee:	bf00      	nop
  400bf0:	20400000 	.word	0x20400000
  400bf4:	004043cc 	.word	0x004043cc
  400bf8:	204009d0 	.word	0x204009d0
  400bfc:	20400ad8 	.word	0x20400ad8
  400c00:	204009d0 	.word	0x204009d0
  400c04:	e000ed00 	.word	0xe000ed00
  400c08:	00400000 	.word	0x00400000
  400c0c:	20400000 	.word	0x20400000
  400c10:	e000ed88 	.word	0xe000ed88
  400c14:	0040114d 	.word	0x0040114d
  400c18:	00401061 	.word	0x00401061

00400c1c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400c1c:	4b3b      	ldr	r3, [pc, #236]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c20:	f003 0303 	and.w	r3, r3, #3
  400c24:	2b01      	cmp	r3, #1
  400c26:	d01d      	beq.n	400c64 <SystemCoreClockUpdate+0x48>
  400c28:	b183      	cbz	r3, 400c4c <SystemCoreClockUpdate+0x30>
  400c2a:	2b02      	cmp	r3, #2
  400c2c:	d036      	beq.n	400c9c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c2e:	4b37      	ldr	r3, [pc, #220]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c36:	2b70      	cmp	r3, #112	; 0x70
  400c38:	d05f      	beq.n	400cfa <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c3a:	4b34      	ldr	r3, [pc, #208]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c3e:	4934      	ldr	r1, [pc, #208]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400c40:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c44:	680b      	ldr	r3, [r1, #0]
  400c46:	40d3      	lsrs	r3, r2
  400c48:	600b      	str	r3, [r1, #0]
  400c4a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c4c:	4b31      	ldr	r3, [pc, #196]	; (400d14 <SystemCoreClockUpdate+0xf8>)
  400c4e:	695b      	ldr	r3, [r3, #20]
  400c50:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c54:	bf14      	ite	ne
  400c56:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c5a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c5e:	4b2c      	ldr	r3, [pc, #176]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400c60:	601a      	str	r2, [r3, #0]
  400c62:	e7e4      	b.n	400c2e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c64:	4b29      	ldr	r3, [pc, #164]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400c66:	6a1b      	ldr	r3, [r3, #32]
  400c68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c6c:	d003      	beq.n	400c76 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c6e:	4a2a      	ldr	r2, [pc, #168]	; (400d18 <SystemCoreClockUpdate+0xfc>)
  400c70:	4b27      	ldr	r3, [pc, #156]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400c72:	601a      	str	r2, [r3, #0]
  400c74:	e7db      	b.n	400c2e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c76:	4a29      	ldr	r2, [pc, #164]	; (400d1c <SystemCoreClockUpdate+0x100>)
  400c78:	4b25      	ldr	r3, [pc, #148]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400c7a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c7c:	4b23      	ldr	r3, [pc, #140]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400c7e:	6a1b      	ldr	r3, [r3, #32]
  400c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c84:	2b10      	cmp	r3, #16
  400c86:	d005      	beq.n	400c94 <SystemCoreClockUpdate+0x78>
  400c88:	2b20      	cmp	r3, #32
  400c8a:	d1d0      	bne.n	400c2e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400c8c:	4a22      	ldr	r2, [pc, #136]	; (400d18 <SystemCoreClockUpdate+0xfc>)
  400c8e:	4b20      	ldr	r3, [pc, #128]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400c90:	601a      	str	r2, [r3, #0]
          break;
  400c92:	e7cc      	b.n	400c2e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400c94:	4a22      	ldr	r2, [pc, #136]	; (400d20 <SystemCoreClockUpdate+0x104>)
  400c96:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400c98:	601a      	str	r2, [r3, #0]
          break;
  400c9a:	e7c8      	b.n	400c2e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c9c:	4b1b      	ldr	r3, [pc, #108]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400c9e:	6a1b      	ldr	r3, [r3, #32]
  400ca0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ca4:	d016      	beq.n	400cd4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400ca6:	4a1c      	ldr	r2, [pc, #112]	; (400d18 <SystemCoreClockUpdate+0xfc>)
  400ca8:	4b19      	ldr	r3, [pc, #100]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400caa:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400cac:	4b17      	ldr	r3, [pc, #92]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cb0:	f003 0303 	and.w	r3, r3, #3
  400cb4:	2b02      	cmp	r3, #2
  400cb6:	d1ba      	bne.n	400c2e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cb8:	4a14      	ldr	r2, [pc, #80]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400cba:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400cbe:	4814      	ldr	r0, [pc, #80]	; (400d10 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cc0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400cc4:	6803      	ldr	r3, [r0, #0]
  400cc6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cca:	b2d2      	uxtb	r2, r2
  400ccc:	fbb3 f3f2 	udiv	r3, r3, r2
  400cd0:	6003      	str	r3, [r0, #0]
  400cd2:	e7ac      	b.n	400c2e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cd4:	4a11      	ldr	r2, [pc, #68]	; (400d1c <SystemCoreClockUpdate+0x100>)
  400cd6:	4b0e      	ldr	r3, [pc, #56]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400cd8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400cda:	4b0c      	ldr	r3, [pc, #48]	; (400d0c <SystemCoreClockUpdate+0xf0>)
  400cdc:	6a1b      	ldr	r3, [r3, #32]
  400cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ce2:	2b10      	cmp	r3, #16
  400ce4:	d005      	beq.n	400cf2 <SystemCoreClockUpdate+0xd6>
  400ce6:	2b20      	cmp	r3, #32
  400ce8:	d1e0      	bne.n	400cac <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400cea:	4a0b      	ldr	r2, [pc, #44]	; (400d18 <SystemCoreClockUpdate+0xfc>)
  400cec:	4b08      	ldr	r3, [pc, #32]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400cee:	601a      	str	r2, [r3, #0]
          break;
  400cf0:	e7dc      	b.n	400cac <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400cf2:	4a0b      	ldr	r2, [pc, #44]	; (400d20 <SystemCoreClockUpdate+0x104>)
  400cf4:	4b06      	ldr	r3, [pc, #24]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400cf6:	601a      	str	r2, [r3, #0]
          break;
  400cf8:	e7d8      	b.n	400cac <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400cfa:	4a05      	ldr	r2, [pc, #20]	; (400d10 <SystemCoreClockUpdate+0xf4>)
  400cfc:	6813      	ldr	r3, [r2, #0]
  400cfe:	4909      	ldr	r1, [pc, #36]	; (400d24 <SystemCoreClockUpdate+0x108>)
  400d00:	fba1 1303 	umull	r1, r3, r1, r3
  400d04:	085b      	lsrs	r3, r3, #1
  400d06:	6013      	str	r3, [r2, #0]
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop
  400d0c:	400e0600 	.word	0x400e0600
  400d10:	20400004 	.word	0x20400004
  400d14:	400e1810 	.word	0x400e1810
  400d18:	00b71b00 	.word	0x00b71b00
  400d1c:	003d0900 	.word	0x003d0900
  400d20:	007a1200 	.word	0x007a1200
  400d24:	aaaaaaab 	.word	0xaaaaaaab

00400d28 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400d28:	4b16      	ldr	r3, [pc, #88]	; (400d84 <system_init_flash+0x5c>)
  400d2a:	4298      	cmp	r0, r3
  400d2c:	d913      	bls.n	400d56 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400d2e:	4b16      	ldr	r3, [pc, #88]	; (400d88 <system_init_flash+0x60>)
  400d30:	4298      	cmp	r0, r3
  400d32:	d915      	bls.n	400d60 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400d34:	4b15      	ldr	r3, [pc, #84]	; (400d8c <system_init_flash+0x64>)
  400d36:	4298      	cmp	r0, r3
  400d38:	d916      	bls.n	400d68 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400d3a:	4b15      	ldr	r3, [pc, #84]	; (400d90 <system_init_flash+0x68>)
  400d3c:	4298      	cmp	r0, r3
  400d3e:	d917      	bls.n	400d70 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400d40:	4b14      	ldr	r3, [pc, #80]	; (400d94 <system_init_flash+0x6c>)
  400d42:	4298      	cmp	r0, r3
  400d44:	d918      	bls.n	400d78 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400d46:	4b14      	ldr	r3, [pc, #80]	; (400d98 <system_init_flash+0x70>)
  400d48:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d4a:	bf94      	ite	ls
  400d4c:	4a13      	ldrls	r2, [pc, #76]	; (400d9c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400d4e:	4a14      	ldrhi	r2, [pc, #80]	; (400da0 <system_init_flash+0x78>)
  400d50:	4b14      	ldr	r3, [pc, #80]	; (400da4 <system_init_flash+0x7c>)
  400d52:	601a      	str	r2, [r3, #0]
  400d54:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d5a:	4b12      	ldr	r3, [pc, #72]	; (400da4 <system_init_flash+0x7c>)
  400d5c:	601a      	str	r2, [r3, #0]
  400d5e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d60:	4a11      	ldr	r2, [pc, #68]	; (400da8 <system_init_flash+0x80>)
  400d62:	4b10      	ldr	r3, [pc, #64]	; (400da4 <system_init_flash+0x7c>)
  400d64:	601a      	str	r2, [r3, #0]
  400d66:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d68:	4a10      	ldr	r2, [pc, #64]	; (400dac <system_init_flash+0x84>)
  400d6a:	4b0e      	ldr	r3, [pc, #56]	; (400da4 <system_init_flash+0x7c>)
  400d6c:	601a      	str	r2, [r3, #0]
  400d6e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d70:	4a0f      	ldr	r2, [pc, #60]	; (400db0 <system_init_flash+0x88>)
  400d72:	4b0c      	ldr	r3, [pc, #48]	; (400da4 <system_init_flash+0x7c>)
  400d74:	601a      	str	r2, [r3, #0]
  400d76:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d78:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400d7c:	4b09      	ldr	r3, [pc, #36]	; (400da4 <system_init_flash+0x7c>)
  400d7e:	601a      	str	r2, [r3, #0]
  400d80:	4770      	bx	lr
  400d82:	bf00      	nop
  400d84:	015ef3bf 	.word	0x015ef3bf
  400d88:	02bde77f 	.word	0x02bde77f
  400d8c:	041cdb3f 	.word	0x041cdb3f
  400d90:	057bceff 	.word	0x057bceff
  400d94:	06dac2bf 	.word	0x06dac2bf
  400d98:	0839b67f 	.word	0x0839b67f
  400d9c:	04000500 	.word	0x04000500
  400da0:	04000600 	.word	0x04000600
  400da4:	400e0c00 	.word	0x400e0c00
  400da8:	04000100 	.word	0x04000100
  400dac:	04000200 	.word	0x04000200
  400db0:	04000300 	.word	0x04000300

00400db4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400db4:	4b0a      	ldr	r3, [pc, #40]	; (400de0 <_sbrk+0x2c>)
  400db6:	681b      	ldr	r3, [r3, #0]
  400db8:	b153      	cbz	r3, 400dd0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400dba:	4b09      	ldr	r3, [pc, #36]	; (400de0 <_sbrk+0x2c>)
  400dbc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400dbe:	181a      	adds	r2, r3, r0
  400dc0:	4908      	ldr	r1, [pc, #32]	; (400de4 <_sbrk+0x30>)
  400dc2:	4291      	cmp	r1, r2
  400dc4:	db08      	blt.n	400dd8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400dc6:	4610      	mov	r0, r2
  400dc8:	4a05      	ldr	r2, [pc, #20]	; (400de0 <_sbrk+0x2c>)
  400dca:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400dcc:	4618      	mov	r0, r3
  400dce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400dd0:	4a05      	ldr	r2, [pc, #20]	; (400de8 <_sbrk+0x34>)
  400dd2:	4b03      	ldr	r3, [pc, #12]	; (400de0 <_sbrk+0x2c>)
  400dd4:	601a      	str	r2, [r3, #0]
  400dd6:	e7f0      	b.n	400dba <_sbrk+0x6>
		return (caddr_t) -1;	
  400dd8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400ddc:	4770      	bx	lr
  400dde:	bf00      	nop
  400de0:	20400a68 	.word	0x20400a68
  400de4:	2045fffc 	.word	0x2045fffc
  400de8:	20402cd8 	.word	0x20402cd8

00400dec <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400dec:	f04f 30ff 	mov.w	r0, #4294967295
  400df0:	4770      	bx	lr

00400df2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400df6:	604b      	str	r3, [r1, #4]

	return 0;
}
  400df8:	2000      	movs	r0, #0
  400dfa:	4770      	bx	lr

00400dfc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400dfc:	2001      	movs	r0, #1
  400dfe:	4770      	bx	lr

00400e00 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e00:	2000      	movs	r0, #0
  400e02:	4770      	bx	lr

00400e04 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400e04:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e06:	b083      	sub	sp, #12
  400e08:	4605      	mov	r5, r0
  400e0a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400e0c:	2300      	movs	r3, #0
  400e0e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400e10:	4b2a      	ldr	r3, [pc, #168]	; (400ebc <usart_serial_getchar+0xb8>)
  400e12:	4298      	cmp	r0, r3
  400e14:	d013      	beq.n	400e3e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400e16:	4b2a      	ldr	r3, [pc, #168]	; (400ec0 <usart_serial_getchar+0xbc>)
  400e18:	4298      	cmp	r0, r3
  400e1a:	d018      	beq.n	400e4e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400e1c:	4b29      	ldr	r3, [pc, #164]	; (400ec4 <usart_serial_getchar+0xc0>)
  400e1e:	4298      	cmp	r0, r3
  400e20:	d01d      	beq.n	400e5e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400e22:	4b29      	ldr	r3, [pc, #164]	; (400ec8 <usart_serial_getchar+0xc4>)
  400e24:	429d      	cmp	r5, r3
  400e26:	d022      	beq.n	400e6e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400e28:	4b28      	ldr	r3, [pc, #160]	; (400ecc <usart_serial_getchar+0xc8>)
  400e2a:	429d      	cmp	r5, r3
  400e2c:	d027      	beq.n	400e7e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400e2e:	4b28      	ldr	r3, [pc, #160]	; (400ed0 <usart_serial_getchar+0xcc>)
  400e30:	429d      	cmp	r5, r3
  400e32:	d02e      	beq.n	400e92 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400e34:	4b27      	ldr	r3, [pc, #156]	; (400ed4 <usart_serial_getchar+0xd0>)
  400e36:	429d      	cmp	r5, r3
  400e38:	d035      	beq.n	400ea6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400e3a:	b003      	add	sp, #12
  400e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400e3e:	461f      	mov	r7, r3
  400e40:	4e25      	ldr	r6, [pc, #148]	; (400ed8 <usart_serial_getchar+0xd4>)
  400e42:	4621      	mov	r1, r4
  400e44:	4638      	mov	r0, r7
  400e46:	47b0      	blx	r6
  400e48:	2800      	cmp	r0, #0
  400e4a:	d1fa      	bne.n	400e42 <usart_serial_getchar+0x3e>
  400e4c:	e7e9      	b.n	400e22 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400e4e:	461f      	mov	r7, r3
  400e50:	4e21      	ldr	r6, [pc, #132]	; (400ed8 <usart_serial_getchar+0xd4>)
  400e52:	4621      	mov	r1, r4
  400e54:	4638      	mov	r0, r7
  400e56:	47b0      	blx	r6
  400e58:	2800      	cmp	r0, #0
  400e5a:	d1fa      	bne.n	400e52 <usart_serial_getchar+0x4e>
  400e5c:	e7e4      	b.n	400e28 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400e5e:	461f      	mov	r7, r3
  400e60:	4e1d      	ldr	r6, [pc, #116]	; (400ed8 <usart_serial_getchar+0xd4>)
  400e62:	4621      	mov	r1, r4
  400e64:	4638      	mov	r0, r7
  400e66:	47b0      	blx	r6
  400e68:	2800      	cmp	r0, #0
  400e6a:	d1fa      	bne.n	400e62 <usart_serial_getchar+0x5e>
  400e6c:	e7df      	b.n	400e2e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400e6e:	461f      	mov	r7, r3
  400e70:	4e19      	ldr	r6, [pc, #100]	; (400ed8 <usart_serial_getchar+0xd4>)
  400e72:	4621      	mov	r1, r4
  400e74:	4638      	mov	r0, r7
  400e76:	47b0      	blx	r6
  400e78:	2800      	cmp	r0, #0
  400e7a:	d1fa      	bne.n	400e72 <usart_serial_getchar+0x6e>
  400e7c:	e7da      	b.n	400e34 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400e7e:	461e      	mov	r6, r3
  400e80:	4d16      	ldr	r5, [pc, #88]	; (400edc <usart_serial_getchar+0xd8>)
  400e82:	a901      	add	r1, sp, #4
  400e84:	4630      	mov	r0, r6
  400e86:	47a8      	blx	r5
  400e88:	2800      	cmp	r0, #0
  400e8a:	d1fa      	bne.n	400e82 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400e8c:	9b01      	ldr	r3, [sp, #4]
  400e8e:	7023      	strb	r3, [r4, #0]
  400e90:	e7d3      	b.n	400e3a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400e92:	461e      	mov	r6, r3
  400e94:	4d11      	ldr	r5, [pc, #68]	; (400edc <usart_serial_getchar+0xd8>)
  400e96:	a901      	add	r1, sp, #4
  400e98:	4630      	mov	r0, r6
  400e9a:	47a8      	blx	r5
  400e9c:	2800      	cmp	r0, #0
  400e9e:	d1fa      	bne.n	400e96 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400ea0:	9b01      	ldr	r3, [sp, #4]
  400ea2:	7023      	strb	r3, [r4, #0]
  400ea4:	e7c9      	b.n	400e3a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400ea6:	461e      	mov	r6, r3
  400ea8:	4d0c      	ldr	r5, [pc, #48]	; (400edc <usart_serial_getchar+0xd8>)
  400eaa:	a901      	add	r1, sp, #4
  400eac:	4630      	mov	r0, r6
  400eae:	47a8      	blx	r5
  400eb0:	2800      	cmp	r0, #0
  400eb2:	d1fa      	bne.n	400eaa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400eb4:	9b01      	ldr	r3, [sp, #4]
  400eb6:	7023      	strb	r3, [r4, #0]
}
  400eb8:	e7bf      	b.n	400e3a <usart_serial_getchar+0x36>
  400eba:	bf00      	nop
  400ebc:	400e0800 	.word	0x400e0800
  400ec0:	400e0a00 	.word	0x400e0a00
  400ec4:	400e1a00 	.word	0x400e1a00
  400ec8:	400e1c00 	.word	0x400e1c00
  400ecc:	40024000 	.word	0x40024000
  400ed0:	40028000 	.word	0x40028000
  400ed4:	4002c000 	.word	0x4002c000
  400ed8:	00400a2d 	.word	0x00400a2d
  400edc:	00400b3b 	.word	0x00400b3b

00400ee0 <usart_serial_putchar>:
{
  400ee0:	b570      	push	{r4, r5, r6, lr}
  400ee2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400ee4:	4b2a      	ldr	r3, [pc, #168]	; (400f90 <usart_serial_putchar+0xb0>)
  400ee6:	4298      	cmp	r0, r3
  400ee8:	d013      	beq.n	400f12 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400eea:	4b2a      	ldr	r3, [pc, #168]	; (400f94 <usart_serial_putchar+0xb4>)
  400eec:	4298      	cmp	r0, r3
  400eee:	d019      	beq.n	400f24 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400ef0:	4b29      	ldr	r3, [pc, #164]	; (400f98 <usart_serial_putchar+0xb8>)
  400ef2:	4298      	cmp	r0, r3
  400ef4:	d01f      	beq.n	400f36 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400ef6:	4b29      	ldr	r3, [pc, #164]	; (400f9c <usart_serial_putchar+0xbc>)
  400ef8:	4298      	cmp	r0, r3
  400efa:	d025      	beq.n	400f48 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400efc:	4b28      	ldr	r3, [pc, #160]	; (400fa0 <usart_serial_putchar+0xc0>)
  400efe:	4298      	cmp	r0, r3
  400f00:	d02b      	beq.n	400f5a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400f02:	4b28      	ldr	r3, [pc, #160]	; (400fa4 <usart_serial_putchar+0xc4>)
  400f04:	4298      	cmp	r0, r3
  400f06:	d031      	beq.n	400f6c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400f08:	4b27      	ldr	r3, [pc, #156]	; (400fa8 <usart_serial_putchar+0xc8>)
  400f0a:	4298      	cmp	r0, r3
  400f0c:	d037      	beq.n	400f7e <usart_serial_putchar+0x9e>
	return 0;
  400f0e:	2000      	movs	r0, #0
}
  400f10:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f12:	461e      	mov	r6, r3
  400f14:	4d25      	ldr	r5, [pc, #148]	; (400fac <usart_serial_putchar+0xcc>)
  400f16:	4621      	mov	r1, r4
  400f18:	4630      	mov	r0, r6
  400f1a:	47a8      	blx	r5
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d1fa      	bne.n	400f16 <usart_serial_putchar+0x36>
		return 1;
  400f20:	2001      	movs	r0, #1
  400f22:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f24:	461e      	mov	r6, r3
  400f26:	4d21      	ldr	r5, [pc, #132]	; (400fac <usart_serial_putchar+0xcc>)
  400f28:	4621      	mov	r1, r4
  400f2a:	4630      	mov	r0, r6
  400f2c:	47a8      	blx	r5
  400f2e:	2800      	cmp	r0, #0
  400f30:	d1fa      	bne.n	400f28 <usart_serial_putchar+0x48>
		return 1;
  400f32:	2001      	movs	r0, #1
  400f34:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f36:	461e      	mov	r6, r3
  400f38:	4d1c      	ldr	r5, [pc, #112]	; (400fac <usart_serial_putchar+0xcc>)
  400f3a:	4621      	mov	r1, r4
  400f3c:	4630      	mov	r0, r6
  400f3e:	47a8      	blx	r5
  400f40:	2800      	cmp	r0, #0
  400f42:	d1fa      	bne.n	400f3a <usart_serial_putchar+0x5a>
		return 1;
  400f44:	2001      	movs	r0, #1
  400f46:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400f48:	461e      	mov	r6, r3
  400f4a:	4d18      	ldr	r5, [pc, #96]	; (400fac <usart_serial_putchar+0xcc>)
  400f4c:	4621      	mov	r1, r4
  400f4e:	4630      	mov	r0, r6
  400f50:	47a8      	blx	r5
  400f52:	2800      	cmp	r0, #0
  400f54:	d1fa      	bne.n	400f4c <usart_serial_putchar+0x6c>
		return 1;
  400f56:	2001      	movs	r0, #1
  400f58:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f5a:	461e      	mov	r6, r3
  400f5c:	4d14      	ldr	r5, [pc, #80]	; (400fb0 <usart_serial_putchar+0xd0>)
  400f5e:	4621      	mov	r1, r4
  400f60:	4630      	mov	r0, r6
  400f62:	47a8      	blx	r5
  400f64:	2800      	cmp	r0, #0
  400f66:	d1fa      	bne.n	400f5e <usart_serial_putchar+0x7e>
		return 1;
  400f68:	2001      	movs	r0, #1
  400f6a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f6c:	461e      	mov	r6, r3
  400f6e:	4d10      	ldr	r5, [pc, #64]	; (400fb0 <usart_serial_putchar+0xd0>)
  400f70:	4621      	mov	r1, r4
  400f72:	4630      	mov	r0, r6
  400f74:	47a8      	blx	r5
  400f76:	2800      	cmp	r0, #0
  400f78:	d1fa      	bne.n	400f70 <usart_serial_putchar+0x90>
		return 1;
  400f7a:	2001      	movs	r0, #1
  400f7c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400f7e:	461e      	mov	r6, r3
  400f80:	4d0b      	ldr	r5, [pc, #44]	; (400fb0 <usart_serial_putchar+0xd0>)
  400f82:	4621      	mov	r1, r4
  400f84:	4630      	mov	r0, r6
  400f86:	47a8      	blx	r5
  400f88:	2800      	cmp	r0, #0
  400f8a:	d1fa      	bne.n	400f82 <usart_serial_putchar+0xa2>
		return 1;
  400f8c:	2001      	movs	r0, #1
  400f8e:	bd70      	pop	{r4, r5, r6, pc}
  400f90:	400e0800 	.word	0x400e0800
  400f94:	400e0a00 	.word	0x400e0a00
  400f98:	400e1a00 	.word	0x400e1a00
  400f9c:	400e1c00 	.word	0x400e1c00
  400fa0:	40024000 	.word	0x40024000
  400fa4:	40028000 	.word	0x40028000
  400fa8:	4002c000 	.word	0x4002c000
  400fac:	00400a1b 	.word	0x00400a1b
  400fb0:	00400b25 	.word	0x00400b25

00400fb4 <RTC_Handler>:

/**
 * \brief RTC interrupt handler.
 */
void RTC_Handler(void)
{
  400fb4:	b530      	push	{r4, r5, lr}
  400fb6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_status = rtc_get_status(RTC);
  400fb8:	481d      	ldr	r0, [pc, #116]	; (401030 <RTC_Handler+0x7c>)
  400fba:	4b1e      	ldr	r3, [pc, #120]	; (401034 <RTC_Handler+0x80>)
  400fbc:	4798      	blx	r3

	/* Second increment interrupt */
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  400fbe:	f010 0f04 	tst.w	r0, #4
  400fc2:	d101      	bne.n	400fc8 <RTC_Handler+0x14>
			printf("Interrupt: Counter has reached %d!\n", TARGET_COUNT);
			/* Reset the counter */
			ul_interrupt_count = 0;
		}
	}
}
  400fc4:	b00b      	add	sp, #44	; 0x2c
  400fc6:	bd30      	pop	{r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  400fc8:	4c19      	ldr	r4, [pc, #100]	; (401030 <RTC_Handler+0x7c>)
  400fca:	2104      	movs	r1, #4
  400fcc:	4620      	mov	r0, r4
  400fce:	4b1a      	ldr	r3, [pc, #104]	; (401038 <RTC_Handler+0x84>)
  400fd0:	4798      	blx	r3
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  400fd2:	ab05      	add	r3, sp, #20
  400fd4:	aa04      	add	r2, sp, #16
  400fd6:	a903      	add	r1, sp, #12
  400fd8:	4620      	mov	r0, r4
  400fda:	4d18      	ldr	r5, [pc, #96]	; (40103c <RTC_Handler+0x88>)
  400fdc:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  400fde:	ab09      	add	r3, sp, #36	; 0x24
  400fe0:	9300      	str	r3, [sp, #0]
  400fe2:	ab08      	add	r3, sp, #32
  400fe4:	aa07      	add	r2, sp, #28
  400fe6:	a906      	add	r1, sp, #24
  400fe8:	4620      	mov	r0, r4
  400fea:	4c15      	ldr	r4, [pc, #84]	; (401040 <RTC_Handler+0x8c>)
  400fec:	47a0      	blx	r4
	printf("\033[H\033[J");  // ANSI escape codes to clear the screen
  400fee:	4815      	ldr	r0, [pc, #84]	; (401044 <RTC_Handler+0x90>)
  400ff0:	4c15      	ldr	r4, [pc, #84]	; (401048 <RTC_Handler+0x94>)
  400ff2:	47a0      	blx	r4
	printf("Current time: %02u:%02u:%02u\n", (unsigned int)ul_hour,
  400ff4:	9b05      	ldr	r3, [sp, #20]
  400ff6:	9a04      	ldr	r2, [sp, #16]
  400ff8:	9903      	ldr	r1, [sp, #12]
  400ffa:	4814      	ldr	r0, [pc, #80]	; (40104c <RTC_Handler+0x98>)
  400ffc:	47a0      	blx	r4
			(unsigned int)ul_year, (char const *)gs_uc_day_names[ul_week - 1]);
  400ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401000:	1e5a      	subs	r2, r3, #1
  401002:	4b13      	ldr	r3, [pc, #76]	; (401050 <RTC_Handler+0x9c>)
  401004:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	printf("Current date: %02u/%02u/%04u %s\n",
  401008:	9300      	str	r3, [sp, #0]
  40100a:	9b06      	ldr	r3, [sp, #24]
  40100c:	9a08      	ldr	r2, [sp, #32]
  40100e:	9907      	ldr	r1, [sp, #28]
  401010:	4810      	ldr	r0, [pc, #64]	; (401054 <RTC_Handler+0xa0>)
  401012:	47a0      	blx	r4
		ul_interrupt_count++;
  401014:	4b10      	ldr	r3, [pc, #64]	; (401058 <RTC_Handler+0xa4>)
  401016:	681a      	ldr	r2, [r3, #0]
  401018:	3201      	adds	r2, #1
  40101a:	601a      	str	r2, [r3, #0]
		if (ul_interrupt_count >= TARGET_COUNT) {
  40101c:	681b      	ldr	r3, [r3, #0]
  40101e:	2b09      	cmp	r3, #9
  401020:	d9d0      	bls.n	400fc4 <RTC_Handler+0x10>
			printf("Interrupt: Counter has reached %d!\n", TARGET_COUNT);
  401022:	210a      	movs	r1, #10
  401024:	480d      	ldr	r0, [pc, #52]	; (40105c <RTC_Handler+0xa8>)
  401026:	47a0      	blx	r4
			ul_interrupt_count = 0;
  401028:	2200      	movs	r2, #0
  40102a:	4b0b      	ldr	r3, [pc, #44]	; (401058 <RTC_Handler+0xa4>)
  40102c:	601a      	str	r2, [r3, #0]
}
  40102e:	e7c9      	b.n	400fc4 <RTC_Handler+0x10>
  401030:	400e1860 	.word	0x400e1860
  401034:	00400a13 	.word	0x00400a13
  401038:	00400a17 	.word	0x00400a17
  40103c:	00400947 	.word	0x00400947
  401040:	004009a1 	.word	0x004009a1
  401044:	00404178 	.word	0x00404178
  401048:	0040119d 	.word	0x0040119d
  40104c:	00404180 	.word	0x00404180
  401050:	20400008 	.word	0x20400008
  401054:	004041a0 	.word	0x004041a0
  401058:	20400a6c 	.word	0x20400a6c
  40105c:	004041c4 	.word	0x004041c4

00401060 <main>:
/**
 * \brief Application entry point for RTC example.
 * Initialize the system, UART console, RTC, and display the time and date.
 */
int main(void)
{
  401060:	b580      	push	{r7, lr}
  401062:	b086      	sub	sp, #24
	/* Initialize the SAM system */
	sysclk_init();
  401064:	4b23      	ldr	r3, [pc, #140]	; (4010f4 <main+0x94>)
  401066:	4798      	blx	r3
	board_init();
  401068:	4b23      	ldr	r3, [pc, #140]	; (4010f8 <main+0x98>)
  40106a:	4798      	blx	r3
  40106c:	200e      	movs	r0, #14
  40106e:	4e23      	ldr	r6, [pc, #140]	; (4010fc <main+0x9c>)
  401070:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401072:	4d23      	ldr	r5, [pc, #140]	; (401100 <main+0xa0>)
  401074:	4b23      	ldr	r3, [pc, #140]	; (401104 <main+0xa4>)
  401076:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401078:	4a23      	ldr	r2, [pc, #140]	; (401108 <main+0xa8>)
  40107a:	4b24      	ldr	r3, [pc, #144]	; (40110c <main+0xac>)
  40107c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40107e:	4a24      	ldr	r2, [pc, #144]	; (401110 <main+0xb0>)
  401080:	4b24      	ldr	r3, [pc, #144]	; (401114 <main+0xb4>)
  401082:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401084:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401088:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40108a:	23c0      	movs	r3, #192	; 0xc0
  40108c:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  40108e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401092:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  401094:	2400      	movs	r4, #0
  401096:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401098:	9404      	str	r4, [sp, #16]
  40109a:	200e      	movs	r0, #14
  40109c:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  40109e:	4a1e      	ldr	r2, [pc, #120]	; (401118 <main+0xb8>)
  4010a0:	4669      	mov	r1, sp
  4010a2:	4628      	mov	r0, r5
  4010a4:	4b1d      	ldr	r3, [pc, #116]	; (40111c <main+0xbc>)
  4010a6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4010a8:	4628      	mov	r0, r5
  4010aa:	4b1d      	ldr	r3, [pc, #116]	; (401120 <main+0xc0>)
  4010ac:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4010ae:	4628      	mov	r0, r5
  4010b0:	4b1c      	ldr	r3, [pc, #112]	; (401124 <main+0xc4>)
  4010b2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4010b4:	4f1c      	ldr	r7, [pc, #112]	; (401128 <main+0xc8>)
  4010b6:	683b      	ldr	r3, [r7, #0]
  4010b8:	4621      	mov	r1, r4
  4010ba:	6898      	ldr	r0, [r3, #8]
  4010bc:	4d1b      	ldr	r5, [pc, #108]	; (40112c <main+0xcc>)
  4010be:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4010c0:	683b      	ldr	r3, [r7, #0]
  4010c2:	4621      	mov	r1, r4
  4010c4:	6858      	ldr	r0, [r3, #4]
  4010c6:	47a8      	blx	r5

	/* Initialize the UART console */
	configure_console();
	puts(STRING_HEADER);
  4010c8:	4819      	ldr	r0, [pc, #100]	; (401130 <main+0xd0>)
  4010ca:	4b1a      	ldr	r3, [pc, #104]	; (401134 <main+0xd4>)
  4010cc:	4798      	blx	r3

	/* Enable the RTC peripheral clock */
	pmc_enable_periph_clk(ID_RTC);
  4010ce:	2002      	movs	r0, #2
  4010d0:	47b0      	blx	r6

	/* Configure RTC for 24-hour mode and enable second interrupt */
	rtc_set_hour_mode(RTC, 0);
  4010d2:	4d19      	ldr	r5, [pc, #100]	; (401138 <main+0xd8>)
  4010d4:	4621      	mov	r1, r4
  4010d6:	4628      	mov	r0, r5
  4010d8:	4b18      	ldr	r3, [pc, #96]	; (40113c <main+0xdc>)
  4010da:	4798      	blx	r3
	rtc_enable_interrupt(RTC, RTC_IER_SECEN);
  4010dc:	2104      	movs	r1, #4
  4010de:	4628      	mov	r0, r5
  4010e0:	4b17      	ldr	r3, [pc, #92]	; (401140 <main+0xe0>)
  4010e2:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4010e4:	2204      	movs	r2, #4
  4010e6:	4b17      	ldr	r3, [pc, #92]	; (401144 <main+0xe4>)
  4010e8:	601a      	str	r2, [r3, #0]
	/* Enable RTC interrupt in NVIC */
	NVIC_EnableIRQ(RTC_IRQn);

	while (1) {
		/* Enter sleep mode, waiting for RTC interrupt to wake up */
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4010ea:	2502      	movs	r5, #2
  4010ec:	4c16      	ldr	r4, [pc, #88]	; (401148 <main+0xe8>)
  4010ee:	4628      	mov	r0, r5
  4010f0:	47a0      	blx	r4
  4010f2:	e7fc      	b.n	4010ee <main+0x8e>
  4010f4:	004001d5 	.word	0x004001d5
  4010f8:	004002d1 	.word	0x004002d1
  4010fc:	00400649 	.word	0x00400649
  401100:	40028000 	.word	0x40028000
  401104:	20400aac 	.word	0x20400aac
  401108:	00400ee1 	.word	0x00400ee1
  40110c:	20400aa8 	.word	0x20400aa8
  401110:	00400e05 	.word	0x00400e05
  401114:	20400aa4 	.word	0x20400aa4
  401118:	08f0d180 	.word	0x08f0d180
  40111c:	00400ac5 	.word	0x00400ac5
  401120:	00400b19 	.word	0x00400b19
  401124:	00400b1f 	.word	0x00400b1f
  401128:	20400024 	.word	0x20400024
  40112c:	0040130d 	.word	0x0040130d
  401130:	004041e8 	.word	0x004041e8
  401134:	004012fd 	.word	0x004012fd
  401138:	400e1860 	.word	0x400e1860
  40113c:	0040092d 	.word	0x0040092d
  401140:	00400943 	.word	0x00400943
  401144:	e000e100 	.word	0xe000e100
  401148:	004006b9 	.word	0x004006b9

0040114c <__libc_init_array>:
  40114c:	b570      	push	{r4, r5, r6, lr}
  40114e:	4e0f      	ldr	r6, [pc, #60]	; (40118c <__libc_init_array+0x40>)
  401150:	4d0f      	ldr	r5, [pc, #60]	; (401190 <__libc_init_array+0x44>)
  401152:	1b76      	subs	r6, r6, r5
  401154:	10b6      	asrs	r6, r6, #2
  401156:	bf18      	it	ne
  401158:	2400      	movne	r4, #0
  40115a:	d005      	beq.n	401168 <__libc_init_array+0x1c>
  40115c:	3401      	adds	r4, #1
  40115e:	f855 3b04 	ldr.w	r3, [r5], #4
  401162:	4798      	blx	r3
  401164:	42a6      	cmp	r6, r4
  401166:	d1f9      	bne.n	40115c <__libc_init_array+0x10>
  401168:	4e0a      	ldr	r6, [pc, #40]	; (401194 <__libc_init_array+0x48>)
  40116a:	4d0b      	ldr	r5, [pc, #44]	; (401198 <__libc_init_array+0x4c>)
  40116c:	1b76      	subs	r6, r6, r5
  40116e:	f003 f917 	bl	4043a0 <_init>
  401172:	10b6      	asrs	r6, r6, #2
  401174:	bf18      	it	ne
  401176:	2400      	movne	r4, #0
  401178:	d006      	beq.n	401188 <__libc_init_array+0x3c>
  40117a:	3401      	adds	r4, #1
  40117c:	f855 3b04 	ldr.w	r3, [r5], #4
  401180:	4798      	blx	r3
  401182:	42a6      	cmp	r6, r4
  401184:	d1f9      	bne.n	40117a <__libc_init_array+0x2e>
  401186:	bd70      	pop	{r4, r5, r6, pc}
  401188:	bd70      	pop	{r4, r5, r6, pc}
  40118a:	bf00      	nop
  40118c:	004043ac 	.word	0x004043ac
  401190:	004043ac 	.word	0x004043ac
  401194:	004043b4 	.word	0x004043b4
  401198:	004043ac 	.word	0x004043ac

0040119c <iprintf>:
  40119c:	b40f      	push	{r0, r1, r2, r3}
  40119e:	b500      	push	{lr}
  4011a0:	4907      	ldr	r1, [pc, #28]	; (4011c0 <iprintf+0x24>)
  4011a2:	b083      	sub	sp, #12
  4011a4:	ab04      	add	r3, sp, #16
  4011a6:	6808      	ldr	r0, [r1, #0]
  4011a8:	f853 2b04 	ldr.w	r2, [r3], #4
  4011ac:	6881      	ldr	r1, [r0, #8]
  4011ae:	9301      	str	r3, [sp, #4]
  4011b0:	f000 fa34 	bl	40161c <_vfiprintf_r>
  4011b4:	b003      	add	sp, #12
  4011b6:	f85d eb04 	ldr.w	lr, [sp], #4
  4011ba:	b004      	add	sp, #16
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop
  4011c0:	20400024 	.word	0x20400024

004011c4 <memset>:
  4011c4:	b470      	push	{r4, r5, r6}
  4011c6:	0786      	lsls	r6, r0, #30
  4011c8:	d046      	beq.n	401258 <memset+0x94>
  4011ca:	1e54      	subs	r4, r2, #1
  4011cc:	2a00      	cmp	r2, #0
  4011ce:	d041      	beq.n	401254 <memset+0x90>
  4011d0:	b2ca      	uxtb	r2, r1
  4011d2:	4603      	mov	r3, r0
  4011d4:	e002      	b.n	4011dc <memset+0x18>
  4011d6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4011da:	d33b      	bcc.n	401254 <memset+0x90>
  4011dc:	f803 2b01 	strb.w	r2, [r3], #1
  4011e0:	079d      	lsls	r5, r3, #30
  4011e2:	d1f8      	bne.n	4011d6 <memset+0x12>
  4011e4:	2c03      	cmp	r4, #3
  4011e6:	d92e      	bls.n	401246 <memset+0x82>
  4011e8:	b2cd      	uxtb	r5, r1
  4011ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4011ee:	2c0f      	cmp	r4, #15
  4011f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4011f4:	d919      	bls.n	40122a <memset+0x66>
  4011f6:	f103 0210 	add.w	r2, r3, #16
  4011fa:	4626      	mov	r6, r4
  4011fc:	3e10      	subs	r6, #16
  4011fe:	2e0f      	cmp	r6, #15
  401200:	f842 5c10 	str.w	r5, [r2, #-16]
  401204:	f842 5c0c 	str.w	r5, [r2, #-12]
  401208:	f842 5c08 	str.w	r5, [r2, #-8]
  40120c:	f842 5c04 	str.w	r5, [r2, #-4]
  401210:	f102 0210 	add.w	r2, r2, #16
  401214:	d8f2      	bhi.n	4011fc <memset+0x38>
  401216:	f1a4 0210 	sub.w	r2, r4, #16
  40121a:	f022 020f 	bic.w	r2, r2, #15
  40121e:	f004 040f 	and.w	r4, r4, #15
  401222:	3210      	adds	r2, #16
  401224:	2c03      	cmp	r4, #3
  401226:	4413      	add	r3, r2
  401228:	d90d      	bls.n	401246 <memset+0x82>
  40122a:	461e      	mov	r6, r3
  40122c:	4622      	mov	r2, r4
  40122e:	3a04      	subs	r2, #4
  401230:	2a03      	cmp	r2, #3
  401232:	f846 5b04 	str.w	r5, [r6], #4
  401236:	d8fa      	bhi.n	40122e <memset+0x6a>
  401238:	1f22      	subs	r2, r4, #4
  40123a:	f022 0203 	bic.w	r2, r2, #3
  40123e:	3204      	adds	r2, #4
  401240:	4413      	add	r3, r2
  401242:	f004 0403 	and.w	r4, r4, #3
  401246:	b12c      	cbz	r4, 401254 <memset+0x90>
  401248:	b2c9      	uxtb	r1, r1
  40124a:	441c      	add	r4, r3
  40124c:	f803 1b01 	strb.w	r1, [r3], #1
  401250:	429c      	cmp	r4, r3
  401252:	d1fb      	bne.n	40124c <memset+0x88>
  401254:	bc70      	pop	{r4, r5, r6}
  401256:	4770      	bx	lr
  401258:	4614      	mov	r4, r2
  40125a:	4603      	mov	r3, r0
  40125c:	e7c2      	b.n	4011e4 <memset+0x20>
  40125e:	bf00      	nop

00401260 <_puts_r>:
  401260:	b5f0      	push	{r4, r5, r6, r7, lr}
  401262:	4605      	mov	r5, r0
  401264:	b089      	sub	sp, #36	; 0x24
  401266:	4608      	mov	r0, r1
  401268:	460c      	mov	r4, r1
  40126a:	f000 f929 	bl	4014c0 <strlen>
  40126e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401270:	4f21      	ldr	r7, [pc, #132]	; (4012f8 <_puts_r+0x98>)
  401272:	9404      	str	r4, [sp, #16]
  401274:	2601      	movs	r6, #1
  401276:	1c44      	adds	r4, r0, #1
  401278:	a904      	add	r1, sp, #16
  40127a:	2202      	movs	r2, #2
  40127c:	9403      	str	r4, [sp, #12]
  40127e:	9005      	str	r0, [sp, #20]
  401280:	68ac      	ldr	r4, [r5, #8]
  401282:	9706      	str	r7, [sp, #24]
  401284:	9607      	str	r6, [sp, #28]
  401286:	9101      	str	r1, [sp, #4]
  401288:	9202      	str	r2, [sp, #8]
  40128a:	b353      	cbz	r3, 4012e2 <_puts_r+0x82>
  40128c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40128e:	f013 0f01 	tst.w	r3, #1
  401292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401296:	b29a      	uxth	r2, r3
  401298:	d101      	bne.n	40129e <_puts_r+0x3e>
  40129a:	0590      	lsls	r0, r2, #22
  40129c:	d525      	bpl.n	4012ea <_puts_r+0x8a>
  40129e:	0491      	lsls	r1, r2, #18
  4012a0:	d406      	bmi.n	4012b0 <_puts_r+0x50>
  4012a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4012a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4012a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4012ac:	81a3      	strh	r3, [r4, #12]
  4012ae:	6662      	str	r2, [r4, #100]	; 0x64
  4012b0:	4628      	mov	r0, r5
  4012b2:	aa01      	add	r2, sp, #4
  4012b4:	4621      	mov	r1, r4
  4012b6:	f001 fbb3 	bl	402a20 <__sfvwrite_r>
  4012ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4012bc:	2800      	cmp	r0, #0
  4012be:	bf0c      	ite	eq
  4012c0:	250a      	moveq	r5, #10
  4012c2:	f04f 35ff 	movne.w	r5, #4294967295
  4012c6:	07da      	lsls	r2, r3, #31
  4012c8:	d402      	bmi.n	4012d0 <_puts_r+0x70>
  4012ca:	89a3      	ldrh	r3, [r4, #12]
  4012cc:	059b      	lsls	r3, r3, #22
  4012ce:	d502      	bpl.n	4012d6 <_puts_r+0x76>
  4012d0:	4628      	mov	r0, r5
  4012d2:	b009      	add	sp, #36	; 0x24
  4012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4012d8:	f001 fd58 	bl	402d8c <__retarget_lock_release_recursive>
  4012dc:	4628      	mov	r0, r5
  4012de:	b009      	add	sp, #36	; 0x24
  4012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012e2:	4628      	mov	r0, r5
  4012e4:	f001 f990 	bl	402608 <__sinit>
  4012e8:	e7d0      	b.n	40128c <_puts_r+0x2c>
  4012ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4012ec:	f001 fd4c 	bl	402d88 <__retarget_lock_acquire_recursive>
  4012f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4012f4:	b29a      	uxth	r2, r3
  4012f6:	e7d2      	b.n	40129e <_puts_r+0x3e>
  4012f8:	0040419c 	.word	0x0040419c

004012fc <puts>:
  4012fc:	4b02      	ldr	r3, [pc, #8]	; (401308 <puts+0xc>)
  4012fe:	4601      	mov	r1, r0
  401300:	6818      	ldr	r0, [r3, #0]
  401302:	f7ff bfad 	b.w	401260 <_puts_r>
  401306:	bf00      	nop
  401308:	20400024 	.word	0x20400024

0040130c <setbuf>:
  40130c:	2900      	cmp	r1, #0
  40130e:	bf0c      	ite	eq
  401310:	2202      	moveq	r2, #2
  401312:	2200      	movne	r2, #0
  401314:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401318:	f000 b800 	b.w	40131c <setvbuf>

0040131c <setvbuf>:
  40131c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401320:	4c61      	ldr	r4, [pc, #388]	; (4014a8 <setvbuf+0x18c>)
  401322:	6825      	ldr	r5, [r4, #0]
  401324:	b083      	sub	sp, #12
  401326:	4604      	mov	r4, r0
  401328:	460f      	mov	r7, r1
  40132a:	4690      	mov	r8, r2
  40132c:	461e      	mov	r6, r3
  40132e:	b115      	cbz	r5, 401336 <setvbuf+0x1a>
  401330:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401332:	2b00      	cmp	r3, #0
  401334:	d064      	beq.n	401400 <setvbuf+0xe4>
  401336:	f1b8 0f02 	cmp.w	r8, #2
  40133a:	d006      	beq.n	40134a <setvbuf+0x2e>
  40133c:	f1b8 0f01 	cmp.w	r8, #1
  401340:	f200 809f 	bhi.w	401482 <setvbuf+0x166>
  401344:	2e00      	cmp	r6, #0
  401346:	f2c0 809c 	blt.w	401482 <setvbuf+0x166>
  40134a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40134c:	07d8      	lsls	r0, r3, #31
  40134e:	d534      	bpl.n	4013ba <setvbuf+0x9e>
  401350:	4621      	mov	r1, r4
  401352:	4628      	mov	r0, r5
  401354:	f001 f900 	bl	402558 <_fflush_r>
  401358:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40135a:	b141      	cbz	r1, 40136e <setvbuf+0x52>
  40135c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401360:	4299      	cmp	r1, r3
  401362:	d002      	beq.n	40136a <setvbuf+0x4e>
  401364:	4628      	mov	r0, r5
  401366:	f001 fa75 	bl	402854 <_free_r>
  40136a:	2300      	movs	r3, #0
  40136c:	6323      	str	r3, [r4, #48]	; 0x30
  40136e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401372:	2200      	movs	r2, #0
  401374:	61a2      	str	r2, [r4, #24]
  401376:	6062      	str	r2, [r4, #4]
  401378:	061a      	lsls	r2, r3, #24
  40137a:	d43a      	bmi.n	4013f2 <setvbuf+0xd6>
  40137c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401380:	f023 0303 	bic.w	r3, r3, #3
  401384:	f1b8 0f02 	cmp.w	r8, #2
  401388:	81a3      	strh	r3, [r4, #12]
  40138a:	d01d      	beq.n	4013c8 <setvbuf+0xac>
  40138c:	ab01      	add	r3, sp, #4
  40138e:	466a      	mov	r2, sp
  401390:	4621      	mov	r1, r4
  401392:	4628      	mov	r0, r5
  401394:	f001 fcfc 	bl	402d90 <__swhatbuf_r>
  401398:	89a3      	ldrh	r3, [r4, #12]
  40139a:	4318      	orrs	r0, r3
  40139c:	81a0      	strh	r0, [r4, #12]
  40139e:	2e00      	cmp	r6, #0
  4013a0:	d132      	bne.n	401408 <setvbuf+0xec>
  4013a2:	9e00      	ldr	r6, [sp, #0]
  4013a4:	4630      	mov	r0, r6
  4013a6:	f001 fd6b 	bl	402e80 <malloc>
  4013aa:	4607      	mov	r7, r0
  4013ac:	2800      	cmp	r0, #0
  4013ae:	d06b      	beq.n	401488 <setvbuf+0x16c>
  4013b0:	89a3      	ldrh	r3, [r4, #12]
  4013b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4013b6:	81a3      	strh	r3, [r4, #12]
  4013b8:	e028      	b.n	40140c <setvbuf+0xf0>
  4013ba:	89a3      	ldrh	r3, [r4, #12]
  4013bc:	0599      	lsls	r1, r3, #22
  4013be:	d4c7      	bmi.n	401350 <setvbuf+0x34>
  4013c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4013c2:	f001 fce1 	bl	402d88 <__retarget_lock_acquire_recursive>
  4013c6:	e7c3      	b.n	401350 <setvbuf+0x34>
  4013c8:	2500      	movs	r5, #0
  4013ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4013cc:	2600      	movs	r6, #0
  4013ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4013d2:	f043 0302 	orr.w	r3, r3, #2
  4013d6:	2001      	movs	r0, #1
  4013d8:	60a6      	str	r6, [r4, #8]
  4013da:	07ce      	lsls	r6, r1, #31
  4013dc:	81a3      	strh	r3, [r4, #12]
  4013de:	6022      	str	r2, [r4, #0]
  4013e0:	6122      	str	r2, [r4, #16]
  4013e2:	6160      	str	r0, [r4, #20]
  4013e4:	d401      	bmi.n	4013ea <setvbuf+0xce>
  4013e6:	0598      	lsls	r0, r3, #22
  4013e8:	d53e      	bpl.n	401468 <setvbuf+0x14c>
  4013ea:	4628      	mov	r0, r5
  4013ec:	b003      	add	sp, #12
  4013ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4013f2:	6921      	ldr	r1, [r4, #16]
  4013f4:	4628      	mov	r0, r5
  4013f6:	f001 fa2d 	bl	402854 <_free_r>
  4013fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4013fe:	e7bd      	b.n	40137c <setvbuf+0x60>
  401400:	4628      	mov	r0, r5
  401402:	f001 f901 	bl	402608 <__sinit>
  401406:	e796      	b.n	401336 <setvbuf+0x1a>
  401408:	2f00      	cmp	r7, #0
  40140a:	d0cb      	beq.n	4013a4 <setvbuf+0x88>
  40140c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40140e:	2b00      	cmp	r3, #0
  401410:	d033      	beq.n	40147a <setvbuf+0x15e>
  401412:	9b00      	ldr	r3, [sp, #0]
  401414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401418:	6027      	str	r7, [r4, #0]
  40141a:	429e      	cmp	r6, r3
  40141c:	bf1c      	itt	ne
  40141e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401422:	81a2      	strhne	r2, [r4, #12]
  401424:	f1b8 0f01 	cmp.w	r8, #1
  401428:	bf04      	itt	eq
  40142a:	f042 0201 	orreq.w	r2, r2, #1
  40142e:	81a2      	strheq	r2, [r4, #12]
  401430:	b292      	uxth	r2, r2
  401432:	f012 0308 	ands.w	r3, r2, #8
  401436:	6127      	str	r7, [r4, #16]
  401438:	6166      	str	r6, [r4, #20]
  40143a:	d00e      	beq.n	40145a <setvbuf+0x13e>
  40143c:	07d1      	lsls	r1, r2, #31
  40143e:	d51a      	bpl.n	401476 <setvbuf+0x15a>
  401440:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401442:	4276      	negs	r6, r6
  401444:	2300      	movs	r3, #0
  401446:	f015 0501 	ands.w	r5, r5, #1
  40144a:	61a6      	str	r6, [r4, #24]
  40144c:	60a3      	str	r3, [r4, #8]
  40144e:	d009      	beq.n	401464 <setvbuf+0x148>
  401450:	2500      	movs	r5, #0
  401452:	4628      	mov	r0, r5
  401454:	b003      	add	sp, #12
  401456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40145a:	60a3      	str	r3, [r4, #8]
  40145c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40145e:	f015 0501 	ands.w	r5, r5, #1
  401462:	d1f5      	bne.n	401450 <setvbuf+0x134>
  401464:	0593      	lsls	r3, r2, #22
  401466:	d4c0      	bmi.n	4013ea <setvbuf+0xce>
  401468:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40146a:	f001 fc8f 	bl	402d8c <__retarget_lock_release_recursive>
  40146e:	4628      	mov	r0, r5
  401470:	b003      	add	sp, #12
  401472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401476:	60a6      	str	r6, [r4, #8]
  401478:	e7f0      	b.n	40145c <setvbuf+0x140>
  40147a:	4628      	mov	r0, r5
  40147c:	f001 f8c4 	bl	402608 <__sinit>
  401480:	e7c7      	b.n	401412 <setvbuf+0xf6>
  401482:	f04f 35ff 	mov.w	r5, #4294967295
  401486:	e7b0      	b.n	4013ea <setvbuf+0xce>
  401488:	f8dd 9000 	ldr.w	r9, [sp]
  40148c:	45b1      	cmp	r9, r6
  40148e:	d004      	beq.n	40149a <setvbuf+0x17e>
  401490:	4648      	mov	r0, r9
  401492:	f001 fcf5 	bl	402e80 <malloc>
  401496:	4607      	mov	r7, r0
  401498:	b920      	cbnz	r0, 4014a4 <setvbuf+0x188>
  40149a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40149e:	f04f 35ff 	mov.w	r5, #4294967295
  4014a2:	e792      	b.n	4013ca <setvbuf+0xae>
  4014a4:	464e      	mov	r6, r9
  4014a6:	e783      	b.n	4013b0 <setvbuf+0x94>
  4014a8:	20400024 	.word	0x20400024
	...

004014c0 <strlen>:
  4014c0:	f890 f000 	pld	[r0]
  4014c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4014c8:	f020 0107 	bic.w	r1, r0, #7
  4014cc:	f06f 0c00 	mvn.w	ip, #0
  4014d0:	f010 0407 	ands.w	r4, r0, #7
  4014d4:	f891 f020 	pld	[r1, #32]
  4014d8:	f040 8049 	bne.w	40156e <strlen+0xae>
  4014dc:	f04f 0400 	mov.w	r4, #0
  4014e0:	f06f 0007 	mvn.w	r0, #7
  4014e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4014e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4014ec:	f100 0008 	add.w	r0, r0, #8
  4014f0:	fa82 f24c 	uadd8	r2, r2, ip
  4014f4:	faa4 f28c 	sel	r2, r4, ip
  4014f8:	fa83 f34c 	uadd8	r3, r3, ip
  4014fc:	faa2 f38c 	sel	r3, r2, ip
  401500:	bb4b      	cbnz	r3, 401556 <strlen+0x96>
  401502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401506:	fa82 f24c 	uadd8	r2, r2, ip
  40150a:	f100 0008 	add.w	r0, r0, #8
  40150e:	faa4 f28c 	sel	r2, r4, ip
  401512:	fa83 f34c 	uadd8	r3, r3, ip
  401516:	faa2 f38c 	sel	r3, r2, ip
  40151a:	b9e3      	cbnz	r3, 401556 <strlen+0x96>
  40151c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401520:	fa82 f24c 	uadd8	r2, r2, ip
  401524:	f100 0008 	add.w	r0, r0, #8
  401528:	faa4 f28c 	sel	r2, r4, ip
  40152c:	fa83 f34c 	uadd8	r3, r3, ip
  401530:	faa2 f38c 	sel	r3, r2, ip
  401534:	b97b      	cbnz	r3, 401556 <strlen+0x96>
  401536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40153a:	f101 0120 	add.w	r1, r1, #32
  40153e:	fa82 f24c 	uadd8	r2, r2, ip
  401542:	f100 0008 	add.w	r0, r0, #8
  401546:	faa4 f28c 	sel	r2, r4, ip
  40154a:	fa83 f34c 	uadd8	r3, r3, ip
  40154e:	faa2 f38c 	sel	r3, r2, ip
  401552:	2b00      	cmp	r3, #0
  401554:	d0c6      	beq.n	4014e4 <strlen+0x24>
  401556:	2a00      	cmp	r2, #0
  401558:	bf04      	itt	eq
  40155a:	3004      	addeq	r0, #4
  40155c:	461a      	moveq	r2, r3
  40155e:	ba12      	rev	r2, r2
  401560:	fab2 f282 	clz	r2, r2
  401564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40156c:	4770      	bx	lr
  40156e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401572:	f004 0503 	and.w	r5, r4, #3
  401576:	f1c4 0000 	rsb	r0, r4, #0
  40157a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40157e:	f014 0f04 	tst.w	r4, #4
  401582:	f891 f040 	pld	[r1, #64]	; 0x40
  401586:	fa0c f505 	lsl.w	r5, ip, r5
  40158a:	ea62 0205 	orn	r2, r2, r5
  40158e:	bf1c      	itt	ne
  401590:	ea63 0305 	ornne	r3, r3, r5
  401594:	4662      	movne	r2, ip
  401596:	f04f 0400 	mov.w	r4, #0
  40159a:	e7a9      	b.n	4014f0 <strlen+0x30>

0040159c <__sprint_r.part.0>:
  40159c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4015a2:	049c      	lsls	r4, r3, #18
  4015a4:	4693      	mov	fp, r2
  4015a6:	d52f      	bpl.n	401608 <__sprint_r.part.0+0x6c>
  4015a8:	6893      	ldr	r3, [r2, #8]
  4015aa:	6812      	ldr	r2, [r2, #0]
  4015ac:	b353      	cbz	r3, 401604 <__sprint_r.part.0+0x68>
  4015ae:	460e      	mov	r6, r1
  4015b0:	4607      	mov	r7, r0
  4015b2:	f102 0908 	add.w	r9, r2, #8
  4015b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4015ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4015be:	d017      	beq.n	4015f0 <__sprint_r.part.0+0x54>
  4015c0:	3d04      	subs	r5, #4
  4015c2:	2400      	movs	r4, #0
  4015c4:	e001      	b.n	4015ca <__sprint_r.part.0+0x2e>
  4015c6:	45a0      	cmp	r8, r4
  4015c8:	d010      	beq.n	4015ec <__sprint_r.part.0+0x50>
  4015ca:	4632      	mov	r2, r6
  4015cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4015d0:	4638      	mov	r0, r7
  4015d2:	f001 f8bb 	bl	40274c <_fputwc_r>
  4015d6:	1c43      	adds	r3, r0, #1
  4015d8:	f104 0401 	add.w	r4, r4, #1
  4015dc:	d1f3      	bne.n	4015c6 <__sprint_r.part.0+0x2a>
  4015de:	2300      	movs	r3, #0
  4015e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4015e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4015e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4015f0:	f02a 0a03 	bic.w	sl, sl, #3
  4015f4:	eba3 030a 	sub.w	r3, r3, sl
  4015f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4015fc:	f109 0908 	add.w	r9, r9, #8
  401600:	2b00      	cmp	r3, #0
  401602:	d1d8      	bne.n	4015b6 <__sprint_r.part.0+0x1a>
  401604:	2000      	movs	r0, #0
  401606:	e7ea      	b.n	4015de <__sprint_r.part.0+0x42>
  401608:	f001 fa0a 	bl	402a20 <__sfvwrite_r>
  40160c:	2300      	movs	r3, #0
  40160e:	f8cb 3008 	str.w	r3, [fp, #8]
  401612:	f8cb 3004 	str.w	r3, [fp, #4]
  401616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40161a:	bf00      	nop

0040161c <_vfiprintf_r>:
  40161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401620:	b0ad      	sub	sp, #180	; 0xb4
  401622:	461d      	mov	r5, r3
  401624:	468b      	mov	fp, r1
  401626:	4690      	mov	r8, r2
  401628:	9307      	str	r3, [sp, #28]
  40162a:	9006      	str	r0, [sp, #24]
  40162c:	b118      	cbz	r0, 401636 <_vfiprintf_r+0x1a>
  40162e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401630:	2b00      	cmp	r3, #0
  401632:	f000 80f3 	beq.w	40181c <_vfiprintf_r+0x200>
  401636:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40163a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40163e:	07df      	lsls	r7, r3, #31
  401640:	b281      	uxth	r1, r0
  401642:	d402      	bmi.n	40164a <_vfiprintf_r+0x2e>
  401644:	058e      	lsls	r6, r1, #22
  401646:	f140 80fc 	bpl.w	401842 <_vfiprintf_r+0x226>
  40164a:	048c      	lsls	r4, r1, #18
  40164c:	d40a      	bmi.n	401664 <_vfiprintf_r+0x48>
  40164e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401652:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40165a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40165e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401662:	b289      	uxth	r1, r1
  401664:	0708      	lsls	r0, r1, #28
  401666:	f140 80b3 	bpl.w	4017d0 <_vfiprintf_r+0x1b4>
  40166a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40166e:	2b00      	cmp	r3, #0
  401670:	f000 80ae 	beq.w	4017d0 <_vfiprintf_r+0x1b4>
  401674:	f001 031a 	and.w	r3, r1, #26
  401678:	2b0a      	cmp	r3, #10
  40167a:	f000 80b5 	beq.w	4017e8 <_vfiprintf_r+0x1cc>
  40167e:	2300      	movs	r3, #0
  401680:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401684:	930b      	str	r3, [sp, #44]	; 0x2c
  401686:	9311      	str	r3, [sp, #68]	; 0x44
  401688:	9310      	str	r3, [sp, #64]	; 0x40
  40168a:	9303      	str	r3, [sp, #12]
  40168c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401690:	46ca      	mov	sl, r9
  401692:	f8cd b010 	str.w	fp, [sp, #16]
  401696:	f898 3000 	ldrb.w	r3, [r8]
  40169a:	4644      	mov	r4, r8
  40169c:	b1fb      	cbz	r3, 4016de <_vfiprintf_r+0xc2>
  40169e:	2b25      	cmp	r3, #37	; 0x25
  4016a0:	d102      	bne.n	4016a8 <_vfiprintf_r+0x8c>
  4016a2:	e01c      	b.n	4016de <_vfiprintf_r+0xc2>
  4016a4:	2b25      	cmp	r3, #37	; 0x25
  4016a6:	d003      	beq.n	4016b0 <_vfiprintf_r+0x94>
  4016a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4016ac:	2b00      	cmp	r3, #0
  4016ae:	d1f9      	bne.n	4016a4 <_vfiprintf_r+0x88>
  4016b0:	eba4 0508 	sub.w	r5, r4, r8
  4016b4:	b19d      	cbz	r5, 4016de <_vfiprintf_r+0xc2>
  4016b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4016b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4016ba:	f8ca 8000 	str.w	r8, [sl]
  4016be:	3301      	adds	r3, #1
  4016c0:	442a      	add	r2, r5
  4016c2:	2b07      	cmp	r3, #7
  4016c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4016c8:	9211      	str	r2, [sp, #68]	; 0x44
  4016ca:	9310      	str	r3, [sp, #64]	; 0x40
  4016cc:	dd7a      	ble.n	4017c4 <_vfiprintf_r+0x1a8>
  4016ce:	2a00      	cmp	r2, #0
  4016d0:	f040 84b0 	bne.w	402034 <_vfiprintf_r+0xa18>
  4016d4:	9b03      	ldr	r3, [sp, #12]
  4016d6:	9210      	str	r2, [sp, #64]	; 0x40
  4016d8:	442b      	add	r3, r5
  4016da:	46ca      	mov	sl, r9
  4016dc:	9303      	str	r3, [sp, #12]
  4016de:	7823      	ldrb	r3, [r4, #0]
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	f000 83e0 	beq.w	401ea6 <_vfiprintf_r+0x88a>
  4016e6:	2000      	movs	r0, #0
  4016e8:	f04f 0300 	mov.w	r3, #0
  4016ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4016f0:	f104 0801 	add.w	r8, r4, #1
  4016f4:	7862      	ldrb	r2, [r4, #1]
  4016f6:	4605      	mov	r5, r0
  4016f8:	4606      	mov	r6, r0
  4016fa:	4603      	mov	r3, r0
  4016fc:	f04f 34ff 	mov.w	r4, #4294967295
  401700:	f108 0801 	add.w	r8, r8, #1
  401704:	f1a2 0120 	sub.w	r1, r2, #32
  401708:	2958      	cmp	r1, #88	; 0x58
  40170a:	f200 82de 	bhi.w	401cca <_vfiprintf_r+0x6ae>
  40170e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401712:	0221      	.short	0x0221
  401714:	02dc02dc 	.word	0x02dc02dc
  401718:	02dc0229 	.word	0x02dc0229
  40171c:	02dc02dc 	.word	0x02dc02dc
  401720:	02dc02dc 	.word	0x02dc02dc
  401724:	028902dc 	.word	0x028902dc
  401728:	02dc0295 	.word	0x02dc0295
  40172c:	02bd00a2 	.word	0x02bd00a2
  401730:	019f02dc 	.word	0x019f02dc
  401734:	01a401a4 	.word	0x01a401a4
  401738:	01a401a4 	.word	0x01a401a4
  40173c:	01a401a4 	.word	0x01a401a4
  401740:	01a401a4 	.word	0x01a401a4
  401744:	02dc01a4 	.word	0x02dc01a4
  401748:	02dc02dc 	.word	0x02dc02dc
  40174c:	02dc02dc 	.word	0x02dc02dc
  401750:	02dc02dc 	.word	0x02dc02dc
  401754:	02dc02dc 	.word	0x02dc02dc
  401758:	01b202dc 	.word	0x01b202dc
  40175c:	02dc02dc 	.word	0x02dc02dc
  401760:	02dc02dc 	.word	0x02dc02dc
  401764:	02dc02dc 	.word	0x02dc02dc
  401768:	02dc02dc 	.word	0x02dc02dc
  40176c:	02dc02dc 	.word	0x02dc02dc
  401770:	02dc0197 	.word	0x02dc0197
  401774:	02dc02dc 	.word	0x02dc02dc
  401778:	02dc02dc 	.word	0x02dc02dc
  40177c:	02dc019b 	.word	0x02dc019b
  401780:	025302dc 	.word	0x025302dc
  401784:	02dc02dc 	.word	0x02dc02dc
  401788:	02dc02dc 	.word	0x02dc02dc
  40178c:	02dc02dc 	.word	0x02dc02dc
  401790:	02dc02dc 	.word	0x02dc02dc
  401794:	02dc02dc 	.word	0x02dc02dc
  401798:	021b025a 	.word	0x021b025a
  40179c:	02dc02dc 	.word	0x02dc02dc
  4017a0:	026e02dc 	.word	0x026e02dc
  4017a4:	02dc021b 	.word	0x02dc021b
  4017a8:	027302dc 	.word	0x027302dc
  4017ac:	01f502dc 	.word	0x01f502dc
  4017b0:	02090182 	.word	0x02090182
  4017b4:	02dc02d7 	.word	0x02dc02d7
  4017b8:	02dc029a 	.word	0x02dc029a
  4017bc:	02dc00a7 	.word	0x02dc00a7
  4017c0:	022e02dc 	.word	0x022e02dc
  4017c4:	f10a 0a08 	add.w	sl, sl, #8
  4017c8:	9b03      	ldr	r3, [sp, #12]
  4017ca:	442b      	add	r3, r5
  4017cc:	9303      	str	r3, [sp, #12]
  4017ce:	e786      	b.n	4016de <_vfiprintf_r+0xc2>
  4017d0:	4659      	mov	r1, fp
  4017d2:	9806      	ldr	r0, [sp, #24]
  4017d4:	f000 fdac 	bl	402330 <__swsetup_r>
  4017d8:	bb18      	cbnz	r0, 401822 <_vfiprintf_r+0x206>
  4017da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4017de:	f001 031a 	and.w	r3, r1, #26
  4017e2:	2b0a      	cmp	r3, #10
  4017e4:	f47f af4b 	bne.w	40167e <_vfiprintf_r+0x62>
  4017e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	f6ff af46 	blt.w	40167e <_vfiprintf_r+0x62>
  4017f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4017f6:	07db      	lsls	r3, r3, #31
  4017f8:	d405      	bmi.n	401806 <_vfiprintf_r+0x1ea>
  4017fa:	058f      	lsls	r7, r1, #22
  4017fc:	d403      	bmi.n	401806 <_vfiprintf_r+0x1ea>
  4017fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401802:	f001 fac3 	bl	402d8c <__retarget_lock_release_recursive>
  401806:	462b      	mov	r3, r5
  401808:	4642      	mov	r2, r8
  40180a:	4659      	mov	r1, fp
  40180c:	9806      	ldr	r0, [sp, #24]
  40180e:	f000 fd4d 	bl	4022ac <__sbprintf>
  401812:	9003      	str	r0, [sp, #12]
  401814:	9803      	ldr	r0, [sp, #12]
  401816:	b02d      	add	sp, #180	; 0xb4
  401818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40181c:	f000 fef4 	bl	402608 <__sinit>
  401820:	e709      	b.n	401636 <_vfiprintf_r+0x1a>
  401822:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401826:	07d9      	lsls	r1, r3, #31
  401828:	d404      	bmi.n	401834 <_vfiprintf_r+0x218>
  40182a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40182e:	059a      	lsls	r2, r3, #22
  401830:	f140 84aa 	bpl.w	402188 <_vfiprintf_r+0xb6c>
  401834:	f04f 33ff 	mov.w	r3, #4294967295
  401838:	9303      	str	r3, [sp, #12]
  40183a:	9803      	ldr	r0, [sp, #12]
  40183c:	b02d      	add	sp, #180	; 0xb4
  40183e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401842:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401846:	f001 fa9f 	bl	402d88 <__retarget_lock_acquire_recursive>
  40184a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40184e:	b281      	uxth	r1, r0
  401850:	e6fb      	b.n	40164a <_vfiprintf_r+0x2e>
  401852:	4276      	negs	r6, r6
  401854:	9207      	str	r2, [sp, #28]
  401856:	f043 0304 	orr.w	r3, r3, #4
  40185a:	f898 2000 	ldrb.w	r2, [r8]
  40185e:	e74f      	b.n	401700 <_vfiprintf_r+0xe4>
  401860:	9608      	str	r6, [sp, #32]
  401862:	069e      	lsls	r6, r3, #26
  401864:	f100 8450 	bmi.w	402108 <_vfiprintf_r+0xaec>
  401868:	9907      	ldr	r1, [sp, #28]
  40186a:	06dd      	lsls	r5, r3, #27
  40186c:	460a      	mov	r2, r1
  40186e:	f100 83ef 	bmi.w	402050 <_vfiprintf_r+0xa34>
  401872:	0658      	lsls	r0, r3, #25
  401874:	f140 83ec 	bpl.w	402050 <_vfiprintf_r+0xa34>
  401878:	880e      	ldrh	r6, [r1, #0]
  40187a:	3104      	adds	r1, #4
  40187c:	2700      	movs	r7, #0
  40187e:	2201      	movs	r2, #1
  401880:	9107      	str	r1, [sp, #28]
  401882:	f04f 0100 	mov.w	r1, #0
  401886:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40188a:	2500      	movs	r5, #0
  40188c:	1c61      	adds	r1, r4, #1
  40188e:	f000 8116 	beq.w	401abe <_vfiprintf_r+0x4a2>
  401892:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401896:	9102      	str	r1, [sp, #8]
  401898:	ea56 0107 	orrs.w	r1, r6, r7
  40189c:	f040 8114 	bne.w	401ac8 <_vfiprintf_r+0x4ac>
  4018a0:	2c00      	cmp	r4, #0
  4018a2:	f040 835c 	bne.w	401f5e <_vfiprintf_r+0x942>
  4018a6:	2a00      	cmp	r2, #0
  4018a8:	f040 83b7 	bne.w	40201a <_vfiprintf_r+0x9fe>
  4018ac:	f013 0301 	ands.w	r3, r3, #1
  4018b0:	9305      	str	r3, [sp, #20]
  4018b2:	f000 8457 	beq.w	402164 <_vfiprintf_r+0xb48>
  4018b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4018ba:	2330      	movs	r3, #48	; 0x30
  4018bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4018c0:	9b05      	ldr	r3, [sp, #20]
  4018c2:	42a3      	cmp	r3, r4
  4018c4:	bfb8      	it	lt
  4018c6:	4623      	movlt	r3, r4
  4018c8:	9301      	str	r3, [sp, #4]
  4018ca:	b10d      	cbz	r5, 4018d0 <_vfiprintf_r+0x2b4>
  4018cc:	3301      	adds	r3, #1
  4018ce:	9301      	str	r3, [sp, #4]
  4018d0:	9b02      	ldr	r3, [sp, #8]
  4018d2:	f013 0302 	ands.w	r3, r3, #2
  4018d6:	9309      	str	r3, [sp, #36]	; 0x24
  4018d8:	d002      	beq.n	4018e0 <_vfiprintf_r+0x2c4>
  4018da:	9b01      	ldr	r3, [sp, #4]
  4018dc:	3302      	adds	r3, #2
  4018de:	9301      	str	r3, [sp, #4]
  4018e0:	9b02      	ldr	r3, [sp, #8]
  4018e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4018e6:	930a      	str	r3, [sp, #40]	; 0x28
  4018e8:	f040 8217 	bne.w	401d1a <_vfiprintf_r+0x6fe>
  4018ec:	9b08      	ldr	r3, [sp, #32]
  4018ee:	9a01      	ldr	r2, [sp, #4]
  4018f0:	1a9d      	subs	r5, r3, r2
  4018f2:	2d00      	cmp	r5, #0
  4018f4:	f340 8211 	ble.w	401d1a <_vfiprintf_r+0x6fe>
  4018f8:	2d10      	cmp	r5, #16
  4018fa:	f340 8490 	ble.w	40221e <_vfiprintf_r+0xc02>
  4018fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401900:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401902:	4ec4      	ldr	r6, [pc, #784]	; (401c14 <_vfiprintf_r+0x5f8>)
  401904:	46d6      	mov	lr, sl
  401906:	2710      	movs	r7, #16
  401908:	46a2      	mov	sl, r4
  40190a:	4619      	mov	r1, r3
  40190c:	9c06      	ldr	r4, [sp, #24]
  40190e:	e007      	b.n	401920 <_vfiprintf_r+0x304>
  401910:	f101 0c02 	add.w	ip, r1, #2
  401914:	f10e 0e08 	add.w	lr, lr, #8
  401918:	4601      	mov	r1, r0
  40191a:	3d10      	subs	r5, #16
  40191c:	2d10      	cmp	r5, #16
  40191e:	dd11      	ble.n	401944 <_vfiprintf_r+0x328>
  401920:	1c48      	adds	r0, r1, #1
  401922:	3210      	adds	r2, #16
  401924:	2807      	cmp	r0, #7
  401926:	9211      	str	r2, [sp, #68]	; 0x44
  401928:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40192c:	9010      	str	r0, [sp, #64]	; 0x40
  40192e:	ddef      	ble.n	401910 <_vfiprintf_r+0x2f4>
  401930:	2a00      	cmp	r2, #0
  401932:	f040 81e4 	bne.w	401cfe <_vfiprintf_r+0x6e2>
  401936:	3d10      	subs	r5, #16
  401938:	2d10      	cmp	r5, #16
  40193a:	4611      	mov	r1, r2
  40193c:	f04f 0c01 	mov.w	ip, #1
  401940:	46ce      	mov	lr, r9
  401942:	dced      	bgt.n	401920 <_vfiprintf_r+0x304>
  401944:	4654      	mov	r4, sl
  401946:	4661      	mov	r1, ip
  401948:	46f2      	mov	sl, lr
  40194a:	442a      	add	r2, r5
  40194c:	2907      	cmp	r1, #7
  40194e:	9211      	str	r2, [sp, #68]	; 0x44
  401950:	f8ca 6000 	str.w	r6, [sl]
  401954:	f8ca 5004 	str.w	r5, [sl, #4]
  401958:	9110      	str	r1, [sp, #64]	; 0x40
  40195a:	f300 82ec 	bgt.w	401f36 <_vfiprintf_r+0x91a>
  40195e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401962:	f10a 0a08 	add.w	sl, sl, #8
  401966:	1c48      	adds	r0, r1, #1
  401968:	2d00      	cmp	r5, #0
  40196a:	f040 81de 	bne.w	401d2a <_vfiprintf_r+0x70e>
  40196e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401970:	2b00      	cmp	r3, #0
  401972:	f000 81f8 	beq.w	401d66 <_vfiprintf_r+0x74a>
  401976:	3202      	adds	r2, #2
  401978:	a90e      	add	r1, sp, #56	; 0x38
  40197a:	2302      	movs	r3, #2
  40197c:	2807      	cmp	r0, #7
  40197e:	9211      	str	r2, [sp, #68]	; 0x44
  401980:	9010      	str	r0, [sp, #64]	; 0x40
  401982:	e88a 000a 	stmia.w	sl, {r1, r3}
  401986:	f340 81ea 	ble.w	401d5e <_vfiprintf_r+0x742>
  40198a:	2a00      	cmp	r2, #0
  40198c:	f040 838c 	bne.w	4020a8 <_vfiprintf_r+0xa8c>
  401990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401992:	2b80      	cmp	r3, #128	; 0x80
  401994:	f04f 0001 	mov.w	r0, #1
  401998:	4611      	mov	r1, r2
  40199a:	46ca      	mov	sl, r9
  40199c:	f040 81e7 	bne.w	401d6e <_vfiprintf_r+0x752>
  4019a0:	9b08      	ldr	r3, [sp, #32]
  4019a2:	9d01      	ldr	r5, [sp, #4]
  4019a4:	1b5e      	subs	r6, r3, r5
  4019a6:	2e00      	cmp	r6, #0
  4019a8:	f340 81e1 	ble.w	401d6e <_vfiprintf_r+0x752>
  4019ac:	2e10      	cmp	r6, #16
  4019ae:	4d9a      	ldr	r5, [pc, #616]	; (401c18 <_vfiprintf_r+0x5fc>)
  4019b0:	f340 8450 	ble.w	402254 <_vfiprintf_r+0xc38>
  4019b4:	46d4      	mov	ip, sl
  4019b6:	2710      	movs	r7, #16
  4019b8:	46a2      	mov	sl, r4
  4019ba:	9c06      	ldr	r4, [sp, #24]
  4019bc:	e007      	b.n	4019ce <_vfiprintf_r+0x3b2>
  4019be:	f101 0e02 	add.w	lr, r1, #2
  4019c2:	f10c 0c08 	add.w	ip, ip, #8
  4019c6:	4601      	mov	r1, r0
  4019c8:	3e10      	subs	r6, #16
  4019ca:	2e10      	cmp	r6, #16
  4019cc:	dd11      	ble.n	4019f2 <_vfiprintf_r+0x3d6>
  4019ce:	1c48      	adds	r0, r1, #1
  4019d0:	3210      	adds	r2, #16
  4019d2:	2807      	cmp	r0, #7
  4019d4:	9211      	str	r2, [sp, #68]	; 0x44
  4019d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4019da:	9010      	str	r0, [sp, #64]	; 0x40
  4019dc:	ddef      	ble.n	4019be <_vfiprintf_r+0x3a2>
  4019de:	2a00      	cmp	r2, #0
  4019e0:	f040 829d 	bne.w	401f1e <_vfiprintf_r+0x902>
  4019e4:	3e10      	subs	r6, #16
  4019e6:	2e10      	cmp	r6, #16
  4019e8:	f04f 0e01 	mov.w	lr, #1
  4019ec:	4611      	mov	r1, r2
  4019ee:	46cc      	mov	ip, r9
  4019f0:	dced      	bgt.n	4019ce <_vfiprintf_r+0x3b2>
  4019f2:	4654      	mov	r4, sl
  4019f4:	46e2      	mov	sl, ip
  4019f6:	4432      	add	r2, r6
  4019f8:	f1be 0f07 	cmp.w	lr, #7
  4019fc:	9211      	str	r2, [sp, #68]	; 0x44
  4019fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  401a02:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401a06:	f300 8369 	bgt.w	4020dc <_vfiprintf_r+0xac0>
  401a0a:	f10a 0a08 	add.w	sl, sl, #8
  401a0e:	f10e 0001 	add.w	r0, lr, #1
  401a12:	4671      	mov	r1, lr
  401a14:	e1ab      	b.n	401d6e <_vfiprintf_r+0x752>
  401a16:	9608      	str	r6, [sp, #32]
  401a18:	f013 0220 	ands.w	r2, r3, #32
  401a1c:	f040 838c 	bne.w	402138 <_vfiprintf_r+0xb1c>
  401a20:	f013 0110 	ands.w	r1, r3, #16
  401a24:	f040 831a 	bne.w	40205c <_vfiprintf_r+0xa40>
  401a28:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401a2c:	f000 8316 	beq.w	40205c <_vfiprintf_r+0xa40>
  401a30:	9807      	ldr	r0, [sp, #28]
  401a32:	460a      	mov	r2, r1
  401a34:	4601      	mov	r1, r0
  401a36:	3104      	adds	r1, #4
  401a38:	8806      	ldrh	r6, [r0, #0]
  401a3a:	9107      	str	r1, [sp, #28]
  401a3c:	2700      	movs	r7, #0
  401a3e:	e720      	b.n	401882 <_vfiprintf_r+0x266>
  401a40:	9608      	str	r6, [sp, #32]
  401a42:	f043 0310 	orr.w	r3, r3, #16
  401a46:	e7e7      	b.n	401a18 <_vfiprintf_r+0x3fc>
  401a48:	9608      	str	r6, [sp, #32]
  401a4a:	f043 0310 	orr.w	r3, r3, #16
  401a4e:	e708      	b.n	401862 <_vfiprintf_r+0x246>
  401a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a54:	f898 2000 	ldrb.w	r2, [r8]
  401a58:	e652      	b.n	401700 <_vfiprintf_r+0xe4>
  401a5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a5e:	2600      	movs	r6, #0
  401a60:	f818 2b01 	ldrb.w	r2, [r8], #1
  401a64:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401a68:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401a6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a70:	2909      	cmp	r1, #9
  401a72:	d9f5      	bls.n	401a60 <_vfiprintf_r+0x444>
  401a74:	e646      	b.n	401704 <_vfiprintf_r+0xe8>
  401a76:	9608      	str	r6, [sp, #32]
  401a78:	2800      	cmp	r0, #0
  401a7a:	f040 8408 	bne.w	40228e <_vfiprintf_r+0xc72>
  401a7e:	f043 0310 	orr.w	r3, r3, #16
  401a82:	069e      	lsls	r6, r3, #26
  401a84:	f100 834c 	bmi.w	402120 <_vfiprintf_r+0xb04>
  401a88:	06dd      	lsls	r5, r3, #27
  401a8a:	f100 82f3 	bmi.w	402074 <_vfiprintf_r+0xa58>
  401a8e:	0658      	lsls	r0, r3, #25
  401a90:	f140 82f0 	bpl.w	402074 <_vfiprintf_r+0xa58>
  401a94:	9d07      	ldr	r5, [sp, #28]
  401a96:	f9b5 6000 	ldrsh.w	r6, [r5]
  401a9a:	462a      	mov	r2, r5
  401a9c:	17f7      	asrs	r7, r6, #31
  401a9e:	3204      	adds	r2, #4
  401aa0:	4630      	mov	r0, r6
  401aa2:	4639      	mov	r1, r7
  401aa4:	9207      	str	r2, [sp, #28]
  401aa6:	2800      	cmp	r0, #0
  401aa8:	f171 0200 	sbcs.w	r2, r1, #0
  401aac:	f2c0 835d 	blt.w	40216a <_vfiprintf_r+0xb4e>
  401ab0:	1c61      	adds	r1, r4, #1
  401ab2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ab6:	f04f 0201 	mov.w	r2, #1
  401aba:	f47f aeea 	bne.w	401892 <_vfiprintf_r+0x276>
  401abe:	ea56 0107 	orrs.w	r1, r6, r7
  401ac2:	f000 824d 	beq.w	401f60 <_vfiprintf_r+0x944>
  401ac6:	9302      	str	r3, [sp, #8]
  401ac8:	2a01      	cmp	r2, #1
  401aca:	f000 828c 	beq.w	401fe6 <_vfiprintf_r+0x9ca>
  401ace:	2a02      	cmp	r2, #2
  401ad0:	f040 825c 	bne.w	401f8c <_vfiprintf_r+0x970>
  401ad4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401ad6:	46cb      	mov	fp, r9
  401ad8:	0933      	lsrs	r3, r6, #4
  401ada:	f006 010f 	and.w	r1, r6, #15
  401ade:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401ae2:	093a      	lsrs	r2, r7, #4
  401ae4:	461e      	mov	r6, r3
  401ae6:	4617      	mov	r7, r2
  401ae8:	5c43      	ldrb	r3, [r0, r1]
  401aea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401aee:	ea56 0307 	orrs.w	r3, r6, r7
  401af2:	d1f1      	bne.n	401ad8 <_vfiprintf_r+0x4bc>
  401af4:	eba9 030b 	sub.w	r3, r9, fp
  401af8:	9305      	str	r3, [sp, #20]
  401afa:	e6e1      	b.n	4018c0 <_vfiprintf_r+0x2a4>
  401afc:	2800      	cmp	r0, #0
  401afe:	f040 83c0 	bne.w	402282 <_vfiprintf_r+0xc66>
  401b02:	0699      	lsls	r1, r3, #26
  401b04:	f100 8367 	bmi.w	4021d6 <_vfiprintf_r+0xbba>
  401b08:	06da      	lsls	r2, r3, #27
  401b0a:	f100 80f1 	bmi.w	401cf0 <_vfiprintf_r+0x6d4>
  401b0e:	065b      	lsls	r3, r3, #25
  401b10:	f140 80ee 	bpl.w	401cf0 <_vfiprintf_r+0x6d4>
  401b14:	9a07      	ldr	r2, [sp, #28]
  401b16:	6813      	ldr	r3, [r2, #0]
  401b18:	3204      	adds	r2, #4
  401b1a:	9207      	str	r2, [sp, #28]
  401b1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401b20:	801a      	strh	r2, [r3, #0]
  401b22:	e5b8      	b.n	401696 <_vfiprintf_r+0x7a>
  401b24:	9807      	ldr	r0, [sp, #28]
  401b26:	4a3d      	ldr	r2, [pc, #244]	; (401c1c <_vfiprintf_r+0x600>)
  401b28:	9608      	str	r6, [sp, #32]
  401b2a:	920b      	str	r2, [sp, #44]	; 0x2c
  401b2c:	6806      	ldr	r6, [r0, #0]
  401b2e:	2278      	movs	r2, #120	; 0x78
  401b30:	2130      	movs	r1, #48	; 0x30
  401b32:	3004      	adds	r0, #4
  401b34:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401b38:	f043 0302 	orr.w	r3, r3, #2
  401b3c:	9007      	str	r0, [sp, #28]
  401b3e:	2700      	movs	r7, #0
  401b40:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401b44:	2202      	movs	r2, #2
  401b46:	e69c      	b.n	401882 <_vfiprintf_r+0x266>
  401b48:	9608      	str	r6, [sp, #32]
  401b4a:	2800      	cmp	r0, #0
  401b4c:	d099      	beq.n	401a82 <_vfiprintf_r+0x466>
  401b4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401b52:	e796      	b.n	401a82 <_vfiprintf_r+0x466>
  401b54:	f898 2000 	ldrb.w	r2, [r8]
  401b58:	2d00      	cmp	r5, #0
  401b5a:	f47f add1 	bne.w	401700 <_vfiprintf_r+0xe4>
  401b5e:	2001      	movs	r0, #1
  401b60:	2520      	movs	r5, #32
  401b62:	e5cd      	b.n	401700 <_vfiprintf_r+0xe4>
  401b64:	f043 0301 	orr.w	r3, r3, #1
  401b68:	f898 2000 	ldrb.w	r2, [r8]
  401b6c:	e5c8      	b.n	401700 <_vfiprintf_r+0xe4>
  401b6e:	9608      	str	r6, [sp, #32]
  401b70:	2800      	cmp	r0, #0
  401b72:	f040 8393 	bne.w	40229c <_vfiprintf_r+0xc80>
  401b76:	4929      	ldr	r1, [pc, #164]	; (401c1c <_vfiprintf_r+0x600>)
  401b78:	910b      	str	r1, [sp, #44]	; 0x2c
  401b7a:	069f      	lsls	r7, r3, #26
  401b7c:	f100 82e8 	bmi.w	402150 <_vfiprintf_r+0xb34>
  401b80:	9807      	ldr	r0, [sp, #28]
  401b82:	06de      	lsls	r6, r3, #27
  401b84:	4601      	mov	r1, r0
  401b86:	f100 8270 	bmi.w	40206a <_vfiprintf_r+0xa4e>
  401b8a:	065d      	lsls	r5, r3, #25
  401b8c:	f140 826d 	bpl.w	40206a <_vfiprintf_r+0xa4e>
  401b90:	3104      	adds	r1, #4
  401b92:	8806      	ldrh	r6, [r0, #0]
  401b94:	9107      	str	r1, [sp, #28]
  401b96:	2700      	movs	r7, #0
  401b98:	07d8      	lsls	r0, r3, #31
  401b9a:	f140 8222 	bpl.w	401fe2 <_vfiprintf_r+0x9c6>
  401b9e:	ea56 0107 	orrs.w	r1, r6, r7
  401ba2:	f000 821e 	beq.w	401fe2 <_vfiprintf_r+0x9c6>
  401ba6:	2130      	movs	r1, #48	; 0x30
  401ba8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401bac:	f043 0302 	orr.w	r3, r3, #2
  401bb0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401bb4:	2202      	movs	r2, #2
  401bb6:	e664      	b.n	401882 <_vfiprintf_r+0x266>
  401bb8:	9608      	str	r6, [sp, #32]
  401bba:	2800      	cmp	r0, #0
  401bbc:	f040 836b 	bne.w	402296 <_vfiprintf_r+0xc7a>
  401bc0:	4917      	ldr	r1, [pc, #92]	; (401c20 <_vfiprintf_r+0x604>)
  401bc2:	910b      	str	r1, [sp, #44]	; 0x2c
  401bc4:	e7d9      	b.n	401b7a <_vfiprintf_r+0x55e>
  401bc6:	9907      	ldr	r1, [sp, #28]
  401bc8:	9608      	str	r6, [sp, #32]
  401bca:	680a      	ldr	r2, [r1, #0]
  401bcc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401bd0:	f04f 0000 	mov.w	r0, #0
  401bd4:	460a      	mov	r2, r1
  401bd6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401bda:	3204      	adds	r2, #4
  401bdc:	2001      	movs	r0, #1
  401bde:	9001      	str	r0, [sp, #4]
  401be0:	9207      	str	r2, [sp, #28]
  401be2:	9005      	str	r0, [sp, #20]
  401be4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401be8:	9302      	str	r3, [sp, #8]
  401bea:	2400      	movs	r4, #0
  401bec:	e670      	b.n	4018d0 <_vfiprintf_r+0x2b4>
  401bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401bf2:	f898 2000 	ldrb.w	r2, [r8]
  401bf6:	e583      	b.n	401700 <_vfiprintf_r+0xe4>
  401bf8:	f898 2000 	ldrb.w	r2, [r8]
  401bfc:	2a6c      	cmp	r2, #108	; 0x6c
  401bfe:	bf03      	ittte	eq
  401c00:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401c04:	f043 0320 	orreq.w	r3, r3, #32
  401c08:	f108 0801 	addeq.w	r8, r8, #1
  401c0c:	f043 0310 	orrne.w	r3, r3, #16
  401c10:	e576      	b.n	401700 <_vfiprintf_r+0xe4>
  401c12:	bf00      	nop
  401c14:	0040426c 	.word	0x0040426c
  401c18:	0040427c 	.word	0x0040427c
  401c1c:	00404250 	.word	0x00404250
  401c20:	0040423c 	.word	0x0040423c
  401c24:	9907      	ldr	r1, [sp, #28]
  401c26:	680e      	ldr	r6, [r1, #0]
  401c28:	460a      	mov	r2, r1
  401c2a:	2e00      	cmp	r6, #0
  401c2c:	f102 0204 	add.w	r2, r2, #4
  401c30:	f6ff ae0f 	blt.w	401852 <_vfiprintf_r+0x236>
  401c34:	9207      	str	r2, [sp, #28]
  401c36:	f898 2000 	ldrb.w	r2, [r8]
  401c3a:	e561      	b.n	401700 <_vfiprintf_r+0xe4>
  401c3c:	f898 2000 	ldrb.w	r2, [r8]
  401c40:	2001      	movs	r0, #1
  401c42:	252b      	movs	r5, #43	; 0x2b
  401c44:	e55c      	b.n	401700 <_vfiprintf_r+0xe4>
  401c46:	9907      	ldr	r1, [sp, #28]
  401c48:	9608      	str	r6, [sp, #32]
  401c4a:	f8d1 b000 	ldr.w	fp, [r1]
  401c4e:	f04f 0200 	mov.w	r2, #0
  401c52:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401c56:	1d0e      	adds	r6, r1, #4
  401c58:	f1bb 0f00 	cmp.w	fp, #0
  401c5c:	f000 82e5 	beq.w	40222a <_vfiprintf_r+0xc0e>
  401c60:	1c67      	adds	r7, r4, #1
  401c62:	f000 82c4 	beq.w	4021ee <_vfiprintf_r+0xbd2>
  401c66:	4622      	mov	r2, r4
  401c68:	2100      	movs	r1, #0
  401c6a:	4658      	mov	r0, fp
  401c6c:	9301      	str	r3, [sp, #4]
  401c6e:	f001 fbd7 	bl	403420 <memchr>
  401c72:	9b01      	ldr	r3, [sp, #4]
  401c74:	2800      	cmp	r0, #0
  401c76:	f000 82e5 	beq.w	402244 <_vfiprintf_r+0xc28>
  401c7a:	eba0 020b 	sub.w	r2, r0, fp
  401c7e:	9205      	str	r2, [sp, #20]
  401c80:	9607      	str	r6, [sp, #28]
  401c82:	9302      	str	r3, [sp, #8]
  401c84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401c88:	2400      	movs	r4, #0
  401c8a:	e619      	b.n	4018c0 <_vfiprintf_r+0x2a4>
  401c8c:	f898 2000 	ldrb.w	r2, [r8]
  401c90:	2a2a      	cmp	r2, #42	; 0x2a
  401c92:	f108 0701 	add.w	r7, r8, #1
  401c96:	f000 82e9 	beq.w	40226c <_vfiprintf_r+0xc50>
  401c9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401c9e:	2909      	cmp	r1, #9
  401ca0:	46b8      	mov	r8, r7
  401ca2:	f04f 0400 	mov.w	r4, #0
  401ca6:	f63f ad2d 	bhi.w	401704 <_vfiprintf_r+0xe8>
  401caa:	f818 2b01 	ldrb.w	r2, [r8], #1
  401cae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401cb2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401cb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401cba:	2909      	cmp	r1, #9
  401cbc:	d9f5      	bls.n	401caa <_vfiprintf_r+0x68e>
  401cbe:	e521      	b.n	401704 <_vfiprintf_r+0xe8>
  401cc0:	f043 0320 	orr.w	r3, r3, #32
  401cc4:	f898 2000 	ldrb.w	r2, [r8]
  401cc8:	e51a      	b.n	401700 <_vfiprintf_r+0xe4>
  401cca:	9608      	str	r6, [sp, #32]
  401ccc:	2800      	cmp	r0, #0
  401cce:	f040 82db 	bne.w	402288 <_vfiprintf_r+0xc6c>
  401cd2:	2a00      	cmp	r2, #0
  401cd4:	f000 80e7 	beq.w	401ea6 <_vfiprintf_r+0x88a>
  401cd8:	2101      	movs	r1, #1
  401cda:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401cde:	f04f 0200 	mov.w	r2, #0
  401ce2:	9101      	str	r1, [sp, #4]
  401ce4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401ce8:	9105      	str	r1, [sp, #20]
  401cea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401cee:	e77b      	b.n	401be8 <_vfiprintf_r+0x5cc>
  401cf0:	9a07      	ldr	r2, [sp, #28]
  401cf2:	6813      	ldr	r3, [r2, #0]
  401cf4:	3204      	adds	r2, #4
  401cf6:	9207      	str	r2, [sp, #28]
  401cf8:	9a03      	ldr	r2, [sp, #12]
  401cfa:	601a      	str	r2, [r3, #0]
  401cfc:	e4cb      	b.n	401696 <_vfiprintf_r+0x7a>
  401cfe:	aa0f      	add	r2, sp, #60	; 0x3c
  401d00:	9904      	ldr	r1, [sp, #16]
  401d02:	4620      	mov	r0, r4
  401d04:	f7ff fc4a 	bl	40159c <__sprint_r.part.0>
  401d08:	2800      	cmp	r0, #0
  401d0a:	f040 8139 	bne.w	401f80 <_vfiprintf_r+0x964>
  401d0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d12:	f101 0c01 	add.w	ip, r1, #1
  401d16:	46ce      	mov	lr, r9
  401d18:	e5ff      	b.n	40191a <_vfiprintf_r+0x2fe>
  401d1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d1e:	1c48      	adds	r0, r1, #1
  401d20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d24:	2d00      	cmp	r5, #0
  401d26:	f43f ae22 	beq.w	40196e <_vfiprintf_r+0x352>
  401d2a:	3201      	adds	r2, #1
  401d2c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401d30:	2101      	movs	r1, #1
  401d32:	2807      	cmp	r0, #7
  401d34:	9211      	str	r2, [sp, #68]	; 0x44
  401d36:	9010      	str	r0, [sp, #64]	; 0x40
  401d38:	f8ca 5000 	str.w	r5, [sl]
  401d3c:	f8ca 1004 	str.w	r1, [sl, #4]
  401d40:	f340 8108 	ble.w	401f54 <_vfiprintf_r+0x938>
  401d44:	2a00      	cmp	r2, #0
  401d46:	f040 81bc 	bne.w	4020c2 <_vfiprintf_r+0xaa6>
  401d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d4c:	2b00      	cmp	r3, #0
  401d4e:	f43f ae1f 	beq.w	401990 <_vfiprintf_r+0x374>
  401d52:	ab0e      	add	r3, sp, #56	; 0x38
  401d54:	2202      	movs	r2, #2
  401d56:	4608      	mov	r0, r1
  401d58:	931c      	str	r3, [sp, #112]	; 0x70
  401d5a:	921d      	str	r2, [sp, #116]	; 0x74
  401d5c:	46ca      	mov	sl, r9
  401d5e:	4601      	mov	r1, r0
  401d60:	f10a 0a08 	add.w	sl, sl, #8
  401d64:	3001      	adds	r0, #1
  401d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d68:	2b80      	cmp	r3, #128	; 0x80
  401d6a:	f43f ae19 	beq.w	4019a0 <_vfiprintf_r+0x384>
  401d6e:	9b05      	ldr	r3, [sp, #20]
  401d70:	1ae4      	subs	r4, r4, r3
  401d72:	2c00      	cmp	r4, #0
  401d74:	dd2e      	ble.n	401dd4 <_vfiprintf_r+0x7b8>
  401d76:	2c10      	cmp	r4, #16
  401d78:	4db3      	ldr	r5, [pc, #716]	; (402048 <_vfiprintf_r+0xa2c>)
  401d7a:	dd1e      	ble.n	401dba <_vfiprintf_r+0x79e>
  401d7c:	46d6      	mov	lr, sl
  401d7e:	2610      	movs	r6, #16
  401d80:	9f06      	ldr	r7, [sp, #24]
  401d82:	f8dd a010 	ldr.w	sl, [sp, #16]
  401d86:	e006      	b.n	401d96 <_vfiprintf_r+0x77a>
  401d88:	1c88      	adds	r0, r1, #2
  401d8a:	f10e 0e08 	add.w	lr, lr, #8
  401d8e:	4619      	mov	r1, r3
  401d90:	3c10      	subs	r4, #16
  401d92:	2c10      	cmp	r4, #16
  401d94:	dd10      	ble.n	401db8 <_vfiprintf_r+0x79c>
  401d96:	1c4b      	adds	r3, r1, #1
  401d98:	3210      	adds	r2, #16
  401d9a:	2b07      	cmp	r3, #7
  401d9c:	9211      	str	r2, [sp, #68]	; 0x44
  401d9e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401da2:	9310      	str	r3, [sp, #64]	; 0x40
  401da4:	ddf0      	ble.n	401d88 <_vfiprintf_r+0x76c>
  401da6:	2a00      	cmp	r2, #0
  401da8:	d165      	bne.n	401e76 <_vfiprintf_r+0x85a>
  401daa:	3c10      	subs	r4, #16
  401dac:	2c10      	cmp	r4, #16
  401dae:	f04f 0001 	mov.w	r0, #1
  401db2:	4611      	mov	r1, r2
  401db4:	46ce      	mov	lr, r9
  401db6:	dcee      	bgt.n	401d96 <_vfiprintf_r+0x77a>
  401db8:	46f2      	mov	sl, lr
  401dba:	4422      	add	r2, r4
  401dbc:	2807      	cmp	r0, #7
  401dbe:	9211      	str	r2, [sp, #68]	; 0x44
  401dc0:	f8ca 5000 	str.w	r5, [sl]
  401dc4:	f8ca 4004 	str.w	r4, [sl, #4]
  401dc8:	9010      	str	r0, [sp, #64]	; 0x40
  401dca:	f300 8085 	bgt.w	401ed8 <_vfiprintf_r+0x8bc>
  401dce:	f10a 0a08 	add.w	sl, sl, #8
  401dd2:	3001      	adds	r0, #1
  401dd4:	9905      	ldr	r1, [sp, #20]
  401dd6:	f8ca b000 	str.w	fp, [sl]
  401dda:	440a      	add	r2, r1
  401ddc:	2807      	cmp	r0, #7
  401dde:	9211      	str	r2, [sp, #68]	; 0x44
  401de0:	f8ca 1004 	str.w	r1, [sl, #4]
  401de4:	9010      	str	r0, [sp, #64]	; 0x40
  401de6:	f340 8082 	ble.w	401eee <_vfiprintf_r+0x8d2>
  401dea:	2a00      	cmp	r2, #0
  401dec:	f040 8118 	bne.w	402020 <_vfiprintf_r+0xa04>
  401df0:	9b02      	ldr	r3, [sp, #8]
  401df2:	9210      	str	r2, [sp, #64]	; 0x40
  401df4:	0758      	lsls	r0, r3, #29
  401df6:	d535      	bpl.n	401e64 <_vfiprintf_r+0x848>
  401df8:	9b08      	ldr	r3, [sp, #32]
  401dfa:	9901      	ldr	r1, [sp, #4]
  401dfc:	1a5c      	subs	r4, r3, r1
  401dfe:	2c00      	cmp	r4, #0
  401e00:	f340 80e7 	ble.w	401fd2 <_vfiprintf_r+0x9b6>
  401e04:	46ca      	mov	sl, r9
  401e06:	2c10      	cmp	r4, #16
  401e08:	f340 8218 	ble.w	40223c <_vfiprintf_r+0xc20>
  401e0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e0e:	4e8f      	ldr	r6, [pc, #572]	; (40204c <_vfiprintf_r+0xa30>)
  401e10:	9f06      	ldr	r7, [sp, #24]
  401e12:	f8dd b010 	ldr.w	fp, [sp, #16]
  401e16:	2510      	movs	r5, #16
  401e18:	e006      	b.n	401e28 <_vfiprintf_r+0x80c>
  401e1a:	1c88      	adds	r0, r1, #2
  401e1c:	f10a 0a08 	add.w	sl, sl, #8
  401e20:	4619      	mov	r1, r3
  401e22:	3c10      	subs	r4, #16
  401e24:	2c10      	cmp	r4, #16
  401e26:	dd11      	ble.n	401e4c <_vfiprintf_r+0x830>
  401e28:	1c4b      	adds	r3, r1, #1
  401e2a:	3210      	adds	r2, #16
  401e2c:	2b07      	cmp	r3, #7
  401e2e:	9211      	str	r2, [sp, #68]	; 0x44
  401e30:	f8ca 6000 	str.w	r6, [sl]
  401e34:	f8ca 5004 	str.w	r5, [sl, #4]
  401e38:	9310      	str	r3, [sp, #64]	; 0x40
  401e3a:	ddee      	ble.n	401e1a <_vfiprintf_r+0x7fe>
  401e3c:	bb42      	cbnz	r2, 401e90 <_vfiprintf_r+0x874>
  401e3e:	3c10      	subs	r4, #16
  401e40:	2c10      	cmp	r4, #16
  401e42:	f04f 0001 	mov.w	r0, #1
  401e46:	4611      	mov	r1, r2
  401e48:	46ca      	mov	sl, r9
  401e4a:	dced      	bgt.n	401e28 <_vfiprintf_r+0x80c>
  401e4c:	4422      	add	r2, r4
  401e4e:	2807      	cmp	r0, #7
  401e50:	9211      	str	r2, [sp, #68]	; 0x44
  401e52:	f8ca 6000 	str.w	r6, [sl]
  401e56:	f8ca 4004 	str.w	r4, [sl, #4]
  401e5a:	9010      	str	r0, [sp, #64]	; 0x40
  401e5c:	dd51      	ble.n	401f02 <_vfiprintf_r+0x8e6>
  401e5e:	2a00      	cmp	r2, #0
  401e60:	f040 819b 	bne.w	40219a <_vfiprintf_r+0xb7e>
  401e64:	9b03      	ldr	r3, [sp, #12]
  401e66:	9a08      	ldr	r2, [sp, #32]
  401e68:	9901      	ldr	r1, [sp, #4]
  401e6a:	428a      	cmp	r2, r1
  401e6c:	bfac      	ite	ge
  401e6e:	189b      	addge	r3, r3, r2
  401e70:	185b      	addlt	r3, r3, r1
  401e72:	9303      	str	r3, [sp, #12]
  401e74:	e04e      	b.n	401f14 <_vfiprintf_r+0x8f8>
  401e76:	aa0f      	add	r2, sp, #60	; 0x3c
  401e78:	4651      	mov	r1, sl
  401e7a:	4638      	mov	r0, r7
  401e7c:	f7ff fb8e 	bl	40159c <__sprint_r.part.0>
  401e80:	2800      	cmp	r0, #0
  401e82:	f040 813f 	bne.w	402104 <_vfiprintf_r+0xae8>
  401e86:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e8a:	1c48      	adds	r0, r1, #1
  401e8c:	46ce      	mov	lr, r9
  401e8e:	e77f      	b.n	401d90 <_vfiprintf_r+0x774>
  401e90:	aa0f      	add	r2, sp, #60	; 0x3c
  401e92:	4659      	mov	r1, fp
  401e94:	4638      	mov	r0, r7
  401e96:	f7ff fb81 	bl	40159c <__sprint_r.part.0>
  401e9a:	b960      	cbnz	r0, 401eb6 <_vfiprintf_r+0x89a>
  401e9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ea0:	1c48      	adds	r0, r1, #1
  401ea2:	46ca      	mov	sl, r9
  401ea4:	e7bd      	b.n	401e22 <_vfiprintf_r+0x806>
  401ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ea8:	f8dd b010 	ldr.w	fp, [sp, #16]
  401eac:	2b00      	cmp	r3, #0
  401eae:	f040 81d4 	bne.w	40225a <_vfiprintf_r+0xc3e>
  401eb2:	2300      	movs	r3, #0
  401eb4:	9310      	str	r3, [sp, #64]	; 0x40
  401eb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401eba:	f013 0f01 	tst.w	r3, #1
  401ebe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401ec2:	d102      	bne.n	401eca <_vfiprintf_r+0x8ae>
  401ec4:	059a      	lsls	r2, r3, #22
  401ec6:	f140 80de 	bpl.w	402086 <_vfiprintf_r+0xa6a>
  401eca:	065b      	lsls	r3, r3, #25
  401ecc:	f53f acb2 	bmi.w	401834 <_vfiprintf_r+0x218>
  401ed0:	9803      	ldr	r0, [sp, #12]
  401ed2:	b02d      	add	sp, #180	; 0xb4
  401ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ed8:	2a00      	cmp	r2, #0
  401eda:	f040 8106 	bne.w	4020ea <_vfiprintf_r+0xace>
  401ede:	9a05      	ldr	r2, [sp, #20]
  401ee0:	921d      	str	r2, [sp, #116]	; 0x74
  401ee2:	2301      	movs	r3, #1
  401ee4:	9211      	str	r2, [sp, #68]	; 0x44
  401ee6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401eea:	9310      	str	r3, [sp, #64]	; 0x40
  401eec:	46ca      	mov	sl, r9
  401eee:	f10a 0a08 	add.w	sl, sl, #8
  401ef2:	9b02      	ldr	r3, [sp, #8]
  401ef4:	0759      	lsls	r1, r3, #29
  401ef6:	d504      	bpl.n	401f02 <_vfiprintf_r+0x8e6>
  401ef8:	9b08      	ldr	r3, [sp, #32]
  401efa:	9901      	ldr	r1, [sp, #4]
  401efc:	1a5c      	subs	r4, r3, r1
  401efe:	2c00      	cmp	r4, #0
  401f00:	dc81      	bgt.n	401e06 <_vfiprintf_r+0x7ea>
  401f02:	9b03      	ldr	r3, [sp, #12]
  401f04:	9908      	ldr	r1, [sp, #32]
  401f06:	9801      	ldr	r0, [sp, #4]
  401f08:	4281      	cmp	r1, r0
  401f0a:	bfac      	ite	ge
  401f0c:	185b      	addge	r3, r3, r1
  401f0e:	181b      	addlt	r3, r3, r0
  401f10:	9303      	str	r3, [sp, #12]
  401f12:	bb72      	cbnz	r2, 401f72 <_vfiprintf_r+0x956>
  401f14:	2300      	movs	r3, #0
  401f16:	9310      	str	r3, [sp, #64]	; 0x40
  401f18:	46ca      	mov	sl, r9
  401f1a:	f7ff bbbc 	b.w	401696 <_vfiprintf_r+0x7a>
  401f1e:	aa0f      	add	r2, sp, #60	; 0x3c
  401f20:	9904      	ldr	r1, [sp, #16]
  401f22:	4620      	mov	r0, r4
  401f24:	f7ff fb3a 	bl	40159c <__sprint_r.part.0>
  401f28:	bb50      	cbnz	r0, 401f80 <_vfiprintf_r+0x964>
  401f2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f2e:	f101 0e01 	add.w	lr, r1, #1
  401f32:	46cc      	mov	ip, r9
  401f34:	e548      	b.n	4019c8 <_vfiprintf_r+0x3ac>
  401f36:	2a00      	cmp	r2, #0
  401f38:	f040 8140 	bne.w	4021bc <_vfiprintf_r+0xba0>
  401f3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401f40:	2900      	cmp	r1, #0
  401f42:	f000 811b 	beq.w	40217c <_vfiprintf_r+0xb60>
  401f46:	2201      	movs	r2, #1
  401f48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401f4c:	4610      	mov	r0, r2
  401f4e:	921d      	str	r2, [sp, #116]	; 0x74
  401f50:	911c      	str	r1, [sp, #112]	; 0x70
  401f52:	46ca      	mov	sl, r9
  401f54:	4601      	mov	r1, r0
  401f56:	f10a 0a08 	add.w	sl, sl, #8
  401f5a:	3001      	adds	r0, #1
  401f5c:	e507      	b.n	40196e <_vfiprintf_r+0x352>
  401f5e:	9b02      	ldr	r3, [sp, #8]
  401f60:	2a01      	cmp	r2, #1
  401f62:	f000 8098 	beq.w	402096 <_vfiprintf_r+0xa7a>
  401f66:	2a02      	cmp	r2, #2
  401f68:	d10d      	bne.n	401f86 <_vfiprintf_r+0x96a>
  401f6a:	9302      	str	r3, [sp, #8]
  401f6c:	2600      	movs	r6, #0
  401f6e:	2700      	movs	r7, #0
  401f70:	e5b0      	b.n	401ad4 <_vfiprintf_r+0x4b8>
  401f72:	aa0f      	add	r2, sp, #60	; 0x3c
  401f74:	9904      	ldr	r1, [sp, #16]
  401f76:	9806      	ldr	r0, [sp, #24]
  401f78:	f7ff fb10 	bl	40159c <__sprint_r.part.0>
  401f7c:	2800      	cmp	r0, #0
  401f7e:	d0c9      	beq.n	401f14 <_vfiprintf_r+0x8f8>
  401f80:	f8dd b010 	ldr.w	fp, [sp, #16]
  401f84:	e797      	b.n	401eb6 <_vfiprintf_r+0x89a>
  401f86:	9302      	str	r3, [sp, #8]
  401f88:	2600      	movs	r6, #0
  401f8a:	2700      	movs	r7, #0
  401f8c:	4649      	mov	r1, r9
  401f8e:	e000      	b.n	401f92 <_vfiprintf_r+0x976>
  401f90:	4659      	mov	r1, fp
  401f92:	08f2      	lsrs	r2, r6, #3
  401f94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401f98:	08f8      	lsrs	r0, r7, #3
  401f9a:	f006 0307 	and.w	r3, r6, #7
  401f9e:	4607      	mov	r7, r0
  401fa0:	4616      	mov	r6, r2
  401fa2:	3330      	adds	r3, #48	; 0x30
  401fa4:	ea56 0207 	orrs.w	r2, r6, r7
  401fa8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401fac:	f101 3bff 	add.w	fp, r1, #4294967295
  401fb0:	d1ee      	bne.n	401f90 <_vfiprintf_r+0x974>
  401fb2:	9a02      	ldr	r2, [sp, #8]
  401fb4:	07d6      	lsls	r6, r2, #31
  401fb6:	f57f ad9d 	bpl.w	401af4 <_vfiprintf_r+0x4d8>
  401fba:	2b30      	cmp	r3, #48	; 0x30
  401fbc:	f43f ad9a 	beq.w	401af4 <_vfiprintf_r+0x4d8>
  401fc0:	3902      	subs	r1, #2
  401fc2:	2330      	movs	r3, #48	; 0x30
  401fc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401fc8:	eba9 0301 	sub.w	r3, r9, r1
  401fcc:	9305      	str	r3, [sp, #20]
  401fce:	468b      	mov	fp, r1
  401fd0:	e476      	b.n	4018c0 <_vfiprintf_r+0x2a4>
  401fd2:	9b03      	ldr	r3, [sp, #12]
  401fd4:	9a08      	ldr	r2, [sp, #32]
  401fd6:	428a      	cmp	r2, r1
  401fd8:	bfac      	ite	ge
  401fda:	189b      	addge	r3, r3, r2
  401fdc:	185b      	addlt	r3, r3, r1
  401fde:	9303      	str	r3, [sp, #12]
  401fe0:	e798      	b.n	401f14 <_vfiprintf_r+0x8f8>
  401fe2:	2202      	movs	r2, #2
  401fe4:	e44d      	b.n	401882 <_vfiprintf_r+0x266>
  401fe6:	2f00      	cmp	r7, #0
  401fe8:	bf08      	it	eq
  401fea:	2e0a      	cmpeq	r6, #10
  401fec:	d352      	bcc.n	402094 <_vfiprintf_r+0xa78>
  401fee:	46cb      	mov	fp, r9
  401ff0:	4630      	mov	r0, r6
  401ff2:	4639      	mov	r1, r7
  401ff4:	220a      	movs	r2, #10
  401ff6:	2300      	movs	r3, #0
  401ff8:	f001 ff36 	bl	403e68 <__aeabi_uldivmod>
  401ffc:	3230      	adds	r2, #48	; 0x30
  401ffe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402002:	4630      	mov	r0, r6
  402004:	4639      	mov	r1, r7
  402006:	2300      	movs	r3, #0
  402008:	220a      	movs	r2, #10
  40200a:	f001 ff2d 	bl	403e68 <__aeabi_uldivmod>
  40200e:	4606      	mov	r6, r0
  402010:	460f      	mov	r7, r1
  402012:	ea56 0307 	orrs.w	r3, r6, r7
  402016:	d1eb      	bne.n	401ff0 <_vfiprintf_r+0x9d4>
  402018:	e56c      	b.n	401af4 <_vfiprintf_r+0x4d8>
  40201a:	9405      	str	r4, [sp, #20]
  40201c:	46cb      	mov	fp, r9
  40201e:	e44f      	b.n	4018c0 <_vfiprintf_r+0x2a4>
  402020:	aa0f      	add	r2, sp, #60	; 0x3c
  402022:	9904      	ldr	r1, [sp, #16]
  402024:	9806      	ldr	r0, [sp, #24]
  402026:	f7ff fab9 	bl	40159c <__sprint_r.part.0>
  40202a:	2800      	cmp	r0, #0
  40202c:	d1a8      	bne.n	401f80 <_vfiprintf_r+0x964>
  40202e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402030:	46ca      	mov	sl, r9
  402032:	e75e      	b.n	401ef2 <_vfiprintf_r+0x8d6>
  402034:	aa0f      	add	r2, sp, #60	; 0x3c
  402036:	9904      	ldr	r1, [sp, #16]
  402038:	9806      	ldr	r0, [sp, #24]
  40203a:	f7ff faaf 	bl	40159c <__sprint_r.part.0>
  40203e:	2800      	cmp	r0, #0
  402040:	d19e      	bne.n	401f80 <_vfiprintf_r+0x964>
  402042:	46ca      	mov	sl, r9
  402044:	f7ff bbc0 	b.w	4017c8 <_vfiprintf_r+0x1ac>
  402048:	0040427c 	.word	0x0040427c
  40204c:	0040426c 	.word	0x0040426c
  402050:	3104      	adds	r1, #4
  402052:	6816      	ldr	r6, [r2, #0]
  402054:	9107      	str	r1, [sp, #28]
  402056:	2201      	movs	r2, #1
  402058:	2700      	movs	r7, #0
  40205a:	e412      	b.n	401882 <_vfiprintf_r+0x266>
  40205c:	9807      	ldr	r0, [sp, #28]
  40205e:	4601      	mov	r1, r0
  402060:	3104      	adds	r1, #4
  402062:	6806      	ldr	r6, [r0, #0]
  402064:	9107      	str	r1, [sp, #28]
  402066:	2700      	movs	r7, #0
  402068:	e40b      	b.n	401882 <_vfiprintf_r+0x266>
  40206a:	680e      	ldr	r6, [r1, #0]
  40206c:	3104      	adds	r1, #4
  40206e:	9107      	str	r1, [sp, #28]
  402070:	2700      	movs	r7, #0
  402072:	e591      	b.n	401b98 <_vfiprintf_r+0x57c>
  402074:	9907      	ldr	r1, [sp, #28]
  402076:	680e      	ldr	r6, [r1, #0]
  402078:	460a      	mov	r2, r1
  40207a:	17f7      	asrs	r7, r6, #31
  40207c:	3204      	adds	r2, #4
  40207e:	9207      	str	r2, [sp, #28]
  402080:	4630      	mov	r0, r6
  402082:	4639      	mov	r1, r7
  402084:	e50f      	b.n	401aa6 <_vfiprintf_r+0x48a>
  402086:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40208a:	f000 fe7f 	bl	402d8c <__retarget_lock_release_recursive>
  40208e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402092:	e71a      	b.n	401eca <_vfiprintf_r+0x8ae>
  402094:	9b02      	ldr	r3, [sp, #8]
  402096:	9302      	str	r3, [sp, #8]
  402098:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40209c:	3630      	adds	r6, #48	; 0x30
  40209e:	2301      	movs	r3, #1
  4020a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4020a4:	9305      	str	r3, [sp, #20]
  4020a6:	e40b      	b.n	4018c0 <_vfiprintf_r+0x2a4>
  4020a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4020aa:	9904      	ldr	r1, [sp, #16]
  4020ac:	9806      	ldr	r0, [sp, #24]
  4020ae:	f7ff fa75 	bl	40159c <__sprint_r.part.0>
  4020b2:	2800      	cmp	r0, #0
  4020b4:	f47f af64 	bne.w	401f80 <_vfiprintf_r+0x964>
  4020b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020bc:	1c48      	adds	r0, r1, #1
  4020be:	46ca      	mov	sl, r9
  4020c0:	e651      	b.n	401d66 <_vfiprintf_r+0x74a>
  4020c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4020c4:	9904      	ldr	r1, [sp, #16]
  4020c6:	9806      	ldr	r0, [sp, #24]
  4020c8:	f7ff fa68 	bl	40159c <__sprint_r.part.0>
  4020cc:	2800      	cmp	r0, #0
  4020ce:	f47f af57 	bne.w	401f80 <_vfiprintf_r+0x964>
  4020d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020d6:	1c48      	adds	r0, r1, #1
  4020d8:	46ca      	mov	sl, r9
  4020da:	e448      	b.n	40196e <_vfiprintf_r+0x352>
  4020dc:	2a00      	cmp	r2, #0
  4020de:	f040 8091 	bne.w	402204 <_vfiprintf_r+0xbe8>
  4020e2:	2001      	movs	r0, #1
  4020e4:	4611      	mov	r1, r2
  4020e6:	46ca      	mov	sl, r9
  4020e8:	e641      	b.n	401d6e <_vfiprintf_r+0x752>
  4020ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4020ec:	9904      	ldr	r1, [sp, #16]
  4020ee:	9806      	ldr	r0, [sp, #24]
  4020f0:	f7ff fa54 	bl	40159c <__sprint_r.part.0>
  4020f4:	2800      	cmp	r0, #0
  4020f6:	f47f af43 	bne.w	401f80 <_vfiprintf_r+0x964>
  4020fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4020fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4020fe:	3001      	adds	r0, #1
  402100:	46ca      	mov	sl, r9
  402102:	e667      	b.n	401dd4 <_vfiprintf_r+0x7b8>
  402104:	46d3      	mov	fp, sl
  402106:	e6d6      	b.n	401eb6 <_vfiprintf_r+0x89a>
  402108:	9e07      	ldr	r6, [sp, #28]
  40210a:	3607      	adds	r6, #7
  40210c:	f026 0207 	bic.w	r2, r6, #7
  402110:	f102 0108 	add.w	r1, r2, #8
  402114:	e9d2 6700 	ldrd	r6, r7, [r2]
  402118:	9107      	str	r1, [sp, #28]
  40211a:	2201      	movs	r2, #1
  40211c:	f7ff bbb1 	b.w	401882 <_vfiprintf_r+0x266>
  402120:	9e07      	ldr	r6, [sp, #28]
  402122:	3607      	adds	r6, #7
  402124:	f026 0607 	bic.w	r6, r6, #7
  402128:	e9d6 0100 	ldrd	r0, r1, [r6]
  40212c:	f106 0208 	add.w	r2, r6, #8
  402130:	9207      	str	r2, [sp, #28]
  402132:	4606      	mov	r6, r0
  402134:	460f      	mov	r7, r1
  402136:	e4b6      	b.n	401aa6 <_vfiprintf_r+0x48a>
  402138:	9e07      	ldr	r6, [sp, #28]
  40213a:	3607      	adds	r6, #7
  40213c:	f026 0207 	bic.w	r2, r6, #7
  402140:	f102 0108 	add.w	r1, r2, #8
  402144:	e9d2 6700 	ldrd	r6, r7, [r2]
  402148:	9107      	str	r1, [sp, #28]
  40214a:	2200      	movs	r2, #0
  40214c:	f7ff bb99 	b.w	401882 <_vfiprintf_r+0x266>
  402150:	9e07      	ldr	r6, [sp, #28]
  402152:	3607      	adds	r6, #7
  402154:	f026 0107 	bic.w	r1, r6, #7
  402158:	f101 0008 	add.w	r0, r1, #8
  40215c:	9007      	str	r0, [sp, #28]
  40215e:	e9d1 6700 	ldrd	r6, r7, [r1]
  402162:	e519      	b.n	401b98 <_vfiprintf_r+0x57c>
  402164:	46cb      	mov	fp, r9
  402166:	f7ff bbab 	b.w	4018c0 <_vfiprintf_r+0x2a4>
  40216a:	252d      	movs	r5, #45	; 0x2d
  40216c:	4276      	negs	r6, r6
  40216e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402172:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402176:	2201      	movs	r2, #1
  402178:	f7ff bb88 	b.w	40188c <_vfiprintf_r+0x270>
  40217c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40217e:	b9b3      	cbnz	r3, 4021ae <_vfiprintf_r+0xb92>
  402180:	4611      	mov	r1, r2
  402182:	2001      	movs	r0, #1
  402184:	46ca      	mov	sl, r9
  402186:	e5f2      	b.n	401d6e <_vfiprintf_r+0x752>
  402188:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40218c:	f000 fdfe 	bl	402d8c <__retarget_lock_release_recursive>
  402190:	f04f 33ff 	mov.w	r3, #4294967295
  402194:	9303      	str	r3, [sp, #12]
  402196:	f7ff bb50 	b.w	40183a <_vfiprintf_r+0x21e>
  40219a:	aa0f      	add	r2, sp, #60	; 0x3c
  40219c:	9904      	ldr	r1, [sp, #16]
  40219e:	9806      	ldr	r0, [sp, #24]
  4021a0:	f7ff f9fc 	bl	40159c <__sprint_r.part.0>
  4021a4:	2800      	cmp	r0, #0
  4021a6:	f47f aeeb 	bne.w	401f80 <_vfiprintf_r+0x964>
  4021aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021ac:	e6a9      	b.n	401f02 <_vfiprintf_r+0x8e6>
  4021ae:	ab0e      	add	r3, sp, #56	; 0x38
  4021b0:	2202      	movs	r2, #2
  4021b2:	931c      	str	r3, [sp, #112]	; 0x70
  4021b4:	921d      	str	r2, [sp, #116]	; 0x74
  4021b6:	2001      	movs	r0, #1
  4021b8:	46ca      	mov	sl, r9
  4021ba:	e5d0      	b.n	401d5e <_vfiprintf_r+0x742>
  4021bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4021be:	9904      	ldr	r1, [sp, #16]
  4021c0:	9806      	ldr	r0, [sp, #24]
  4021c2:	f7ff f9eb 	bl	40159c <__sprint_r.part.0>
  4021c6:	2800      	cmp	r0, #0
  4021c8:	f47f aeda 	bne.w	401f80 <_vfiprintf_r+0x964>
  4021cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4021ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021d0:	1c48      	adds	r0, r1, #1
  4021d2:	46ca      	mov	sl, r9
  4021d4:	e5a4      	b.n	401d20 <_vfiprintf_r+0x704>
  4021d6:	9a07      	ldr	r2, [sp, #28]
  4021d8:	9903      	ldr	r1, [sp, #12]
  4021da:	6813      	ldr	r3, [r2, #0]
  4021dc:	17cd      	asrs	r5, r1, #31
  4021de:	4608      	mov	r0, r1
  4021e0:	3204      	adds	r2, #4
  4021e2:	4629      	mov	r1, r5
  4021e4:	9207      	str	r2, [sp, #28]
  4021e6:	e9c3 0100 	strd	r0, r1, [r3]
  4021ea:	f7ff ba54 	b.w	401696 <_vfiprintf_r+0x7a>
  4021ee:	4658      	mov	r0, fp
  4021f0:	9607      	str	r6, [sp, #28]
  4021f2:	9302      	str	r3, [sp, #8]
  4021f4:	f7ff f964 	bl	4014c0 <strlen>
  4021f8:	2400      	movs	r4, #0
  4021fa:	9005      	str	r0, [sp, #20]
  4021fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402200:	f7ff bb5e 	b.w	4018c0 <_vfiprintf_r+0x2a4>
  402204:	aa0f      	add	r2, sp, #60	; 0x3c
  402206:	9904      	ldr	r1, [sp, #16]
  402208:	9806      	ldr	r0, [sp, #24]
  40220a:	f7ff f9c7 	bl	40159c <__sprint_r.part.0>
  40220e:	2800      	cmp	r0, #0
  402210:	f47f aeb6 	bne.w	401f80 <_vfiprintf_r+0x964>
  402214:	9910      	ldr	r1, [sp, #64]	; 0x40
  402216:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402218:	1c48      	adds	r0, r1, #1
  40221a:	46ca      	mov	sl, r9
  40221c:	e5a7      	b.n	401d6e <_vfiprintf_r+0x752>
  40221e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402220:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402222:	4e20      	ldr	r6, [pc, #128]	; (4022a4 <_vfiprintf_r+0xc88>)
  402224:	3101      	adds	r1, #1
  402226:	f7ff bb90 	b.w	40194a <_vfiprintf_r+0x32e>
  40222a:	2c06      	cmp	r4, #6
  40222c:	bf28      	it	cs
  40222e:	2406      	movcs	r4, #6
  402230:	9405      	str	r4, [sp, #20]
  402232:	9607      	str	r6, [sp, #28]
  402234:	9401      	str	r4, [sp, #4]
  402236:	f8df b070 	ldr.w	fp, [pc, #112]	; 4022a8 <_vfiprintf_r+0xc8c>
  40223a:	e4d5      	b.n	401be8 <_vfiprintf_r+0x5cc>
  40223c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40223e:	4e19      	ldr	r6, [pc, #100]	; (4022a4 <_vfiprintf_r+0xc88>)
  402240:	3001      	adds	r0, #1
  402242:	e603      	b.n	401e4c <_vfiprintf_r+0x830>
  402244:	9405      	str	r4, [sp, #20]
  402246:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40224a:	9607      	str	r6, [sp, #28]
  40224c:	9302      	str	r3, [sp, #8]
  40224e:	4604      	mov	r4, r0
  402250:	f7ff bb36 	b.w	4018c0 <_vfiprintf_r+0x2a4>
  402254:	4686      	mov	lr, r0
  402256:	f7ff bbce 	b.w	4019f6 <_vfiprintf_r+0x3da>
  40225a:	9806      	ldr	r0, [sp, #24]
  40225c:	aa0f      	add	r2, sp, #60	; 0x3c
  40225e:	4659      	mov	r1, fp
  402260:	f7ff f99c 	bl	40159c <__sprint_r.part.0>
  402264:	2800      	cmp	r0, #0
  402266:	f43f ae24 	beq.w	401eb2 <_vfiprintf_r+0x896>
  40226a:	e624      	b.n	401eb6 <_vfiprintf_r+0x89a>
  40226c:	9907      	ldr	r1, [sp, #28]
  40226e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402272:	680c      	ldr	r4, [r1, #0]
  402274:	3104      	adds	r1, #4
  402276:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40227a:	46b8      	mov	r8, r7
  40227c:	9107      	str	r1, [sp, #28]
  40227e:	f7ff ba3f 	b.w	401700 <_vfiprintf_r+0xe4>
  402282:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402286:	e43c      	b.n	401b02 <_vfiprintf_r+0x4e6>
  402288:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40228c:	e521      	b.n	401cd2 <_vfiprintf_r+0x6b6>
  40228e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402292:	f7ff bbf4 	b.w	401a7e <_vfiprintf_r+0x462>
  402296:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40229a:	e491      	b.n	401bc0 <_vfiprintf_r+0x5a4>
  40229c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4022a0:	e469      	b.n	401b76 <_vfiprintf_r+0x55a>
  4022a2:	bf00      	nop
  4022a4:	0040426c 	.word	0x0040426c
  4022a8:	00404264 	.word	0x00404264

004022ac <__sbprintf>:
  4022ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022b0:	460c      	mov	r4, r1
  4022b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4022b6:	8989      	ldrh	r1, [r1, #12]
  4022b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4022ba:	89e5      	ldrh	r5, [r4, #14]
  4022bc:	9619      	str	r6, [sp, #100]	; 0x64
  4022be:	f021 0102 	bic.w	r1, r1, #2
  4022c2:	4606      	mov	r6, r0
  4022c4:	69e0      	ldr	r0, [r4, #28]
  4022c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4022ca:	4617      	mov	r7, r2
  4022cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4022d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4022d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4022d6:	4698      	mov	r8, r3
  4022d8:	ad1a      	add	r5, sp, #104	; 0x68
  4022da:	2300      	movs	r3, #0
  4022dc:	9007      	str	r0, [sp, #28]
  4022de:	a816      	add	r0, sp, #88	; 0x58
  4022e0:	9209      	str	r2, [sp, #36]	; 0x24
  4022e2:	9306      	str	r3, [sp, #24]
  4022e4:	9500      	str	r5, [sp, #0]
  4022e6:	9504      	str	r5, [sp, #16]
  4022e8:	9102      	str	r1, [sp, #8]
  4022ea:	9105      	str	r1, [sp, #20]
  4022ec:	f000 fd48 	bl	402d80 <__retarget_lock_init_recursive>
  4022f0:	4643      	mov	r3, r8
  4022f2:	463a      	mov	r2, r7
  4022f4:	4669      	mov	r1, sp
  4022f6:	4630      	mov	r0, r6
  4022f8:	f7ff f990 	bl	40161c <_vfiprintf_r>
  4022fc:	1e05      	subs	r5, r0, #0
  4022fe:	db07      	blt.n	402310 <__sbprintf+0x64>
  402300:	4630      	mov	r0, r6
  402302:	4669      	mov	r1, sp
  402304:	f000 f928 	bl	402558 <_fflush_r>
  402308:	2800      	cmp	r0, #0
  40230a:	bf18      	it	ne
  40230c:	f04f 35ff 	movne.w	r5, #4294967295
  402310:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402314:	065b      	lsls	r3, r3, #25
  402316:	d503      	bpl.n	402320 <__sbprintf+0x74>
  402318:	89a3      	ldrh	r3, [r4, #12]
  40231a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40231e:	81a3      	strh	r3, [r4, #12]
  402320:	9816      	ldr	r0, [sp, #88]	; 0x58
  402322:	f000 fd2f 	bl	402d84 <__retarget_lock_close_recursive>
  402326:	4628      	mov	r0, r5
  402328:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402330 <__swsetup_r>:
  402330:	b538      	push	{r3, r4, r5, lr}
  402332:	4b30      	ldr	r3, [pc, #192]	; (4023f4 <__swsetup_r+0xc4>)
  402334:	681b      	ldr	r3, [r3, #0]
  402336:	4605      	mov	r5, r0
  402338:	460c      	mov	r4, r1
  40233a:	b113      	cbz	r3, 402342 <__swsetup_r+0x12>
  40233c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40233e:	2a00      	cmp	r2, #0
  402340:	d038      	beq.n	4023b4 <__swsetup_r+0x84>
  402342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402346:	b293      	uxth	r3, r2
  402348:	0718      	lsls	r0, r3, #28
  40234a:	d50c      	bpl.n	402366 <__swsetup_r+0x36>
  40234c:	6920      	ldr	r0, [r4, #16]
  40234e:	b1a8      	cbz	r0, 40237c <__swsetup_r+0x4c>
  402350:	f013 0201 	ands.w	r2, r3, #1
  402354:	d01e      	beq.n	402394 <__swsetup_r+0x64>
  402356:	6963      	ldr	r3, [r4, #20]
  402358:	2200      	movs	r2, #0
  40235a:	425b      	negs	r3, r3
  40235c:	61a3      	str	r3, [r4, #24]
  40235e:	60a2      	str	r2, [r4, #8]
  402360:	b1f0      	cbz	r0, 4023a0 <__swsetup_r+0x70>
  402362:	2000      	movs	r0, #0
  402364:	bd38      	pop	{r3, r4, r5, pc}
  402366:	06d9      	lsls	r1, r3, #27
  402368:	d53c      	bpl.n	4023e4 <__swsetup_r+0xb4>
  40236a:	0758      	lsls	r0, r3, #29
  40236c:	d426      	bmi.n	4023bc <__swsetup_r+0x8c>
  40236e:	6920      	ldr	r0, [r4, #16]
  402370:	f042 0308 	orr.w	r3, r2, #8
  402374:	81a3      	strh	r3, [r4, #12]
  402376:	b29b      	uxth	r3, r3
  402378:	2800      	cmp	r0, #0
  40237a:	d1e9      	bne.n	402350 <__swsetup_r+0x20>
  40237c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402380:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402384:	d0e4      	beq.n	402350 <__swsetup_r+0x20>
  402386:	4628      	mov	r0, r5
  402388:	4621      	mov	r1, r4
  40238a:	f000 fd2f 	bl	402dec <__smakebuf_r>
  40238e:	89a3      	ldrh	r3, [r4, #12]
  402390:	6920      	ldr	r0, [r4, #16]
  402392:	e7dd      	b.n	402350 <__swsetup_r+0x20>
  402394:	0799      	lsls	r1, r3, #30
  402396:	bf58      	it	pl
  402398:	6962      	ldrpl	r2, [r4, #20]
  40239a:	60a2      	str	r2, [r4, #8]
  40239c:	2800      	cmp	r0, #0
  40239e:	d1e0      	bne.n	402362 <__swsetup_r+0x32>
  4023a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023a4:	061a      	lsls	r2, r3, #24
  4023a6:	d5dd      	bpl.n	402364 <__swsetup_r+0x34>
  4023a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023ac:	81a3      	strh	r3, [r4, #12]
  4023ae:	f04f 30ff 	mov.w	r0, #4294967295
  4023b2:	bd38      	pop	{r3, r4, r5, pc}
  4023b4:	4618      	mov	r0, r3
  4023b6:	f000 f927 	bl	402608 <__sinit>
  4023ba:	e7c2      	b.n	402342 <__swsetup_r+0x12>
  4023bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4023be:	b151      	cbz	r1, 4023d6 <__swsetup_r+0xa6>
  4023c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4023c4:	4299      	cmp	r1, r3
  4023c6:	d004      	beq.n	4023d2 <__swsetup_r+0xa2>
  4023c8:	4628      	mov	r0, r5
  4023ca:	f000 fa43 	bl	402854 <_free_r>
  4023ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4023d2:	2300      	movs	r3, #0
  4023d4:	6323      	str	r3, [r4, #48]	; 0x30
  4023d6:	2300      	movs	r3, #0
  4023d8:	6920      	ldr	r0, [r4, #16]
  4023da:	6063      	str	r3, [r4, #4]
  4023dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4023e0:	6020      	str	r0, [r4, #0]
  4023e2:	e7c5      	b.n	402370 <__swsetup_r+0x40>
  4023e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4023e8:	2309      	movs	r3, #9
  4023ea:	602b      	str	r3, [r5, #0]
  4023ec:	f04f 30ff 	mov.w	r0, #4294967295
  4023f0:	81a2      	strh	r2, [r4, #12]
  4023f2:	bd38      	pop	{r3, r4, r5, pc}
  4023f4:	20400024 	.word	0x20400024

004023f8 <register_fini>:
  4023f8:	4b02      	ldr	r3, [pc, #8]	; (402404 <register_fini+0xc>)
  4023fa:	b113      	cbz	r3, 402402 <register_fini+0xa>
  4023fc:	4802      	ldr	r0, [pc, #8]	; (402408 <register_fini+0x10>)
  4023fe:	f000 b805 	b.w	40240c <atexit>
  402402:	4770      	bx	lr
  402404:	00000000 	.word	0x00000000
  402408:	00402679 	.word	0x00402679

0040240c <atexit>:
  40240c:	2300      	movs	r3, #0
  40240e:	4601      	mov	r1, r0
  402410:	461a      	mov	r2, r3
  402412:	4618      	mov	r0, r3
  402414:	f001 bc00 	b.w	403c18 <__register_exitproc>

00402418 <__sflush_r>:
  402418:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40241c:	b29a      	uxth	r2, r3
  40241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402422:	460d      	mov	r5, r1
  402424:	0711      	lsls	r1, r2, #28
  402426:	4680      	mov	r8, r0
  402428:	d43a      	bmi.n	4024a0 <__sflush_r+0x88>
  40242a:	686a      	ldr	r2, [r5, #4]
  40242c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402430:	2a00      	cmp	r2, #0
  402432:	81ab      	strh	r3, [r5, #12]
  402434:	dd6f      	ble.n	402516 <__sflush_r+0xfe>
  402436:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402438:	2c00      	cmp	r4, #0
  40243a:	d049      	beq.n	4024d0 <__sflush_r+0xb8>
  40243c:	2200      	movs	r2, #0
  40243e:	b29b      	uxth	r3, r3
  402440:	f8d8 6000 	ldr.w	r6, [r8]
  402444:	f8c8 2000 	str.w	r2, [r8]
  402448:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40244c:	d067      	beq.n	40251e <__sflush_r+0x106>
  40244e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402450:	075f      	lsls	r7, r3, #29
  402452:	d505      	bpl.n	402460 <__sflush_r+0x48>
  402454:	6869      	ldr	r1, [r5, #4]
  402456:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402458:	1a52      	subs	r2, r2, r1
  40245a:	b10b      	cbz	r3, 402460 <__sflush_r+0x48>
  40245c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40245e:	1ad2      	subs	r2, r2, r3
  402460:	2300      	movs	r3, #0
  402462:	69e9      	ldr	r1, [r5, #28]
  402464:	4640      	mov	r0, r8
  402466:	47a0      	blx	r4
  402468:	1c44      	adds	r4, r0, #1
  40246a:	d03c      	beq.n	4024e6 <__sflush_r+0xce>
  40246c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402470:	692a      	ldr	r2, [r5, #16]
  402472:	602a      	str	r2, [r5, #0]
  402474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402478:	2200      	movs	r2, #0
  40247a:	81ab      	strh	r3, [r5, #12]
  40247c:	04db      	lsls	r3, r3, #19
  40247e:	606a      	str	r2, [r5, #4]
  402480:	d447      	bmi.n	402512 <__sflush_r+0xfa>
  402482:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402484:	f8c8 6000 	str.w	r6, [r8]
  402488:	b311      	cbz	r1, 4024d0 <__sflush_r+0xb8>
  40248a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40248e:	4299      	cmp	r1, r3
  402490:	d002      	beq.n	402498 <__sflush_r+0x80>
  402492:	4640      	mov	r0, r8
  402494:	f000 f9de 	bl	402854 <_free_r>
  402498:	2000      	movs	r0, #0
  40249a:	6328      	str	r0, [r5, #48]	; 0x30
  40249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024a0:	692e      	ldr	r6, [r5, #16]
  4024a2:	b1ae      	cbz	r6, 4024d0 <__sflush_r+0xb8>
  4024a4:	682c      	ldr	r4, [r5, #0]
  4024a6:	602e      	str	r6, [r5, #0]
  4024a8:	0791      	lsls	r1, r2, #30
  4024aa:	bf0c      	ite	eq
  4024ac:	696b      	ldreq	r3, [r5, #20]
  4024ae:	2300      	movne	r3, #0
  4024b0:	1ba4      	subs	r4, r4, r6
  4024b2:	60ab      	str	r3, [r5, #8]
  4024b4:	e00a      	b.n	4024cc <__sflush_r+0xb4>
  4024b6:	4623      	mov	r3, r4
  4024b8:	4632      	mov	r2, r6
  4024ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4024bc:	69e9      	ldr	r1, [r5, #28]
  4024be:	4640      	mov	r0, r8
  4024c0:	47b8      	blx	r7
  4024c2:	2800      	cmp	r0, #0
  4024c4:	eba4 0400 	sub.w	r4, r4, r0
  4024c8:	4406      	add	r6, r0
  4024ca:	dd04      	ble.n	4024d6 <__sflush_r+0xbe>
  4024cc:	2c00      	cmp	r4, #0
  4024ce:	dcf2      	bgt.n	4024b6 <__sflush_r+0x9e>
  4024d0:	2000      	movs	r0, #0
  4024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024d6:	89ab      	ldrh	r3, [r5, #12]
  4024d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024dc:	81ab      	strh	r3, [r5, #12]
  4024de:	f04f 30ff 	mov.w	r0, #4294967295
  4024e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024e6:	f8d8 4000 	ldr.w	r4, [r8]
  4024ea:	2c1d      	cmp	r4, #29
  4024ec:	d8f3      	bhi.n	4024d6 <__sflush_r+0xbe>
  4024ee:	4b19      	ldr	r3, [pc, #100]	; (402554 <__sflush_r+0x13c>)
  4024f0:	40e3      	lsrs	r3, r4
  4024f2:	43db      	mvns	r3, r3
  4024f4:	f013 0301 	ands.w	r3, r3, #1
  4024f8:	d1ed      	bne.n	4024d6 <__sflush_r+0xbe>
  4024fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4024fe:	606b      	str	r3, [r5, #4]
  402500:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402504:	6929      	ldr	r1, [r5, #16]
  402506:	81ab      	strh	r3, [r5, #12]
  402508:	04da      	lsls	r2, r3, #19
  40250a:	6029      	str	r1, [r5, #0]
  40250c:	d5b9      	bpl.n	402482 <__sflush_r+0x6a>
  40250e:	2c00      	cmp	r4, #0
  402510:	d1b7      	bne.n	402482 <__sflush_r+0x6a>
  402512:	6528      	str	r0, [r5, #80]	; 0x50
  402514:	e7b5      	b.n	402482 <__sflush_r+0x6a>
  402516:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402518:	2a00      	cmp	r2, #0
  40251a:	dc8c      	bgt.n	402436 <__sflush_r+0x1e>
  40251c:	e7d8      	b.n	4024d0 <__sflush_r+0xb8>
  40251e:	2301      	movs	r3, #1
  402520:	69e9      	ldr	r1, [r5, #28]
  402522:	4640      	mov	r0, r8
  402524:	47a0      	blx	r4
  402526:	1c43      	adds	r3, r0, #1
  402528:	4602      	mov	r2, r0
  40252a:	d002      	beq.n	402532 <__sflush_r+0x11a>
  40252c:	89ab      	ldrh	r3, [r5, #12]
  40252e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402530:	e78e      	b.n	402450 <__sflush_r+0x38>
  402532:	f8d8 3000 	ldr.w	r3, [r8]
  402536:	2b00      	cmp	r3, #0
  402538:	d0f8      	beq.n	40252c <__sflush_r+0x114>
  40253a:	2b1d      	cmp	r3, #29
  40253c:	d001      	beq.n	402542 <__sflush_r+0x12a>
  40253e:	2b16      	cmp	r3, #22
  402540:	d102      	bne.n	402548 <__sflush_r+0x130>
  402542:	f8c8 6000 	str.w	r6, [r8]
  402546:	e7c3      	b.n	4024d0 <__sflush_r+0xb8>
  402548:	89ab      	ldrh	r3, [r5, #12]
  40254a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40254e:	81ab      	strh	r3, [r5, #12]
  402550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402554:	20400001 	.word	0x20400001

00402558 <_fflush_r>:
  402558:	b538      	push	{r3, r4, r5, lr}
  40255a:	460d      	mov	r5, r1
  40255c:	4604      	mov	r4, r0
  40255e:	b108      	cbz	r0, 402564 <_fflush_r+0xc>
  402560:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402562:	b1bb      	cbz	r3, 402594 <_fflush_r+0x3c>
  402564:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402568:	b188      	cbz	r0, 40258e <_fflush_r+0x36>
  40256a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40256c:	07db      	lsls	r3, r3, #31
  40256e:	d401      	bmi.n	402574 <_fflush_r+0x1c>
  402570:	0581      	lsls	r1, r0, #22
  402572:	d517      	bpl.n	4025a4 <_fflush_r+0x4c>
  402574:	4620      	mov	r0, r4
  402576:	4629      	mov	r1, r5
  402578:	f7ff ff4e 	bl	402418 <__sflush_r>
  40257c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40257e:	07da      	lsls	r2, r3, #31
  402580:	4604      	mov	r4, r0
  402582:	d402      	bmi.n	40258a <_fflush_r+0x32>
  402584:	89ab      	ldrh	r3, [r5, #12]
  402586:	059b      	lsls	r3, r3, #22
  402588:	d507      	bpl.n	40259a <_fflush_r+0x42>
  40258a:	4620      	mov	r0, r4
  40258c:	bd38      	pop	{r3, r4, r5, pc}
  40258e:	4604      	mov	r4, r0
  402590:	4620      	mov	r0, r4
  402592:	bd38      	pop	{r3, r4, r5, pc}
  402594:	f000 f838 	bl	402608 <__sinit>
  402598:	e7e4      	b.n	402564 <_fflush_r+0xc>
  40259a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40259c:	f000 fbf6 	bl	402d8c <__retarget_lock_release_recursive>
  4025a0:	4620      	mov	r0, r4
  4025a2:	bd38      	pop	{r3, r4, r5, pc}
  4025a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4025a6:	f000 fbef 	bl	402d88 <__retarget_lock_acquire_recursive>
  4025aa:	e7e3      	b.n	402574 <_fflush_r+0x1c>

004025ac <_cleanup_r>:
  4025ac:	4901      	ldr	r1, [pc, #4]	; (4025b4 <_cleanup_r+0x8>)
  4025ae:	f000 bbaf 	b.w	402d10 <_fwalk_reent>
  4025b2:	bf00      	nop
  4025b4:	00403d01 	.word	0x00403d01

004025b8 <std.isra.0>:
  4025b8:	b510      	push	{r4, lr}
  4025ba:	2300      	movs	r3, #0
  4025bc:	4604      	mov	r4, r0
  4025be:	8181      	strh	r1, [r0, #12]
  4025c0:	81c2      	strh	r2, [r0, #14]
  4025c2:	6003      	str	r3, [r0, #0]
  4025c4:	6043      	str	r3, [r0, #4]
  4025c6:	6083      	str	r3, [r0, #8]
  4025c8:	6643      	str	r3, [r0, #100]	; 0x64
  4025ca:	6103      	str	r3, [r0, #16]
  4025cc:	6143      	str	r3, [r0, #20]
  4025ce:	6183      	str	r3, [r0, #24]
  4025d0:	4619      	mov	r1, r3
  4025d2:	2208      	movs	r2, #8
  4025d4:	305c      	adds	r0, #92	; 0x5c
  4025d6:	f7fe fdf5 	bl	4011c4 <memset>
  4025da:	4807      	ldr	r0, [pc, #28]	; (4025f8 <std.isra.0+0x40>)
  4025dc:	4907      	ldr	r1, [pc, #28]	; (4025fc <std.isra.0+0x44>)
  4025de:	4a08      	ldr	r2, [pc, #32]	; (402600 <std.isra.0+0x48>)
  4025e0:	4b08      	ldr	r3, [pc, #32]	; (402604 <std.isra.0+0x4c>)
  4025e2:	6220      	str	r0, [r4, #32]
  4025e4:	61e4      	str	r4, [r4, #28]
  4025e6:	6261      	str	r1, [r4, #36]	; 0x24
  4025e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4025ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4025ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4025f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4025f4:	f000 bbc4 	b.w	402d80 <__retarget_lock_init_recursive>
  4025f8:	00403a45 	.word	0x00403a45
  4025fc:	00403a69 	.word	0x00403a69
  402600:	00403aa5 	.word	0x00403aa5
  402604:	00403ac5 	.word	0x00403ac5

00402608 <__sinit>:
  402608:	b510      	push	{r4, lr}
  40260a:	4604      	mov	r4, r0
  40260c:	4812      	ldr	r0, [pc, #72]	; (402658 <__sinit+0x50>)
  40260e:	f000 fbbb 	bl	402d88 <__retarget_lock_acquire_recursive>
  402612:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402614:	b9d2      	cbnz	r2, 40264c <__sinit+0x44>
  402616:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40261a:	4810      	ldr	r0, [pc, #64]	; (40265c <__sinit+0x54>)
  40261c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402620:	2103      	movs	r1, #3
  402622:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402626:	63e0      	str	r0, [r4, #60]	; 0x3c
  402628:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40262c:	6860      	ldr	r0, [r4, #4]
  40262e:	2104      	movs	r1, #4
  402630:	f7ff ffc2 	bl	4025b8 <std.isra.0>
  402634:	2201      	movs	r2, #1
  402636:	2109      	movs	r1, #9
  402638:	68a0      	ldr	r0, [r4, #8]
  40263a:	f7ff ffbd 	bl	4025b8 <std.isra.0>
  40263e:	2202      	movs	r2, #2
  402640:	2112      	movs	r1, #18
  402642:	68e0      	ldr	r0, [r4, #12]
  402644:	f7ff ffb8 	bl	4025b8 <std.isra.0>
  402648:	2301      	movs	r3, #1
  40264a:	63a3      	str	r3, [r4, #56]	; 0x38
  40264c:	4802      	ldr	r0, [pc, #8]	; (402658 <__sinit+0x50>)
  40264e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402652:	f000 bb9b 	b.w	402d8c <__retarget_lock_release_recursive>
  402656:	bf00      	nop
  402658:	20400abc 	.word	0x20400abc
  40265c:	004025ad 	.word	0x004025ad

00402660 <__sfp_lock_acquire>:
  402660:	4801      	ldr	r0, [pc, #4]	; (402668 <__sfp_lock_acquire+0x8>)
  402662:	f000 bb91 	b.w	402d88 <__retarget_lock_acquire_recursive>
  402666:	bf00      	nop
  402668:	20400ad0 	.word	0x20400ad0

0040266c <__sfp_lock_release>:
  40266c:	4801      	ldr	r0, [pc, #4]	; (402674 <__sfp_lock_release+0x8>)
  40266e:	f000 bb8d 	b.w	402d8c <__retarget_lock_release_recursive>
  402672:	bf00      	nop
  402674:	20400ad0 	.word	0x20400ad0

00402678 <__libc_fini_array>:
  402678:	b538      	push	{r3, r4, r5, lr}
  40267a:	4c0a      	ldr	r4, [pc, #40]	; (4026a4 <__libc_fini_array+0x2c>)
  40267c:	4d0a      	ldr	r5, [pc, #40]	; (4026a8 <__libc_fini_array+0x30>)
  40267e:	1b64      	subs	r4, r4, r5
  402680:	10a4      	asrs	r4, r4, #2
  402682:	d00a      	beq.n	40269a <__libc_fini_array+0x22>
  402684:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402688:	3b01      	subs	r3, #1
  40268a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40268e:	3c01      	subs	r4, #1
  402690:	f855 3904 	ldr.w	r3, [r5], #-4
  402694:	4798      	blx	r3
  402696:	2c00      	cmp	r4, #0
  402698:	d1f9      	bne.n	40268e <__libc_fini_array+0x16>
  40269a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40269e:	f001 be89 	b.w	4043b4 <_fini>
  4026a2:	bf00      	nop
  4026a4:	004043c4 	.word	0x004043c4
  4026a8:	004043c0 	.word	0x004043c0

004026ac <__fputwc>:
  4026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026b0:	b082      	sub	sp, #8
  4026b2:	4680      	mov	r8, r0
  4026b4:	4689      	mov	r9, r1
  4026b6:	4614      	mov	r4, r2
  4026b8:	f000 fb54 	bl	402d64 <__locale_mb_cur_max>
  4026bc:	2801      	cmp	r0, #1
  4026be:	d036      	beq.n	40272e <__fputwc+0x82>
  4026c0:	464a      	mov	r2, r9
  4026c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4026c6:	a901      	add	r1, sp, #4
  4026c8:	4640      	mov	r0, r8
  4026ca:	f001 fa57 	bl	403b7c <_wcrtomb_r>
  4026ce:	1c42      	adds	r2, r0, #1
  4026d0:	4606      	mov	r6, r0
  4026d2:	d025      	beq.n	402720 <__fputwc+0x74>
  4026d4:	b3a8      	cbz	r0, 402742 <__fputwc+0x96>
  4026d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4026da:	2500      	movs	r5, #0
  4026dc:	f10d 0a04 	add.w	sl, sp, #4
  4026e0:	e009      	b.n	4026f6 <__fputwc+0x4a>
  4026e2:	6823      	ldr	r3, [r4, #0]
  4026e4:	1c5a      	adds	r2, r3, #1
  4026e6:	6022      	str	r2, [r4, #0]
  4026e8:	f883 e000 	strb.w	lr, [r3]
  4026ec:	3501      	adds	r5, #1
  4026ee:	42b5      	cmp	r5, r6
  4026f0:	d227      	bcs.n	402742 <__fputwc+0x96>
  4026f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4026f6:	68a3      	ldr	r3, [r4, #8]
  4026f8:	3b01      	subs	r3, #1
  4026fa:	2b00      	cmp	r3, #0
  4026fc:	60a3      	str	r3, [r4, #8]
  4026fe:	daf0      	bge.n	4026e2 <__fputwc+0x36>
  402700:	69a7      	ldr	r7, [r4, #24]
  402702:	42bb      	cmp	r3, r7
  402704:	4671      	mov	r1, lr
  402706:	4622      	mov	r2, r4
  402708:	4640      	mov	r0, r8
  40270a:	db02      	blt.n	402712 <__fputwc+0x66>
  40270c:	f1be 0f0a 	cmp.w	lr, #10
  402710:	d1e7      	bne.n	4026e2 <__fputwc+0x36>
  402712:	f001 f9db 	bl	403acc <__swbuf_r>
  402716:	1c43      	adds	r3, r0, #1
  402718:	d1e8      	bne.n	4026ec <__fputwc+0x40>
  40271a:	b002      	add	sp, #8
  40271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402720:	89a3      	ldrh	r3, [r4, #12]
  402722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402726:	81a3      	strh	r3, [r4, #12]
  402728:	b002      	add	sp, #8
  40272a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40272e:	f109 33ff 	add.w	r3, r9, #4294967295
  402732:	2bfe      	cmp	r3, #254	; 0xfe
  402734:	d8c4      	bhi.n	4026c0 <__fputwc+0x14>
  402736:	fa5f fe89 	uxtb.w	lr, r9
  40273a:	4606      	mov	r6, r0
  40273c:	f88d e004 	strb.w	lr, [sp, #4]
  402740:	e7cb      	b.n	4026da <__fputwc+0x2e>
  402742:	4648      	mov	r0, r9
  402744:	b002      	add	sp, #8
  402746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40274a:	bf00      	nop

0040274c <_fputwc_r>:
  40274c:	b530      	push	{r4, r5, lr}
  40274e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402750:	f013 0f01 	tst.w	r3, #1
  402754:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402758:	4614      	mov	r4, r2
  40275a:	b083      	sub	sp, #12
  40275c:	4605      	mov	r5, r0
  40275e:	b29a      	uxth	r2, r3
  402760:	d101      	bne.n	402766 <_fputwc_r+0x1a>
  402762:	0590      	lsls	r0, r2, #22
  402764:	d51c      	bpl.n	4027a0 <_fputwc_r+0x54>
  402766:	0490      	lsls	r0, r2, #18
  402768:	d406      	bmi.n	402778 <_fputwc_r+0x2c>
  40276a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40276c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402774:	81a3      	strh	r3, [r4, #12]
  402776:	6662      	str	r2, [r4, #100]	; 0x64
  402778:	4628      	mov	r0, r5
  40277a:	4622      	mov	r2, r4
  40277c:	f7ff ff96 	bl	4026ac <__fputwc>
  402780:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402782:	07da      	lsls	r2, r3, #31
  402784:	4605      	mov	r5, r0
  402786:	d402      	bmi.n	40278e <_fputwc_r+0x42>
  402788:	89a3      	ldrh	r3, [r4, #12]
  40278a:	059b      	lsls	r3, r3, #22
  40278c:	d502      	bpl.n	402794 <_fputwc_r+0x48>
  40278e:	4628      	mov	r0, r5
  402790:	b003      	add	sp, #12
  402792:	bd30      	pop	{r4, r5, pc}
  402794:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402796:	f000 faf9 	bl	402d8c <__retarget_lock_release_recursive>
  40279a:	4628      	mov	r0, r5
  40279c:	b003      	add	sp, #12
  40279e:	bd30      	pop	{r4, r5, pc}
  4027a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4027a2:	9101      	str	r1, [sp, #4]
  4027a4:	f000 faf0 	bl	402d88 <__retarget_lock_acquire_recursive>
  4027a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027ac:	9901      	ldr	r1, [sp, #4]
  4027ae:	b29a      	uxth	r2, r3
  4027b0:	e7d9      	b.n	402766 <_fputwc_r+0x1a>
  4027b2:	bf00      	nop

004027b4 <_malloc_trim_r>:
  4027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027b6:	4f24      	ldr	r7, [pc, #144]	; (402848 <_malloc_trim_r+0x94>)
  4027b8:	460c      	mov	r4, r1
  4027ba:	4606      	mov	r6, r0
  4027bc:	f000 ff7e 	bl	4036bc <__malloc_lock>
  4027c0:	68bb      	ldr	r3, [r7, #8]
  4027c2:	685d      	ldr	r5, [r3, #4]
  4027c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4027c8:	310f      	adds	r1, #15
  4027ca:	f025 0503 	bic.w	r5, r5, #3
  4027ce:	4429      	add	r1, r5
  4027d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4027d4:	f021 010f 	bic.w	r1, r1, #15
  4027d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4027dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4027e0:	db07      	blt.n	4027f2 <_malloc_trim_r+0x3e>
  4027e2:	2100      	movs	r1, #0
  4027e4:	4630      	mov	r0, r6
  4027e6:	f001 f91b 	bl	403a20 <_sbrk_r>
  4027ea:	68bb      	ldr	r3, [r7, #8]
  4027ec:	442b      	add	r3, r5
  4027ee:	4298      	cmp	r0, r3
  4027f0:	d004      	beq.n	4027fc <_malloc_trim_r+0x48>
  4027f2:	4630      	mov	r0, r6
  4027f4:	f000 ff68 	bl	4036c8 <__malloc_unlock>
  4027f8:	2000      	movs	r0, #0
  4027fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027fc:	4261      	negs	r1, r4
  4027fe:	4630      	mov	r0, r6
  402800:	f001 f90e 	bl	403a20 <_sbrk_r>
  402804:	3001      	adds	r0, #1
  402806:	d00d      	beq.n	402824 <_malloc_trim_r+0x70>
  402808:	4b10      	ldr	r3, [pc, #64]	; (40284c <_malloc_trim_r+0x98>)
  40280a:	68ba      	ldr	r2, [r7, #8]
  40280c:	6819      	ldr	r1, [r3, #0]
  40280e:	1b2d      	subs	r5, r5, r4
  402810:	f045 0501 	orr.w	r5, r5, #1
  402814:	4630      	mov	r0, r6
  402816:	1b09      	subs	r1, r1, r4
  402818:	6055      	str	r5, [r2, #4]
  40281a:	6019      	str	r1, [r3, #0]
  40281c:	f000 ff54 	bl	4036c8 <__malloc_unlock>
  402820:	2001      	movs	r0, #1
  402822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402824:	2100      	movs	r1, #0
  402826:	4630      	mov	r0, r6
  402828:	f001 f8fa 	bl	403a20 <_sbrk_r>
  40282c:	68ba      	ldr	r2, [r7, #8]
  40282e:	1a83      	subs	r3, r0, r2
  402830:	2b0f      	cmp	r3, #15
  402832:	ddde      	ble.n	4027f2 <_malloc_trim_r+0x3e>
  402834:	4c06      	ldr	r4, [pc, #24]	; (402850 <_malloc_trim_r+0x9c>)
  402836:	4905      	ldr	r1, [pc, #20]	; (40284c <_malloc_trim_r+0x98>)
  402838:	6824      	ldr	r4, [r4, #0]
  40283a:	f043 0301 	orr.w	r3, r3, #1
  40283e:	1b00      	subs	r0, r0, r4
  402840:	6053      	str	r3, [r2, #4]
  402842:	6008      	str	r0, [r1, #0]
  402844:	e7d5      	b.n	4027f2 <_malloc_trim_r+0x3e>
  402846:	bf00      	nop
  402848:	204005c0 	.word	0x204005c0
  40284c:	20400a70 	.word	0x20400a70
  402850:	204009c8 	.word	0x204009c8

00402854 <_free_r>:
  402854:	2900      	cmp	r1, #0
  402856:	d044      	beq.n	4028e2 <_free_r+0x8e>
  402858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40285c:	460d      	mov	r5, r1
  40285e:	4680      	mov	r8, r0
  402860:	f000 ff2c 	bl	4036bc <__malloc_lock>
  402864:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402868:	4969      	ldr	r1, [pc, #420]	; (402a10 <_free_r+0x1bc>)
  40286a:	f027 0301 	bic.w	r3, r7, #1
  40286e:	f1a5 0408 	sub.w	r4, r5, #8
  402872:	18e2      	adds	r2, r4, r3
  402874:	688e      	ldr	r6, [r1, #8]
  402876:	6850      	ldr	r0, [r2, #4]
  402878:	42b2      	cmp	r2, r6
  40287a:	f020 0003 	bic.w	r0, r0, #3
  40287e:	d05e      	beq.n	40293e <_free_r+0xea>
  402880:	07fe      	lsls	r6, r7, #31
  402882:	6050      	str	r0, [r2, #4]
  402884:	d40b      	bmi.n	40289e <_free_r+0x4a>
  402886:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40288a:	1be4      	subs	r4, r4, r7
  40288c:	f101 0e08 	add.w	lr, r1, #8
  402890:	68a5      	ldr	r5, [r4, #8]
  402892:	4575      	cmp	r5, lr
  402894:	443b      	add	r3, r7
  402896:	d06d      	beq.n	402974 <_free_r+0x120>
  402898:	68e7      	ldr	r7, [r4, #12]
  40289a:	60ef      	str	r7, [r5, #12]
  40289c:	60bd      	str	r5, [r7, #8]
  40289e:	1815      	adds	r5, r2, r0
  4028a0:	686d      	ldr	r5, [r5, #4]
  4028a2:	07ed      	lsls	r5, r5, #31
  4028a4:	d53e      	bpl.n	402924 <_free_r+0xd0>
  4028a6:	f043 0201 	orr.w	r2, r3, #1
  4028aa:	6062      	str	r2, [r4, #4]
  4028ac:	50e3      	str	r3, [r4, r3]
  4028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028b2:	d217      	bcs.n	4028e4 <_free_r+0x90>
  4028b4:	08db      	lsrs	r3, r3, #3
  4028b6:	1c58      	adds	r0, r3, #1
  4028b8:	109a      	asrs	r2, r3, #2
  4028ba:	684d      	ldr	r5, [r1, #4]
  4028bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4028c0:	60a7      	str	r7, [r4, #8]
  4028c2:	2301      	movs	r3, #1
  4028c4:	4093      	lsls	r3, r2
  4028c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4028ca:	432b      	orrs	r3, r5
  4028cc:	3a08      	subs	r2, #8
  4028ce:	60e2      	str	r2, [r4, #12]
  4028d0:	604b      	str	r3, [r1, #4]
  4028d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4028d6:	60fc      	str	r4, [r7, #12]
  4028d8:	4640      	mov	r0, r8
  4028da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4028de:	f000 bef3 	b.w	4036c8 <__malloc_unlock>
  4028e2:	4770      	bx	lr
  4028e4:	0a5a      	lsrs	r2, r3, #9
  4028e6:	2a04      	cmp	r2, #4
  4028e8:	d852      	bhi.n	402990 <_free_r+0x13c>
  4028ea:	099a      	lsrs	r2, r3, #6
  4028ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4028f0:	00ff      	lsls	r7, r7, #3
  4028f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4028f6:	19c8      	adds	r0, r1, r7
  4028f8:	59ca      	ldr	r2, [r1, r7]
  4028fa:	3808      	subs	r0, #8
  4028fc:	4290      	cmp	r0, r2
  4028fe:	d04f      	beq.n	4029a0 <_free_r+0x14c>
  402900:	6851      	ldr	r1, [r2, #4]
  402902:	f021 0103 	bic.w	r1, r1, #3
  402906:	428b      	cmp	r3, r1
  402908:	d232      	bcs.n	402970 <_free_r+0x11c>
  40290a:	6892      	ldr	r2, [r2, #8]
  40290c:	4290      	cmp	r0, r2
  40290e:	d1f7      	bne.n	402900 <_free_r+0xac>
  402910:	68c3      	ldr	r3, [r0, #12]
  402912:	60a0      	str	r0, [r4, #8]
  402914:	60e3      	str	r3, [r4, #12]
  402916:	609c      	str	r4, [r3, #8]
  402918:	60c4      	str	r4, [r0, #12]
  40291a:	4640      	mov	r0, r8
  40291c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402920:	f000 bed2 	b.w	4036c8 <__malloc_unlock>
  402924:	6895      	ldr	r5, [r2, #8]
  402926:	4f3b      	ldr	r7, [pc, #236]	; (402a14 <_free_r+0x1c0>)
  402928:	42bd      	cmp	r5, r7
  40292a:	4403      	add	r3, r0
  40292c:	d040      	beq.n	4029b0 <_free_r+0x15c>
  40292e:	68d0      	ldr	r0, [r2, #12]
  402930:	60e8      	str	r0, [r5, #12]
  402932:	f043 0201 	orr.w	r2, r3, #1
  402936:	6085      	str	r5, [r0, #8]
  402938:	6062      	str	r2, [r4, #4]
  40293a:	50e3      	str	r3, [r4, r3]
  40293c:	e7b7      	b.n	4028ae <_free_r+0x5a>
  40293e:	07ff      	lsls	r7, r7, #31
  402940:	4403      	add	r3, r0
  402942:	d407      	bmi.n	402954 <_free_r+0x100>
  402944:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402948:	1aa4      	subs	r4, r4, r2
  40294a:	4413      	add	r3, r2
  40294c:	68a0      	ldr	r0, [r4, #8]
  40294e:	68e2      	ldr	r2, [r4, #12]
  402950:	60c2      	str	r2, [r0, #12]
  402952:	6090      	str	r0, [r2, #8]
  402954:	4a30      	ldr	r2, [pc, #192]	; (402a18 <_free_r+0x1c4>)
  402956:	6812      	ldr	r2, [r2, #0]
  402958:	f043 0001 	orr.w	r0, r3, #1
  40295c:	4293      	cmp	r3, r2
  40295e:	6060      	str	r0, [r4, #4]
  402960:	608c      	str	r4, [r1, #8]
  402962:	d3b9      	bcc.n	4028d8 <_free_r+0x84>
  402964:	4b2d      	ldr	r3, [pc, #180]	; (402a1c <_free_r+0x1c8>)
  402966:	4640      	mov	r0, r8
  402968:	6819      	ldr	r1, [r3, #0]
  40296a:	f7ff ff23 	bl	4027b4 <_malloc_trim_r>
  40296e:	e7b3      	b.n	4028d8 <_free_r+0x84>
  402970:	4610      	mov	r0, r2
  402972:	e7cd      	b.n	402910 <_free_r+0xbc>
  402974:	1811      	adds	r1, r2, r0
  402976:	6849      	ldr	r1, [r1, #4]
  402978:	07c9      	lsls	r1, r1, #31
  40297a:	d444      	bmi.n	402a06 <_free_r+0x1b2>
  40297c:	6891      	ldr	r1, [r2, #8]
  40297e:	68d2      	ldr	r2, [r2, #12]
  402980:	60ca      	str	r2, [r1, #12]
  402982:	4403      	add	r3, r0
  402984:	f043 0001 	orr.w	r0, r3, #1
  402988:	6091      	str	r1, [r2, #8]
  40298a:	6060      	str	r0, [r4, #4]
  40298c:	50e3      	str	r3, [r4, r3]
  40298e:	e7a3      	b.n	4028d8 <_free_r+0x84>
  402990:	2a14      	cmp	r2, #20
  402992:	d816      	bhi.n	4029c2 <_free_r+0x16e>
  402994:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402998:	00ff      	lsls	r7, r7, #3
  40299a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40299e:	e7aa      	b.n	4028f6 <_free_r+0xa2>
  4029a0:	10aa      	asrs	r2, r5, #2
  4029a2:	2301      	movs	r3, #1
  4029a4:	684d      	ldr	r5, [r1, #4]
  4029a6:	4093      	lsls	r3, r2
  4029a8:	432b      	orrs	r3, r5
  4029aa:	604b      	str	r3, [r1, #4]
  4029ac:	4603      	mov	r3, r0
  4029ae:	e7b0      	b.n	402912 <_free_r+0xbe>
  4029b0:	f043 0201 	orr.w	r2, r3, #1
  4029b4:	614c      	str	r4, [r1, #20]
  4029b6:	610c      	str	r4, [r1, #16]
  4029b8:	60e5      	str	r5, [r4, #12]
  4029ba:	60a5      	str	r5, [r4, #8]
  4029bc:	6062      	str	r2, [r4, #4]
  4029be:	50e3      	str	r3, [r4, r3]
  4029c0:	e78a      	b.n	4028d8 <_free_r+0x84>
  4029c2:	2a54      	cmp	r2, #84	; 0x54
  4029c4:	d806      	bhi.n	4029d4 <_free_r+0x180>
  4029c6:	0b1a      	lsrs	r2, r3, #12
  4029c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4029cc:	00ff      	lsls	r7, r7, #3
  4029ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4029d2:	e790      	b.n	4028f6 <_free_r+0xa2>
  4029d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4029d8:	d806      	bhi.n	4029e8 <_free_r+0x194>
  4029da:	0bda      	lsrs	r2, r3, #15
  4029dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4029e0:	00ff      	lsls	r7, r7, #3
  4029e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4029e6:	e786      	b.n	4028f6 <_free_r+0xa2>
  4029e8:	f240 5054 	movw	r0, #1364	; 0x554
  4029ec:	4282      	cmp	r2, r0
  4029ee:	d806      	bhi.n	4029fe <_free_r+0x1aa>
  4029f0:	0c9a      	lsrs	r2, r3, #18
  4029f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4029f6:	00ff      	lsls	r7, r7, #3
  4029f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4029fc:	e77b      	b.n	4028f6 <_free_r+0xa2>
  4029fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402a02:	257e      	movs	r5, #126	; 0x7e
  402a04:	e777      	b.n	4028f6 <_free_r+0xa2>
  402a06:	f043 0101 	orr.w	r1, r3, #1
  402a0a:	6061      	str	r1, [r4, #4]
  402a0c:	6013      	str	r3, [r2, #0]
  402a0e:	e763      	b.n	4028d8 <_free_r+0x84>
  402a10:	204005c0 	.word	0x204005c0
  402a14:	204005c8 	.word	0x204005c8
  402a18:	204009cc 	.word	0x204009cc
  402a1c:	20400aa0 	.word	0x20400aa0

00402a20 <__sfvwrite_r>:
  402a20:	6893      	ldr	r3, [r2, #8]
  402a22:	2b00      	cmp	r3, #0
  402a24:	d073      	beq.n	402b0e <__sfvwrite_r+0xee>
  402a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a2a:	898b      	ldrh	r3, [r1, #12]
  402a2c:	b083      	sub	sp, #12
  402a2e:	460c      	mov	r4, r1
  402a30:	0719      	lsls	r1, r3, #28
  402a32:	9000      	str	r0, [sp, #0]
  402a34:	4616      	mov	r6, r2
  402a36:	d526      	bpl.n	402a86 <__sfvwrite_r+0x66>
  402a38:	6922      	ldr	r2, [r4, #16]
  402a3a:	b322      	cbz	r2, 402a86 <__sfvwrite_r+0x66>
  402a3c:	f013 0002 	ands.w	r0, r3, #2
  402a40:	6835      	ldr	r5, [r6, #0]
  402a42:	d02c      	beq.n	402a9e <__sfvwrite_r+0x7e>
  402a44:	f04f 0900 	mov.w	r9, #0
  402a48:	4fb0      	ldr	r7, [pc, #704]	; (402d0c <__sfvwrite_r+0x2ec>)
  402a4a:	46c8      	mov	r8, r9
  402a4c:	46b2      	mov	sl, r6
  402a4e:	45b8      	cmp	r8, r7
  402a50:	4643      	mov	r3, r8
  402a52:	464a      	mov	r2, r9
  402a54:	bf28      	it	cs
  402a56:	463b      	movcs	r3, r7
  402a58:	9800      	ldr	r0, [sp, #0]
  402a5a:	f1b8 0f00 	cmp.w	r8, #0
  402a5e:	d050      	beq.n	402b02 <__sfvwrite_r+0xe2>
  402a60:	69e1      	ldr	r1, [r4, #28]
  402a62:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a64:	47b0      	blx	r6
  402a66:	2800      	cmp	r0, #0
  402a68:	dd58      	ble.n	402b1c <__sfvwrite_r+0xfc>
  402a6a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402a6e:	1a1b      	subs	r3, r3, r0
  402a70:	4481      	add	r9, r0
  402a72:	eba8 0800 	sub.w	r8, r8, r0
  402a76:	f8ca 3008 	str.w	r3, [sl, #8]
  402a7a:	2b00      	cmp	r3, #0
  402a7c:	d1e7      	bne.n	402a4e <__sfvwrite_r+0x2e>
  402a7e:	2000      	movs	r0, #0
  402a80:	b003      	add	sp, #12
  402a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a86:	4621      	mov	r1, r4
  402a88:	9800      	ldr	r0, [sp, #0]
  402a8a:	f7ff fc51 	bl	402330 <__swsetup_r>
  402a8e:	2800      	cmp	r0, #0
  402a90:	f040 8133 	bne.w	402cfa <__sfvwrite_r+0x2da>
  402a94:	89a3      	ldrh	r3, [r4, #12]
  402a96:	6835      	ldr	r5, [r6, #0]
  402a98:	f013 0002 	ands.w	r0, r3, #2
  402a9c:	d1d2      	bne.n	402a44 <__sfvwrite_r+0x24>
  402a9e:	f013 0901 	ands.w	r9, r3, #1
  402aa2:	d145      	bne.n	402b30 <__sfvwrite_r+0x110>
  402aa4:	464f      	mov	r7, r9
  402aa6:	9601      	str	r6, [sp, #4]
  402aa8:	b337      	cbz	r7, 402af8 <__sfvwrite_r+0xd8>
  402aaa:	059a      	lsls	r2, r3, #22
  402aac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402ab0:	f140 8083 	bpl.w	402bba <__sfvwrite_r+0x19a>
  402ab4:	4547      	cmp	r7, r8
  402ab6:	46c3      	mov	fp, r8
  402ab8:	f0c0 80ab 	bcc.w	402c12 <__sfvwrite_r+0x1f2>
  402abc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402ac0:	f040 80ac 	bne.w	402c1c <__sfvwrite_r+0x1fc>
  402ac4:	6820      	ldr	r0, [r4, #0]
  402ac6:	46ba      	mov	sl, r7
  402ac8:	465a      	mov	r2, fp
  402aca:	4649      	mov	r1, r9
  402acc:	f000 fd92 	bl	4035f4 <memmove>
  402ad0:	68a2      	ldr	r2, [r4, #8]
  402ad2:	6823      	ldr	r3, [r4, #0]
  402ad4:	eba2 0208 	sub.w	r2, r2, r8
  402ad8:	445b      	add	r3, fp
  402ada:	60a2      	str	r2, [r4, #8]
  402adc:	6023      	str	r3, [r4, #0]
  402ade:	9a01      	ldr	r2, [sp, #4]
  402ae0:	6893      	ldr	r3, [r2, #8]
  402ae2:	eba3 030a 	sub.w	r3, r3, sl
  402ae6:	44d1      	add	r9, sl
  402ae8:	eba7 070a 	sub.w	r7, r7, sl
  402aec:	6093      	str	r3, [r2, #8]
  402aee:	2b00      	cmp	r3, #0
  402af0:	d0c5      	beq.n	402a7e <__sfvwrite_r+0x5e>
  402af2:	89a3      	ldrh	r3, [r4, #12]
  402af4:	2f00      	cmp	r7, #0
  402af6:	d1d8      	bne.n	402aaa <__sfvwrite_r+0x8a>
  402af8:	f8d5 9000 	ldr.w	r9, [r5]
  402afc:	686f      	ldr	r7, [r5, #4]
  402afe:	3508      	adds	r5, #8
  402b00:	e7d2      	b.n	402aa8 <__sfvwrite_r+0x88>
  402b02:	f8d5 9000 	ldr.w	r9, [r5]
  402b06:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402b0a:	3508      	adds	r5, #8
  402b0c:	e79f      	b.n	402a4e <__sfvwrite_r+0x2e>
  402b0e:	2000      	movs	r0, #0
  402b10:	4770      	bx	lr
  402b12:	4621      	mov	r1, r4
  402b14:	9800      	ldr	r0, [sp, #0]
  402b16:	f7ff fd1f 	bl	402558 <_fflush_r>
  402b1a:	b370      	cbz	r0, 402b7a <__sfvwrite_r+0x15a>
  402b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b24:	f04f 30ff 	mov.w	r0, #4294967295
  402b28:	81a3      	strh	r3, [r4, #12]
  402b2a:	b003      	add	sp, #12
  402b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b30:	4681      	mov	r9, r0
  402b32:	4633      	mov	r3, r6
  402b34:	464e      	mov	r6, r9
  402b36:	46a8      	mov	r8, r5
  402b38:	469a      	mov	sl, r3
  402b3a:	464d      	mov	r5, r9
  402b3c:	b34e      	cbz	r6, 402b92 <__sfvwrite_r+0x172>
  402b3e:	b380      	cbz	r0, 402ba2 <__sfvwrite_r+0x182>
  402b40:	6820      	ldr	r0, [r4, #0]
  402b42:	6923      	ldr	r3, [r4, #16]
  402b44:	6962      	ldr	r2, [r4, #20]
  402b46:	45b1      	cmp	r9, r6
  402b48:	46cb      	mov	fp, r9
  402b4a:	bf28      	it	cs
  402b4c:	46b3      	movcs	fp, r6
  402b4e:	4298      	cmp	r0, r3
  402b50:	465f      	mov	r7, fp
  402b52:	d904      	bls.n	402b5e <__sfvwrite_r+0x13e>
  402b54:	68a3      	ldr	r3, [r4, #8]
  402b56:	4413      	add	r3, r2
  402b58:	459b      	cmp	fp, r3
  402b5a:	f300 80a6 	bgt.w	402caa <__sfvwrite_r+0x28a>
  402b5e:	4593      	cmp	fp, r2
  402b60:	db4b      	blt.n	402bfa <__sfvwrite_r+0x1da>
  402b62:	4613      	mov	r3, r2
  402b64:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402b66:	69e1      	ldr	r1, [r4, #28]
  402b68:	9800      	ldr	r0, [sp, #0]
  402b6a:	462a      	mov	r2, r5
  402b6c:	47b8      	blx	r7
  402b6e:	1e07      	subs	r7, r0, #0
  402b70:	ddd4      	ble.n	402b1c <__sfvwrite_r+0xfc>
  402b72:	ebb9 0907 	subs.w	r9, r9, r7
  402b76:	d0cc      	beq.n	402b12 <__sfvwrite_r+0xf2>
  402b78:	2001      	movs	r0, #1
  402b7a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402b7e:	1bdb      	subs	r3, r3, r7
  402b80:	443d      	add	r5, r7
  402b82:	1bf6      	subs	r6, r6, r7
  402b84:	f8ca 3008 	str.w	r3, [sl, #8]
  402b88:	2b00      	cmp	r3, #0
  402b8a:	f43f af78 	beq.w	402a7e <__sfvwrite_r+0x5e>
  402b8e:	2e00      	cmp	r6, #0
  402b90:	d1d5      	bne.n	402b3e <__sfvwrite_r+0x11e>
  402b92:	f108 0308 	add.w	r3, r8, #8
  402b96:	e913 0060 	ldmdb	r3, {r5, r6}
  402b9a:	4698      	mov	r8, r3
  402b9c:	3308      	adds	r3, #8
  402b9e:	2e00      	cmp	r6, #0
  402ba0:	d0f9      	beq.n	402b96 <__sfvwrite_r+0x176>
  402ba2:	4632      	mov	r2, r6
  402ba4:	210a      	movs	r1, #10
  402ba6:	4628      	mov	r0, r5
  402ba8:	f000 fc3a 	bl	403420 <memchr>
  402bac:	2800      	cmp	r0, #0
  402bae:	f000 80a1 	beq.w	402cf4 <__sfvwrite_r+0x2d4>
  402bb2:	3001      	adds	r0, #1
  402bb4:	eba0 0905 	sub.w	r9, r0, r5
  402bb8:	e7c2      	b.n	402b40 <__sfvwrite_r+0x120>
  402bba:	6820      	ldr	r0, [r4, #0]
  402bbc:	6923      	ldr	r3, [r4, #16]
  402bbe:	4298      	cmp	r0, r3
  402bc0:	d802      	bhi.n	402bc8 <__sfvwrite_r+0x1a8>
  402bc2:	6963      	ldr	r3, [r4, #20]
  402bc4:	429f      	cmp	r7, r3
  402bc6:	d25d      	bcs.n	402c84 <__sfvwrite_r+0x264>
  402bc8:	45b8      	cmp	r8, r7
  402bca:	bf28      	it	cs
  402bcc:	46b8      	movcs	r8, r7
  402bce:	4642      	mov	r2, r8
  402bd0:	4649      	mov	r1, r9
  402bd2:	f000 fd0f 	bl	4035f4 <memmove>
  402bd6:	68a3      	ldr	r3, [r4, #8]
  402bd8:	6822      	ldr	r2, [r4, #0]
  402bda:	eba3 0308 	sub.w	r3, r3, r8
  402bde:	4442      	add	r2, r8
  402be0:	60a3      	str	r3, [r4, #8]
  402be2:	6022      	str	r2, [r4, #0]
  402be4:	b10b      	cbz	r3, 402bea <__sfvwrite_r+0x1ca>
  402be6:	46c2      	mov	sl, r8
  402be8:	e779      	b.n	402ade <__sfvwrite_r+0xbe>
  402bea:	4621      	mov	r1, r4
  402bec:	9800      	ldr	r0, [sp, #0]
  402bee:	f7ff fcb3 	bl	402558 <_fflush_r>
  402bf2:	2800      	cmp	r0, #0
  402bf4:	d192      	bne.n	402b1c <__sfvwrite_r+0xfc>
  402bf6:	46c2      	mov	sl, r8
  402bf8:	e771      	b.n	402ade <__sfvwrite_r+0xbe>
  402bfa:	465a      	mov	r2, fp
  402bfc:	4629      	mov	r1, r5
  402bfe:	f000 fcf9 	bl	4035f4 <memmove>
  402c02:	68a2      	ldr	r2, [r4, #8]
  402c04:	6823      	ldr	r3, [r4, #0]
  402c06:	eba2 020b 	sub.w	r2, r2, fp
  402c0a:	445b      	add	r3, fp
  402c0c:	60a2      	str	r2, [r4, #8]
  402c0e:	6023      	str	r3, [r4, #0]
  402c10:	e7af      	b.n	402b72 <__sfvwrite_r+0x152>
  402c12:	6820      	ldr	r0, [r4, #0]
  402c14:	46b8      	mov	r8, r7
  402c16:	46ba      	mov	sl, r7
  402c18:	46bb      	mov	fp, r7
  402c1a:	e755      	b.n	402ac8 <__sfvwrite_r+0xa8>
  402c1c:	6962      	ldr	r2, [r4, #20]
  402c1e:	6820      	ldr	r0, [r4, #0]
  402c20:	6921      	ldr	r1, [r4, #16]
  402c22:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402c26:	eba0 0a01 	sub.w	sl, r0, r1
  402c2a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402c2e:	f10a 0001 	add.w	r0, sl, #1
  402c32:	ea4f 0868 	mov.w	r8, r8, asr #1
  402c36:	4438      	add	r0, r7
  402c38:	4540      	cmp	r0, r8
  402c3a:	4642      	mov	r2, r8
  402c3c:	bf84      	itt	hi
  402c3e:	4680      	movhi	r8, r0
  402c40:	4642      	movhi	r2, r8
  402c42:	055b      	lsls	r3, r3, #21
  402c44:	d544      	bpl.n	402cd0 <__sfvwrite_r+0x2b0>
  402c46:	4611      	mov	r1, r2
  402c48:	9800      	ldr	r0, [sp, #0]
  402c4a:	f000 f921 	bl	402e90 <_malloc_r>
  402c4e:	4683      	mov	fp, r0
  402c50:	2800      	cmp	r0, #0
  402c52:	d055      	beq.n	402d00 <__sfvwrite_r+0x2e0>
  402c54:	4652      	mov	r2, sl
  402c56:	6921      	ldr	r1, [r4, #16]
  402c58:	f000 fc32 	bl	4034c0 <memcpy>
  402c5c:	89a3      	ldrh	r3, [r4, #12]
  402c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c66:	81a3      	strh	r3, [r4, #12]
  402c68:	eb0b 000a 	add.w	r0, fp, sl
  402c6c:	eba8 030a 	sub.w	r3, r8, sl
  402c70:	f8c4 b010 	str.w	fp, [r4, #16]
  402c74:	f8c4 8014 	str.w	r8, [r4, #20]
  402c78:	6020      	str	r0, [r4, #0]
  402c7a:	60a3      	str	r3, [r4, #8]
  402c7c:	46b8      	mov	r8, r7
  402c7e:	46ba      	mov	sl, r7
  402c80:	46bb      	mov	fp, r7
  402c82:	e721      	b.n	402ac8 <__sfvwrite_r+0xa8>
  402c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402c88:	42b9      	cmp	r1, r7
  402c8a:	bf28      	it	cs
  402c8c:	4639      	movcs	r1, r7
  402c8e:	464a      	mov	r2, r9
  402c90:	fb91 f1f3 	sdiv	r1, r1, r3
  402c94:	9800      	ldr	r0, [sp, #0]
  402c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402c98:	fb03 f301 	mul.w	r3, r3, r1
  402c9c:	69e1      	ldr	r1, [r4, #28]
  402c9e:	47b0      	blx	r6
  402ca0:	f1b0 0a00 	subs.w	sl, r0, #0
  402ca4:	f73f af1b 	bgt.w	402ade <__sfvwrite_r+0xbe>
  402ca8:	e738      	b.n	402b1c <__sfvwrite_r+0xfc>
  402caa:	461a      	mov	r2, r3
  402cac:	4629      	mov	r1, r5
  402cae:	9301      	str	r3, [sp, #4]
  402cb0:	f000 fca0 	bl	4035f4 <memmove>
  402cb4:	6822      	ldr	r2, [r4, #0]
  402cb6:	9b01      	ldr	r3, [sp, #4]
  402cb8:	9800      	ldr	r0, [sp, #0]
  402cba:	441a      	add	r2, r3
  402cbc:	6022      	str	r2, [r4, #0]
  402cbe:	4621      	mov	r1, r4
  402cc0:	f7ff fc4a 	bl	402558 <_fflush_r>
  402cc4:	9b01      	ldr	r3, [sp, #4]
  402cc6:	2800      	cmp	r0, #0
  402cc8:	f47f af28 	bne.w	402b1c <__sfvwrite_r+0xfc>
  402ccc:	461f      	mov	r7, r3
  402cce:	e750      	b.n	402b72 <__sfvwrite_r+0x152>
  402cd0:	9800      	ldr	r0, [sp, #0]
  402cd2:	f000 fcff 	bl	4036d4 <_realloc_r>
  402cd6:	4683      	mov	fp, r0
  402cd8:	2800      	cmp	r0, #0
  402cda:	d1c5      	bne.n	402c68 <__sfvwrite_r+0x248>
  402cdc:	9d00      	ldr	r5, [sp, #0]
  402cde:	6921      	ldr	r1, [r4, #16]
  402ce0:	4628      	mov	r0, r5
  402ce2:	f7ff fdb7 	bl	402854 <_free_r>
  402ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cea:	220c      	movs	r2, #12
  402cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402cf0:	602a      	str	r2, [r5, #0]
  402cf2:	e715      	b.n	402b20 <__sfvwrite_r+0x100>
  402cf4:	f106 0901 	add.w	r9, r6, #1
  402cf8:	e722      	b.n	402b40 <__sfvwrite_r+0x120>
  402cfa:	f04f 30ff 	mov.w	r0, #4294967295
  402cfe:	e6bf      	b.n	402a80 <__sfvwrite_r+0x60>
  402d00:	9a00      	ldr	r2, [sp, #0]
  402d02:	230c      	movs	r3, #12
  402d04:	6013      	str	r3, [r2, #0]
  402d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d0a:	e709      	b.n	402b20 <__sfvwrite_r+0x100>
  402d0c:	7ffffc00 	.word	0x7ffffc00

00402d10 <_fwalk_reent>:
  402d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402d18:	d01f      	beq.n	402d5a <_fwalk_reent+0x4a>
  402d1a:	4688      	mov	r8, r1
  402d1c:	4606      	mov	r6, r0
  402d1e:	f04f 0900 	mov.w	r9, #0
  402d22:	687d      	ldr	r5, [r7, #4]
  402d24:	68bc      	ldr	r4, [r7, #8]
  402d26:	3d01      	subs	r5, #1
  402d28:	d411      	bmi.n	402d4e <_fwalk_reent+0x3e>
  402d2a:	89a3      	ldrh	r3, [r4, #12]
  402d2c:	2b01      	cmp	r3, #1
  402d2e:	f105 35ff 	add.w	r5, r5, #4294967295
  402d32:	d908      	bls.n	402d46 <_fwalk_reent+0x36>
  402d34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402d38:	3301      	adds	r3, #1
  402d3a:	4621      	mov	r1, r4
  402d3c:	4630      	mov	r0, r6
  402d3e:	d002      	beq.n	402d46 <_fwalk_reent+0x36>
  402d40:	47c0      	blx	r8
  402d42:	ea49 0900 	orr.w	r9, r9, r0
  402d46:	1c6b      	adds	r3, r5, #1
  402d48:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402d4c:	d1ed      	bne.n	402d2a <_fwalk_reent+0x1a>
  402d4e:	683f      	ldr	r7, [r7, #0]
  402d50:	2f00      	cmp	r7, #0
  402d52:	d1e6      	bne.n	402d22 <_fwalk_reent+0x12>
  402d54:	4648      	mov	r0, r9
  402d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d5a:	46b9      	mov	r9, r7
  402d5c:	4648      	mov	r0, r9
  402d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d62:	bf00      	nop

00402d64 <__locale_mb_cur_max>:
  402d64:	4b04      	ldr	r3, [pc, #16]	; (402d78 <__locale_mb_cur_max+0x14>)
  402d66:	4a05      	ldr	r2, [pc, #20]	; (402d7c <__locale_mb_cur_max+0x18>)
  402d68:	681b      	ldr	r3, [r3, #0]
  402d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402d6c:	2b00      	cmp	r3, #0
  402d6e:	bf08      	it	eq
  402d70:	4613      	moveq	r3, r2
  402d72:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402d76:	4770      	bx	lr
  402d78:	20400024 	.word	0x20400024
  402d7c:	20400454 	.word	0x20400454

00402d80 <__retarget_lock_init_recursive>:
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop

00402d84 <__retarget_lock_close_recursive>:
  402d84:	4770      	bx	lr
  402d86:	bf00      	nop

00402d88 <__retarget_lock_acquire_recursive>:
  402d88:	4770      	bx	lr
  402d8a:	bf00      	nop

00402d8c <__retarget_lock_release_recursive>:
  402d8c:	4770      	bx	lr
  402d8e:	bf00      	nop

00402d90 <__swhatbuf_r>:
  402d90:	b570      	push	{r4, r5, r6, lr}
  402d92:	460c      	mov	r4, r1
  402d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d98:	2900      	cmp	r1, #0
  402d9a:	b090      	sub	sp, #64	; 0x40
  402d9c:	4615      	mov	r5, r2
  402d9e:	461e      	mov	r6, r3
  402da0:	db14      	blt.n	402dcc <__swhatbuf_r+0x3c>
  402da2:	aa01      	add	r2, sp, #4
  402da4:	f001 f80e 	bl	403dc4 <_fstat_r>
  402da8:	2800      	cmp	r0, #0
  402daa:	db0f      	blt.n	402dcc <__swhatbuf_r+0x3c>
  402dac:	9a02      	ldr	r2, [sp, #8]
  402dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402db2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402db6:	fab2 f282 	clz	r2, r2
  402dba:	0952      	lsrs	r2, r2, #5
  402dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402dc4:	6032      	str	r2, [r6, #0]
  402dc6:	602b      	str	r3, [r5, #0]
  402dc8:	b010      	add	sp, #64	; 0x40
  402dca:	bd70      	pop	{r4, r5, r6, pc}
  402dcc:	89a2      	ldrh	r2, [r4, #12]
  402dce:	2300      	movs	r3, #0
  402dd0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402dd4:	6033      	str	r3, [r6, #0]
  402dd6:	d004      	beq.n	402de2 <__swhatbuf_r+0x52>
  402dd8:	2240      	movs	r2, #64	; 0x40
  402dda:	4618      	mov	r0, r3
  402ddc:	602a      	str	r2, [r5, #0]
  402dde:	b010      	add	sp, #64	; 0x40
  402de0:	bd70      	pop	{r4, r5, r6, pc}
  402de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402de6:	602b      	str	r3, [r5, #0]
  402de8:	b010      	add	sp, #64	; 0x40
  402dea:	bd70      	pop	{r4, r5, r6, pc}

00402dec <__smakebuf_r>:
  402dec:	898a      	ldrh	r2, [r1, #12]
  402dee:	0792      	lsls	r2, r2, #30
  402df0:	460b      	mov	r3, r1
  402df2:	d506      	bpl.n	402e02 <__smakebuf_r+0x16>
  402df4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402df8:	2101      	movs	r1, #1
  402dfa:	601a      	str	r2, [r3, #0]
  402dfc:	611a      	str	r2, [r3, #16]
  402dfe:	6159      	str	r1, [r3, #20]
  402e00:	4770      	bx	lr
  402e02:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e04:	b083      	sub	sp, #12
  402e06:	ab01      	add	r3, sp, #4
  402e08:	466a      	mov	r2, sp
  402e0a:	460c      	mov	r4, r1
  402e0c:	4606      	mov	r6, r0
  402e0e:	f7ff ffbf 	bl	402d90 <__swhatbuf_r>
  402e12:	9900      	ldr	r1, [sp, #0]
  402e14:	4605      	mov	r5, r0
  402e16:	4630      	mov	r0, r6
  402e18:	f000 f83a 	bl	402e90 <_malloc_r>
  402e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e20:	b1d8      	cbz	r0, 402e5a <__smakebuf_r+0x6e>
  402e22:	9a01      	ldr	r2, [sp, #4]
  402e24:	4f15      	ldr	r7, [pc, #84]	; (402e7c <__smakebuf_r+0x90>)
  402e26:	9900      	ldr	r1, [sp, #0]
  402e28:	63f7      	str	r7, [r6, #60]	; 0x3c
  402e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402e2e:	81a3      	strh	r3, [r4, #12]
  402e30:	6020      	str	r0, [r4, #0]
  402e32:	6120      	str	r0, [r4, #16]
  402e34:	6161      	str	r1, [r4, #20]
  402e36:	b91a      	cbnz	r2, 402e40 <__smakebuf_r+0x54>
  402e38:	432b      	orrs	r3, r5
  402e3a:	81a3      	strh	r3, [r4, #12]
  402e3c:	b003      	add	sp, #12
  402e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e40:	4630      	mov	r0, r6
  402e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402e46:	f000 ffd1 	bl	403dec <_isatty_r>
  402e4a:	b1a0      	cbz	r0, 402e76 <__smakebuf_r+0x8a>
  402e4c:	89a3      	ldrh	r3, [r4, #12]
  402e4e:	f023 0303 	bic.w	r3, r3, #3
  402e52:	f043 0301 	orr.w	r3, r3, #1
  402e56:	b21b      	sxth	r3, r3
  402e58:	e7ee      	b.n	402e38 <__smakebuf_r+0x4c>
  402e5a:	059a      	lsls	r2, r3, #22
  402e5c:	d4ee      	bmi.n	402e3c <__smakebuf_r+0x50>
  402e5e:	f023 0303 	bic.w	r3, r3, #3
  402e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402e66:	f043 0302 	orr.w	r3, r3, #2
  402e6a:	2101      	movs	r1, #1
  402e6c:	81a3      	strh	r3, [r4, #12]
  402e6e:	6022      	str	r2, [r4, #0]
  402e70:	6122      	str	r2, [r4, #16]
  402e72:	6161      	str	r1, [r4, #20]
  402e74:	e7e2      	b.n	402e3c <__smakebuf_r+0x50>
  402e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e7a:	e7dd      	b.n	402e38 <__smakebuf_r+0x4c>
  402e7c:	004025ad 	.word	0x004025ad

00402e80 <malloc>:
  402e80:	4b02      	ldr	r3, [pc, #8]	; (402e8c <malloc+0xc>)
  402e82:	4601      	mov	r1, r0
  402e84:	6818      	ldr	r0, [r3, #0]
  402e86:	f000 b803 	b.w	402e90 <_malloc_r>
  402e8a:	bf00      	nop
  402e8c:	20400024 	.word	0x20400024

00402e90 <_malloc_r>:
  402e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e94:	f101 060b 	add.w	r6, r1, #11
  402e98:	2e16      	cmp	r6, #22
  402e9a:	b083      	sub	sp, #12
  402e9c:	4605      	mov	r5, r0
  402e9e:	f240 809e 	bls.w	402fde <_malloc_r+0x14e>
  402ea2:	f036 0607 	bics.w	r6, r6, #7
  402ea6:	f100 80bd 	bmi.w	403024 <_malloc_r+0x194>
  402eaa:	42b1      	cmp	r1, r6
  402eac:	f200 80ba 	bhi.w	403024 <_malloc_r+0x194>
  402eb0:	f000 fc04 	bl	4036bc <__malloc_lock>
  402eb4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402eb8:	f0c0 8293 	bcc.w	4033e2 <_malloc_r+0x552>
  402ebc:	0a73      	lsrs	r3, r6, #9
  402ebe:	f000 80b8 	beq.w	403032 <_malloc_r+0x1a2>
  402ec2:	2b04      	cmp	r3, #4
  402ec4:	f200 8179 	bhi.w	4031ba <_malloc_r+0x32a>
  402ec8:	09b3      	lsrs	r3, r6, #6
  402eca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402ece:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402ed2:	00c3      	lsls	r3, r0, #3
  402ed4:	4fbf      	ldr	r7, [pc, #764]	; (4031d4 <_malloc_r+0x344>)
  402ed6:	443b      	add	r3, r7
  402ed8:	f1a3 0108 	sub.w	r1, r3, #8
  402edc:	685c      	ldr	r4, [r3, #4]
  402ede:	42a1      	cmp	r1, r4
  402ee0:	d106      	bne.n	402ef0 <_malloc_r+0x60>
  402ee2:	e00c      	b.n	402efe <_malloc_r+0x6e>
  402ee4:	2a00      	cmp	r2, #0
  402ee6:	f280 80aa 	bge.w	40303e <_malloc_r+0x1ae>
  402eea:	68e4      	ldr	r4, [r4, #12]
  402eec:	42a1      	cmp	r1, r4
  402eee:	d006      	beq.n	402efe <_malloc_r+0x6e>
  402ef0:	6863      	ldr	r3, [r4, #4]
  402ef2:	f023 0303 	bic.w	r3, r3, #3
  402ef6:	1b9a      	subs	r2, r3, r6
  402ef8:	2a0f      	cmp	r2, #15
  402efa:	ddf3      	ble.n	402ee4 <_malloc_r+0x54>
  402efc:	4670      	mov	r0, lr
  402efe:	693c      	ldr	r4, [r7, #16]
  402f00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4031e8 <_malloc_r+0x358>
  402f04:	4574      	cmp	r4, lr
  402f06:	f000 81ab 	beq.w	403260 <_malloc_r+0x3d0>
  402f0a:	6863      	ldr	r3, [r4, #4]
  402f0c:	f023 0303 	bic.w	r3, r3, #3
  402f10:	1b9a      	subs	r2, r3, r6
  402f12:	2a0f      	cmp	r2, #15
  402f14:	f300 8190 	bgt.w	403238 <_malloc_r+0x3a8>
  402f18:	2a00      	cmp	r2, #0
  402f1a:	f8c7 e014 	str.w	lr, [r7, #20]
  402f1e:	f8c7 e010 	str.w	lr, [r7, #16]
  402f22:	f280 809d 	bge.w	403060 <_malloc_r+0x1d0>
  402f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402f2a:	f080 8161 	bcs.w	4031f0 <_malloc_r+0x360>
  402f2e:	08db      	lsrs	r3, r3, #3
  402f30:	f103 0c01 	add.w	ip, r3, #1
  402f34:	1099      	asrs	r1, r3, #2
  402f36:	687a      	ldr	r2, [r7, #4]
  402f38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402f3c:	f8c4 8008 	str.w	r8, [r4, #8]
  402f40:	2301      	movs	r3, #1
  402f42:	408b      	lsls	r3, r1
  402f44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402f48:	4313      	orrs	r3, r2
  402f4a:	3908      	subs	r1, #8
  402f4c:	60e1      	str	r1, [r4, #12]
  402f4e:	607b      	str	r3, [r7, #4]
  402f50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402f54:	f8c8 400c 	str.w	r4, [r8, #12]
  402f58:	1082      	asrs	r2, r0, #2
  402f5a:	2401      	movs	r4, #1
  402f5c:	4094      	lsls	r4, r2
  402f5e:	429c      	cmp	r4, r3
  402f60:	f200 808b 	bhi.w	40307a <_malloc_r+0x1ea>
  402f64:	421c      	tst	r4, r3
  402f66:	d106      	bne.n	402f76 <_malloc_r+0xe6>
  402f68:	f020 0003 	bic.w	r0, r0, #3
  402f6c:	0064      	lsls	r4, r4, #1
  402f6e:	421c      	tst	r4, r3
  402f70:	f100 0004 	add.w	r0, r0, #4
  402f74:	d0fa      	beq.n	402f6c <_malloc_r+0xdc>
  402f76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402f7a:	46cc      	mov	ip, r9
  402f7c:	4680      	mov	r8, r0
  402f7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402f82:	459c      	cmp	ip, r3
  402f84:	d107      	bne.n	402f96 <_malloc_r+0x106>
  402f86:	e16d      	b.n	403264 <_malloc_r+0x3d4>
  402f88:	2a00      	cmp	r2, #0
  402f8a:	f280 817b 	bge.w	403284 <_malloc_r+0x3f4>
  402f8e:	68db      	ldr	r3, [r3, #12]
  402f90:	459c      	cmp	ip, r3
  402f92:	f000 8167 	beq.w	403264 <_malloc_r+0x3d4>
  402f96:	6859      	ldr	r1, [r3, #4]
  402f98:	f021 0103 	bic.w	r1, r1, #3
  402f9c:	1b8a      	subs	r2, r1, r6
  402f9e:	2a0f      	cmp	r2, #15
  402fa0:	ddf2      	ble.n	402f88 <_malloc_r+0xf8>
  402fa2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402fa6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402faa:	9300      	str	r3, [sp, #0]
  402fac:	199c      	adds	r4, r3, r6
  402fae:	4628      	mov	r0, r5
  402fb0:	f046 0601 	orr.w	r6, r6, #1
  402fb4:	f042 0501 	orr.w	r5, r2, #1
  402fb8:	605e      	str	r6, [r3, #4]
  402fba:	f8c8 c00c 	str.w	ip, [r8, #12]
  402fbe:	f8cc 8008 	str.w	r8, [ip, #8]
  402fc2:	617c      	str	r4, [r7, #20]
  402fc4:	613c      	str	r4, [r7, #16]
  402fc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  402fca:	f8c4 e008 	str.w	lr, [r4, #8]
  402fce:	6065      	str	r5, [r4, #4]
  402fd0:	505a      	str	r2, [r3, r1]
  402fd2:	f000 fb79 	bl	4036c8 <__malloc_unlock>
  402fd6:	9b00      	ldr	r3, [sp, #0]
  402fd8:	f103 0408 	add.w	r4, r3, #8
  402fdc:	e01e      	b.n	40301c <_malloc_r+0x18c>
  402fde:	2910      	cmp	r1, #16
  402fe0:	d820      	bhi.n	403024 <_malloc_r+0x194>
  402fe2:	f000 fb6b 	bl	4036bc <__malloc_lock>
  402fe6:	2610      	movs	r6, #16
  402fe8:	2318      	movs	r3, #24
  402fea:	2002      	movs	r0, #2
  402fec:	4f79      	ldr	r7, [pc, #484]	; (4031d4 <_malloc_r+0x344>)
  402fee:	443b      	add	r3, r7
  402ff0:	f1a3 0208 	sub.w	r2, r3, #8
  402ff4:	685c      	ldr	r4, [r3, #4]
  402ff6:	4294      	cmp	r4, r2
  402ff8:	f000 813d 	beq.w	403276 <_malloc_r+0x3e6>
  402ffc:	6863      	ldr	r3, [r4, #4]
  402ffe:	68e1      	ldr	r1, [r4, #12]
  403000:	68a6      	ldr	r6, [r4, #8]
  403002:	f023 0303 	bic.w	r3, r3, #3
  403006:	4423      	add	r3, r4
  403008:	4628      	mov	r0, r5
  40300a:	685a      	ldr	r2, [r3, #4]
  40300c:	60f1      	str	r1, [r6, #12]
  40300e:	f042 0201 	orr.w	r2, r2, #1
  403012:	608e      	str	r6, [r1, #8]
  403014:	605a      	str	r2, [r3, #4]
  403016:	f000 fb57 	bl	4036c8 <__malloc_unlock>
  40301a:	3408      	adds	r4, #8
  40301c:	4620      	mov	r0, r4
  40301e:	b003      	add	sp, #12
  403020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403024:	2400      	movs	r4, #0
  403026:	230c      	movs	r3, #12
  403028:	4620      	mov	r0, r4
  40302a:	602b      	str	r3, [r5, #0]
  40302c:	b003      	add	sp, #12
  40302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403032:	2040      	movs	r0, #64	; 0x40
  403034:	f44f 7300 	mov.w	r3, #512	; 0x200
  403038:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40303c:	e74a      	b.n	402ed4 <_malloc_r+0x44>
  40303e:	4423      	add	r3, r4
  403040:	68e1      	ldr	r1, [r4, #12]
  403042:	685a      	ldr	r2, [r3, #4]
  403044:	68a6      	ldr	r6, [r4, #8]
  403046:	f042 0201 	orr.w	r2, r2, #1
  40304a:	60f1      	str	r1, [r6, #12]
  40304c:	4628      	mov	r0, r5
  40304e:	608e      	str	r6, [r1, #8]
  403050:	605a      	str	r2, [r3, #4]
  403052:	f000 fb39 	bl	4036c8 <__malloc_unlock>
  403056:	3408      	adds	r4, #8
  403058:	4620      	mov	r0, r4
  40305a:	b003      	add	sp, #12
  40305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403060:	4423      	add	r3, r4
  403062:	4628      	mov	r0, r5
  403064:	685a      	ldr	r2, [r3, #4]
  403066:	f042 0201 	orr.w	r2, r2, #1
  40306a:	605a      	str	r2, [r3, #4]
  40306c:	f000 fb2c 	bl	4036c8 <__malloc_unlock>
  403070:	3408      	adds	r4, #8
  403072:	4620      	mov	r0, r4
  403074:	b003      	add	sp, #12
  403076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40307a:	68bc      	ldr	r4, [r7, #8]
  40307c:	6863      	ldr	r3, [r4, #4]
  40307e:	f023 0803 	bic.w	r8, r3, #3
  403082:	45b0      	cmp	r8, r6
  403084:	d304      	bcc.n	403090 <_malloc_r+0x200>
  403086:	eba8 0306 	sub.w	r3, r8, r6
  40308a:	2b0f      	cmp	r3, #15
  40308c:	f300 8085 	bgt.w	40319a <_malloc_r+0x30a>
  403090:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4031ec <_malloc_r+0x35c>
  403094:	4b50      	ldr	r3, [pc, #320]	; (4031d8 <_malloc_r+0x348>)
  403096:	f8d9 2000 	ldr.w	r2, [r9]
  40309a:	681b      	ldr	r3, [r3, #0]
  40309c:	3201      	adds	r2, #1
  40309e:	4433      	add	r3, r6
  4030a0:	eb04 0a08 	add.w	sl, r4, r8
  4030a4:	f000 8155 	beq.w	403352 <_malloc_r+0x4c2>
  4030a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4030ac:	330f      	adds	r3, #15
  4030ae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4030b2:	f02b 0b0f 	bic.w	fp, fp, #15
  4030b6:	4659      	mov	r1, fp
  4030b8:	4628      	mov	r0, r5
  4030ba:	f000 fcb1 	bl	403a20 <_sbrk_r>
  4030be:	1c41      	adds	r1, r0, #1
  4030c0:	4602      	mov	r2, r0
  4030c2:	f000 80fc 	beq.w	4032be <_malloc_r+0x42e>
  4030c6:	4582      	cmp	sl, r0
  4030c8:	f200 80f7 	bhi.w	4032ba <_malloc_r+0x42a>
  4030cc:	4b43      	ldr	r3, [pc, #268]	; (4031dc <_malloc_r+0x34c>)
  4030ce:	6819      	ldr	r1, [r3, #0]
  4030d0:	4459      	add	r1, fp
  4030d2:	6019      	str	r1, [r3, #0]
  4030d4:	f000 814d 	beq.w	403372 <_malloc_r+0x4e2>
  4030d8:	f8d9 0000 	ldr.w	r0, [r9]
  4030dc:	3001      	adds	r0, #1
  4030de:	bf1b      	ittet	ne
  4030e0:	eba2 0a0a 	subne.w	sl, r2, sl
  4030e4:	4451      	addne	r1, sl
  4030e6:	f8c9 2000 	streq.w	r2, [r9]
  4030ea:	6019      	strne	r1, [r3, #0]
  4030ec:	f012 0107 	ands.w	r1, r2, #7
  4030f0:	f000 8115 	beq.w	40331e <_malloc_r+0x48e>
  4030f4:	f1c1 0008 	rsb	r0, r1, #8
  4030f8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4030fc:	4402      	add	r2, r0
  4030fe:	3108      	adds	r1, #8
  403100:	eb02 090b 	add.w	r9, r2, fp
  403104:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403108:	eba1 0909 	sub.w	r9, r1, r9
  40310c:	4649      	mov	r1, r9
  40310e:	4628      	mov	r0, r5
  403110:	9301      	str	r3, [sp, #4]
  403112:	9200      	str	r2, [sp, #0]
  403114:	f000 fc84 	bl	403a20 <_sbrk_r>
  403118:	1c43      	adds	r3, r0, #1
  40311a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40311e:	f000 8143 	beq.w	4033a8 <_malloc_r+0x518>
  403122:	1a80      	subs	r0, r0, r2
  403124:	4448      	add	r0, r9
  403126:	f040 0001 	orr.w	r0, r0, #1
  40312a:	6819      	ldr	r1, [r3, #0]
  40312c:	60ba      	str	r2, [r7, #8]
  40312e:	4449      	add	r1, r9
  403130:	42bc      	cmp	r4, r7
  403132:	6050      	str	r0, [r2, #4]
  403134:	6019      	str	r1, [r3, #0]
  403136:	d017      	beq.n	403168 <_malloc_r+0x2d8>
  403138:	f1b8 0f0f 	cmp.w	r8, #15
  40313c:	f240 80fb 	bls.w	403336 <_malloc_r+0x4a6>
  403140:	6860      	ldr	r0, [r4, #4]
  403142:	f1a8 020c 	sub.w	r2, r8, #12
  403146:	f022 0207 	bic.w	r2, r2, #7
  40314a:	eb04 0e02 	add.w	lr, r4, r2
  40314e:	f000 0001 	and.w	r0, r0, #1
  403152:	f04f 0c05 	mov.w	ip, #5
  403156:	4310      	orrs	r0, r2
  403158:	2a0f      	cmp	r2, #15
  40315a:	6060      	str	r0, [r4, #4]
  40315c:	f8ce c004 	str.w	ip, [lr, #4]
  403160:	f8ce c008 	str.w	ip, [lr, #8]
  403164:	f200 8117 	bhi.w	403396 <_malloc_r+0x506>
  403168:	4b1d      	ldr	r3, [pc, #116]	; (4031e0 <_malloc_r+0x350>)
  40316a:	68bc      	ldr	r4, [r7, #8]
  40316c:	681a      	ldr	r2, [r3, #0]
  40316e:	4291      	cmp	r1, r2
  403170:	bf88      	it	hi
  403172:	6019      	strhi	r1, [r3, #0]
  403174:	4b1b      	ldr	r3, [pc, #108]	; (4031e4 <_malloc_r+0x354>)
  403176:	681a      	ldr	r2, [r3, #0]
  403178:	4291      	cmp	r1, r2
  40317a:	6862      	ldr	r2, [r4, #4]
  40317c:	bf88      	it	hi
  40317e:	6019      	strhi	r1, [r3, #0]
  403180:	f022 0203 	bic.w	r2, r2, #3
  403184:	4296      	cmp	r6, r2
  403186:	eba2 0306 	sub.w	r3, r2, r6
  40318a:	d801      	bhi.n	403190 <_malloc_r+0x300>
  40318c:	2b0f      	cmp	r3, #15
  40318e:	dc04      	bgt.n	40319a <_malloc_r+0x30a>
  403190:	4628      	mov	r0, r5
  403192:	f000 fa99 	bl	4036c8 <__malloc_unlock>
  403196:	2400      	movs	r4, #0
  403198:	e740      	b.n	40301c <_malloc_r+0x18c>
  40319a:	19a2      	adds	r2, r4, r6
  40319c:	f043 0301 	orr.w	r3, r3, #1
  4031a0:	f046 0601 	orr.w	r6, r6, #1
  4031a4:	6066      	str	r6, [r4, #4]
  4031a6:	4628      	mov	r0, r5
  4031a8:	60ba      	str	r2, [r7, #8]
  4031aa:	6053      	str	r3, [r2, #4]
  4031ac:	f000 fa8c 	bl	4036c8 <__malloc_unlock>
  4031b0:	3408      	adds	r4, #8
  4031b2:	4620      	mov	r0, r4
  4031b4:	b003      	add	sp, #12
  4031b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031ba:	2b14      	cmp	r3, #20
  4031bc:	d971      	bls.n	4032a2 <_malloc_r+0x412>
  4031be:	2b54      	cmp	r3, #84	; 0x54
  4031c0:	f200 80a3 	bhi.w	40330a <_malloc_r+0x47a>
  4031c4:	0b33      	lsrs	r3, r6, #12
  4031c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4031ca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4031ce:	00c3      	lsls	r3, r0, #3
  4031d0:	e680      	b.n	402ed4 <_malloc_r+0x44>
  4031d2:	bf00      	nop
  4031d4:	204005c0 	.word	0x204005c0
  4031d8:	20400aa0 	.word	0x20400aa0
  4031dc:	20400a70 	.word	0x20400a70
  4031e0:	20400a98 	.word	0x20400a98
  4031e4:	20400a9c 	.word	0x20400a9c
  4031e8:	204005c8 	.word	0x204005c8
  4031ec:	204009c8 	.word	0x204009c8
  4031f0:	0a5a      	lsrs	r2, r3, #9
  4031f2:	2a04      	cmp	r2, #4
  4031f4:	d95b      	bls.n	4032ae <_malloc_r+0x41e>
  4031f6:	2a14      	cmp	r2, #20
  4031f8:	f200 80ae 	bhi.w	403358 <_malloc_r+0x4c8>
  4031fc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403200:	00c9      	lsls	r1, r1, #3
  403202:	325b      	adds	r2, #91	; 0x5b
  403204:	eb07 0c01 	add.w	ip, r7, r1
  403208:	5879      	ldr	r1, [r7, r1]
  40320a:	f1ac 0c08 	sub.w	ip, ip, #8
  40320e:	458c      	cmp	ip, r1
  403210:	f000 8088 	beq.w	403324 <_malloc_r+0x494>
  403214:	684a      	ldr	r2, [r1, #4]
  403216:	f022 0203 	bic.w	r2, r2, #3
  40321a:	4293      	cmp	r3, r2
  40321c:	d273      	bcs.n	403306 <_malloc_r+0x476>
  40321e:	6889      	ldr	r1, [r1, #8]
  403220:	458c      	cmp	ip, r1
  403222:	d1f7      	bne.n	403214 <_malloc_r+0x384>
  403224:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403228:	687b      	ldr	r3, [r7, #4]
  40322a:	60e2      	str	r2, [r4, #12]
  40322c:	f8c4 c008 	str.w	ip, [r4, #8]
  403230:	6094      	str	r4, [r2, #8]
  403232:	f8cc 400c 	str.w	r4, [ip, #12]
  403236:	e68f      	b.n	402f58 <_malloc_r+0xc8>
  403238:	19a1      	adds	r1, r4, r6
  40323a:	f046 0c01 	orr.w	ip, r6, #1
  40323e:	f042 0601 	orr.w	r6, r2, #1
  403242:	f8c4 c004 	str.w	ip, [r4, #4]
  403246:	4628      	mov	r0, r5
  403248:	6179      	str	r1, [r7, #20]
  40324a:	6139      	str	r1, [r7, #16]
  40324c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403250:	f8c1 e008 	str.w	lr, [r1, #8]
  403254:	604e      	str	r6, [r1, #4]
  403256:	50e2      	str	r2, [r4, r3]
  403258:	f000 fa36 	bl	4036c8 <__malloc_unlock>
  40325c:	3408      	adds	r4, #8
  40325e:	e6dd      	b.n	40301c <_malloc_r+0x18c>
  403260:	687b      	ldr	r3, [r7, #4]
  403262:	e679      	b.n	402f58 <_malloc_r+0xc8>
  403264:	f108 0801 	add.w	r8, r8, #1
  403268:	f018 0f03 	tst.w	r8, #3
  40326c:	f10c 0c08 	add.w	ip, ip, #8
  403270:	f47f ae85 	bne.w	402f7e <_malloc_r+0xee>
  403274:	e02d      	b.n	4032d2 <_malloc_r+0x442>
  403276:	68dc      	ldr	r4, [r3, #12]
  403278:	42a3      	cmp	r3, r4
  40327a:	bf08      	it	eq
  40327c:	3002      	addeq	r0, #2
  40327e:	f43f ae3e 	beq.w	402efe <_malloc_r+0x6e>
  403282:	e6bb      	b.n	402ffc <_malloc_r+0x16c>
  403284:	4419      	add	r1, r3
  403286:	461c      	mov	r4, r3
  403288:	684a      	ldr	r2, [r1, #4]
  40328a:	68db      	ldr	r3, [r3, #12]
  40328c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403290:	f042 0201 	orr.w	r2, r2, #1
  403294:	604a      	str	r2, [r1, #4]
  403296:	4628      	mov	r0, r5
  403298:	60f3      	str	r3, [r6, #12]
  40329a:	609e      	str	r6, [r3, #8]
  40329c:	f000 fa14 	bl	4036c8 <__malloc_unlock>
  4032a0:	e6bc      	b.n	40301c <_malloc_r+0x18c>
  4032a2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4032a6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4032aa:	00c3      	lsls	r3, r0, #3
  4032ac:	e612      	b.n	402ed4 <_malloc_r+0x44>
  4032ae:	099a      	lsrs	r2, r3, #6
  4032b0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4032b4:	00c9      	lsls	r1, r1, #3
  4032b6:	3238      	adds	r2, #56	; 0x38
  4032b8:	e7a4      	b.n	403204 <_malloc_r+0x374>
  4032ba:	42bc      	cmp	r4, r7
  4032bc:	d054      	beq.n	403368 <_malloc_r+0x4d8>
  4032be:	68bc      	ldr	r4, [r7, #8]
  4032c0:	6862      	ldr	r2, [r4, #4]
  4032c2:	f022 0203 	bic.w	r2, r2, #3
  4032c6:	e75d      	b.n	403184 <_malloc_r+0x2f4>
  4032c8:	f859 3908 	ldr.w	r3, [r9], #-8
  4032cc:	4599      	cmp	r9, r3
  4032ce:	f040 8086 	bne.w	4033de <_malloc_r+0x54e>
  4032d2:	f010 0f03 	tst.w	r0, #3
  4032d6:	f100 30ff 	add.w	r0, r0, #4294967295
  4032da:	d1f5      	bne.n	4032c8 <_malloc_r+0x438>
  4032dc:	687b      	ldr	r3, [r7, #4]
  4032de:	ea23 0304 	bic.w	r3, r3, r4
  4032e2:	607b      	str	r3, [r7, #4]
  4032e4:	0064      	lsls	r4, r4, #1
  4032e6:	429c      	cmp	r4, r3
  4032e8:	f63f aec7 	bhi.w	40307a <_malloc_r+0x1ea>
  4032ec:	2c00      	cmp	r4, #0
  4032ee:	f43f aec4 	beq.w	40307a <_malloc_r+0x1ea>
  4032f2:	421c      	tst	r4, r3
  4032f4:	4640      	mov	r0, r8
  4032f6:	f47f ae3e 	bne.w	402f76 <_malloc_r+0xe6>
  4032fa:	0064      	lsls	r4, r4, #1
  4032fc:	421c      	tst	r4, r3
  4032fe:	f100 0004 	add.w	r0, r0, #4
  403302:	d0fa      	beq.n	4032fa <_malloc_r+0x46a>
  403304:	e637      	b.n	402f76 <_malloc_r+0xe6>
  403306:	468c      	mov	ip, r1
  403308:	e78c      	b.n	403224 <_malloc_r+0x394>
  40330a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40330e:	d815      	bhi.n	40333c <_malloc_r+0x4ac>
  403310:	0bf3      	lsrs	r3, r6, #15
  403312:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403316:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40331a:	00c3      	lsls	r3, r0, #3
  40331c:	e5da      	b.n	402ed4 <_malloc_r+0x44>
  40331e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403322:	e6ed      	b.n	403100 <_malloc_r+0x270>
  403324:	687b      	ldr	r3, [r7, #4]
  403326:	1092      	asrs	r2, r2, #2
  403328:	2101      	movs	r1, #1
  40332a:	fa01 f202 	lsl.w	r2, r1, r2
  40332e:	4313      	orrs	r3, r2
  403330:	607b      	str	r3, [r7, #4]
  403332:	4662      	mov	r2, ip
  403334:	e779      	b.n	40322a <_malloc_r+0x39a>
  403336:	2301      	movs	r3, #1
  403338:	6053      	str	r3, [r2, #4]
  40333a:	e729      	b.n	403190 <_malloc_r+0x300>
  40333c:	f240 5254 	movw	r2, #1364	; 0x554
  403340:	4293      	cmp	r3, r2
  403342:	d822      	bhi.n	40338a <_malloc_r+0x4fa>
  403344:	0cb3      	lsrs	r3, r6, #18
  403346:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40334a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40334e:	00c3      	lsls	r3, r0, #3
  403350:	e5c0      	b.n	402ed4 <_malloc_r+0x44>
  403352:	f103 0b10 	add.w	fp, r3, #16
  403356:	e6ae      	b.n	4030b6 <_malloc_r+0x226>
  403358:	2a54      	cmp	r2, #84	; 0x54
  40335a:	d829      	bhi.n	4033b0 <_malloc_r+0x520>
  40335c:	0b1a      	lsrs	r2, r3, #12
  40335e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403362:	00c9      	lsls	r1, r1, #3
  403364:	326e      	adds	r2, #110	; 0x6e
  403366:	e74d      	b.n	403204 <_malloc_r+0x374>
  403368:	4b20      	ldr	r3, [pc, #128]	; (4033ec <_malloc_r+0x55c>)
  40336a:	6819      	ldr	r1, [r3, #0]
  40336c:	4459      	add	r1, fp
  40336e:	6019      	str	r1, [r3, #0]
  403370:	e6b2      	b.n	4030d8 <_malloc_r+0x248>
  403372:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403376:	2800      	cmp	r0, #0
  403378:	f47f aeae 	bne.w	4030d8 <_malloc_r+0x248>
  40337c:	eb08 030b 	add.w	r3, r8, fp
  403380:	68ba      	ldr	r2, [r7, #8]
  403382:	f043 0301 	orr.w	r3, r3, #1
  403386:	6053      	str	r3, [r2, #4]
  403388:	e6ee      	b.n	403168 <_malloc_r+0x2d8>
  40338a:	207f      	movs	r0, #127	; 0x7f
  40338c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403390:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403394:	e59e      	b.n	402ed4 <_malloc_r+0x44>
  403396:	f104 0108 	add.w	r1, r4, #8
  40339a:	4628      	mov	r0, r5
  40339c:	9300      	str	r3, [sp, #0]
  40339e:	f7ff fa59 	bl	402854 <_free_r>
  4033a2:	9b00      	ldr	r3, [sp, #0]
  4033a4:	6819      	ldr	r1, [r3, #0]
  4033a6:	e6df      	b.n	403168 <_malloc_r+0x2d8>
  4033a8:	2001      	movs	r0, #1
  4033aa:	f04f 0900 	mov.w	r9, #0
  4033ae:	e6bc      	b.n	40312a <_malloc_r+0x29a>
  4033b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4033b4:	d805      	bhi.n	4033c2 <_malloc_r+0x532>
  4033b6:	0bda      	lsrs	r2, r3, #15
  4033b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4033bc:	00c9      	lsls	r1, r1, #3
  4033be:	3277      	adds	r2, #119	; 0x77
  4033c0:	e720      	b.n	403204 <_malloc_r+0x374>
  4033c2:	f240 5154 	movw	r1, #1364	; 0x554
  4033c6:	428a      	cmp	r2, r1
  4033c8:	d805      	bhi.n	4033d6 <_malloc_r+0x546>
  4033ca:	0c9a      	lsrs	r2, r3, #18
  4033cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4033d0:	00c9      	lsls	r1, r1, #3
  4033d2:	327c      	adds	r2, #124	; 0x7c
  4033d4:	e716      	b.n	403204 <_malloc_r+0x374>
  4033d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4033da:	227e      	movs	r2, #126	; 0x7e
  4033dc:	e712      	b.n	403204 <_malloc_r+0x374>
  4033de:	687b      	ldr	r3, [r7, #4]
  4033e0:	e780      	b.n	4032e4 <_malloc_r+0x454>
  4033e2:	08f0      	lsrs	r0, r6, #3
  4033e4:	f106 0308 	add.w	r3, r6, #8
  4033e8:	e600      	b.n	402fec <_malloc_r+0x15c>
  4033ea:	bf00      	nop
  4033ec:	20400a70 	.word	0x20400a70

004033f0 <__ascii_mbtowc>:
  4033f0:	b082      	sub	sp, #8
  4033f2:	b149      	cbz	r1, 403408 <__ascii_mbtowc+0x18>
  4033f4:	b15a      	cbz	r2, 40340e <__ascii_mbtowc+0x1e>
  4033f6:	b16b      	cbz	r3, 403414 <__ascii_mbtowc+0x24>
  4033f8:	7813      	ldrb	r3, [r2, #0]
  4033fa:	600b      	str	r3, [r1, #0]
  4033fc:	7812      	ldrb	r2, [r2, #0]
  4033fe:	1c10      	adds	r0, r2, #0
  403400:	bf18      	it	ne
  403402:	2001      	movne	r0, #1
  403404:	b002      	add	sp, #8
  403406:	4770      	bx	lr
  403408:	a901      	add	r1, sp, #4
  40340a:	2a00      	cmp	r2, #0
  40340c:	d1f3      	bne.n	4033f6 <__ascii_mbtowc+0x6>
  40340e:	4610      	mov	r0, r2
  403410:	b002      	add	sp, #8
  403412:	4770      	bx	lr
  403414:	f06f 0001 	mvn.w	r0, #1
  403418:	e7f4      	b.n	403404 <__ascii_mbtowc+0x14>
  40341a:	bf00      	nop
  40341c:	0000      	movs	r0, r0
	...

00403420 <memchr>:
  403420:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403424:	2a10      	cmp	r2, #16
  403426:	db2b      	blt.n	403480 <memchr+0x60>
  403428:	f010 0f07 	tst.w	r0, #7
  40342c:	d008      	beq.n	403440 <memchr+0x20>
  40342e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403432:	3a01      	subs	r2, #1
  403434:	428b      	cmp	r3, r1
  403436:	d02d      	beq.n	403494 <memchr+0x74>
  403438:	f010 0f07 	tst.w	r0, #7
  40343c:	b342      	cbz	r2, 403490 <memchr+0x70>
  40343e:	d1f6      	bne.n	40342e <memchr+0xe>
  403440:	b4f0      	push	{r4, r5, r6, r7}
  403442:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403446:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40344a:	f022 0407 	bic.w	r4, r2, #7
  40344e:	f07f 0700 	mvns.w	r7, #0
  403452:	2300      	movs	r3, #0
  403454:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403458:	3c08      	subs	r4, #8
  40345a:	ea85 0501 	eor.w	r5, r5, r1
  40345e:	ea86 0601 	eor.w	r6, r6, r1
  403462:	fa85 f547 	uadd8	r5, r5, r7
  403466:	faa3 f587 	sel	r5, r3, r7
  40346a:	fa86 f647 	uadd8	r6, r6, r7
  40346e:	faa5 f687 	sel	r6, r5, r7
  403472:	b98e      	cbnz	r6, 403498 <memchr+0x78>
  403474:	d1ee      	bne.n	403454 <memchr+0x34>
  403476:	bcf0      	pop	{r4, r5, r6, r7}
  403478:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40347c:	f002 0207 	and.w	r2, r2, #7
  403480:	b132      	cbz	r2, 403490 <memchr+0x70>
  403482:	f810 3b01 	ldrb.w	r3, [r0], #1
  403486:	3a01      	subs	r2, #1
  403488:	ea83 0301 	eor.w	r3, r3, r1
  40348c:	b113      	cbz	r3, 403494 <memchr+0x74>
  40348e:	d1f8      	bne.n	403482 <memchr+0x62>
  403490:	2000      	movs	r0, #0
  403492:	4770      	bx	lr
  403494:	3801      	subs	r0, #1
  403496:	4770      	bx	lr
  403498:	2d00      	cmp	r5, #0
  40349a:	bf06      	itte	eq
  40349c:	4635      	moveq	r5, r6
  40349e:	3803      	subeq	r0, #3
  4034a0:	3807      	subne	r0, #7
  4034a2:	f015 0f01 	tst.w	r5, #1
  4034a6:	d107      	bne.n	4034b8 <memchr+0x98>
  4034a8:	3001      	adds	r0, #1
  4034aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4034ae:	bf02      	ittt	eq
  4034b0:	3001      	addeq	r0, #1
  4034b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4034b6:	3001      	addeq	r0, #1
  4034b8:	bcf0      	pop	{r4, r5, r6, r7}
  4034ba:	3801      	subs	r0, #1
  4034bc:	4770      	bx	lr
  4034be:	bf00      	nop

004034c0 <memcpy>:
  4034c0:	4684      	mov	ip, r0
  4034c2:	ea41 0300 	orr.w	r3, r1, r0
  4034c6:	f013 0303 	ands.w	r3, r3, #3
  4034ca:	d16d      	bne.n	4035a8 <memcpy+0xe8>
  4034cc:	3a40      	subs	r2, #64	; 0x40
  4034ce:	d341      	bcc.n	403554 <memcpy+0x94>
  4034d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034d4:	f840 3b04 	str.w	r3, [r0], #4
  4034d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034dc:	f840 3b04 	str.w	r3, [r0], #4
  4034e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034e4:	f840 3b04 	str.w	r3, [r0], #4
  4034e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034ec:	f840 3b04 	str.w	r3, [r0], #4
  4034f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034f4:	f840 3b04 	str.w	r3, [r0], #4
  4034f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4034fc:	f840 3b04 	str.w	r3, [r0], #4
  403500:	f851 3b04 	ldr.w	r3, [r1], #4
  403504:	f840 3b04 	str.w	r3, [r0], #4
  403508:	f851 3b04 	ldr.w	r3, [r1], #4
  40350c:	f840 3b04 	str.w	r3, [r0], #4
  403510:	f851 3b04 	ldr.w	r3, [r1], #4
  403514:	f840 3b04 	str.w	r3, [r0], #4
  403518:	f851 3b04 	ldr.w	r3, [r1], #4
  40351c:	f840 3b04 	str.w	r3, [r0], #4
  403520:	f851 3b04 	ldr.w	r3, [r1], #4
  403524:	f840 3b04 	str.w	r3, [r0], #4
  403528:	f851 3b04 	ldr.w	r3, [r1], #4
  40352c:	f840 3b04 	str.w	r3, [r0], #4
  403530:	f851 3b04 	ldr.w	r3, [r1], #4
  403534:	f840 3b04 	str.w	r3, [r0], #4
  403538:	f851 3b04 	ldr.w	r3, [r1], #4
  40353c:	f840 3b04 	str.w	r3, [r0], #4
  403540:	f851 3b04 	ldr.w	r3, [r1], #4
  403544:	f840 3b04 	str.w	r3, [r0], #4
  403548:	f851 3b04 	ldr.w	r3, [r1], #4
  40354c:	f840 3b04 	str.w	r3, [r0], #4
  403550:	3a40      	subs	r2, #64	; 0x40
  403552:	d2bd      	bcs.n	4034d0 <memcpy+0x10>
  403554:	3230      	adds	r2, #48	; 0x30
  403556:	d311      	bcc.n	40357c <memcpy+0xbc>
  403558:	f851 3b04 	ldr.w	r3, [r1], #4
  40355c:	f840 3b04 	str.w	r3, [r0], #4
  403560:	f851 3b04 	ldr.w	r3, [r1], #4
  403564:	f840 3b04 	str.w	r3, [r0], #4
  403568:	f851 3b04 	ldr.w	r3, [r1], #4
  40356c:	f840 3b04 	str.w	r3, [r0], #4
  403570:	f851 3b04 	ldr.w	r3, [r1], #4
  403574:	f840 3b04 	str.w	r3, [r0], #4
  403578:	3a10      	subs	r2, #16
  40357a:	d2ed      	bcs.n	403558 <memcpy+0x98>
  40357c:	320c      	adds	r2, #12
  40357e:	d305      	bcc.n	40358c <memcpy+0xcc>
  403580:	f851 3b04 	ldr.w	r3, [r1], #4
  403584:	f840 3b04 	str.w	r3, [r0], #4
  403588:	3a04      	subs	r2, #4
  40358a:	d2f9      	bcs.n	403580 <memcpy+0xc0>
  40358c:	3204      	adds	r2, #4
  40358e:	d008      	beq.n	4035a2 <memcpy+0xe2>
  403590:	07d2      	lsls	r2, r2, #31
  403592:	bf1c      	itt	ne
  403594:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403598:	f800 3b01 	strbne.w	r3, [r0], #1
  40359c:	d301      	bcc.n	4035a2 <memcpy+0xe2>
  40359e:	880b      	ldrh	r3, [r1, #0]
  4035a0:	8003      	strh	r3, [r0, #0]
  4035a2:	4660      	mov	r0, ip
  4035a4:	4770      	bx	lr
  4035a6:	bf00      	nop
  4035a8:	2a08      	cmp	r2, #8
  4035aa:	d313      	bcc.n	4035d4 <memcpy+0x114>
  4035ac:	078b      	lsls	r3, r1, #30
  4035ae:	d08d      	beq.n	4034cc <memcpy+0xc>
  4035b0:	f010 0303 	ands.w	r3, r0, #3
  4035b4:	d08a      	beq.n	4034cc <memcpy+0xc>
  4035b6:	f1c3 0304 	rsb	r3, r3, #4
  4035ba:	1ad2      	subs	r2, r2, r3
  4035bc:	07db      	lsls	r3, r3, #31
  4035be:	bf1c      	itt	ne
  4035c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035c4:	f800 3b01 	strbne.w	r3, [r0], #1
  4035c8:	d380      	bcc.n	4034cc <memcpy+0xc>
  4035ca:	f831 3b02 	ldrh.w	r3, [r1], #2
  4035ce:	f820 3b02 	strh.w	r3, [r0], #2
  4035d2:	e77b      	b.n	4034cc <memcpy+0xc>
  4035d4:	3a04      	subs	r2, #4
  4035d6:	d3d9      	bcc.n	40358c <memcpy+0xcc>
  4035d8:	3a01      	subs	r2, #1
  4035da:	f811 3b01 	ldrb.w	r3, [r1], #1
  4035de:	f800 3b01 	strb.w	r3, [r0], #1
  4035e2:	d2f9      	bcs.n	4035d8 <memcpy+0x118>
  4035e4:	780b      	ldrb	r3, [r1, #0]
  4035e6:	7003      	strb	r3, [r0, #0]
  4035e8:	784b      	ldrb	r3, [r1, #1]
  4035ea:	7043      	strb	r3, [r0, #1]
  4035ec:	788b      	ldrb	r3, [r1, #2]
  4035ee:	7083      	strb	r3, [r0, #2]
  4035f0:	4660      	mov	r0, ip
  4035f2:	4770      	bx	lr

004035f4 <memmove>:
  4035f4:	4288      	cmp	r0, r1
  4035f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035f8:	d90d      	bls.n	403616 <memmove+0x22>
  4035fa:	188b      	adds	r3, r1, r2
  4035fc:	4298      	cmp	r0, r3
  4035fe:	d20a      	bcs.n	403616 <memmove+0x22>
  403600:	1884      	adds	r4, r0, r2
  403602:	2a00      	cmp	r2, #0
  403604:	d051      	beq.n	4036aa <memmove+0xb6>
  403606:	4622      	mov	r2, r4
  403608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40360c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403610:	4299      	cmp	r1, r3
  403612:	d1f9      	bne.n	403608 <memmove+0x14>
  403614:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403616:	2a0f      	cmp	r2, #15
  403618:	d948      	bls.n	4036ac <memmove+0xb8>
  40361a:	ea41 0300 	orr.w	r3, r1, r0
  40361e:	079b      	lsls	r3, r3, #30
  403620:	d146      	bne.n	4036b0 <memmove+0xbc>
  403622:	f100 0410 	add.w	r4, r0, #16
  403626:	f101 0310 	add.w	r3, r1, #16
  40362a:	4615      	mov	r5, r2
  40362c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403630:	f844 6c10 	str.w	r6, [r4, #-16]
  403634:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403638:	f844 6c0c 	str.w	r6, [r4, #-12]
  40363c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403640:	f844 6c08 	str.w	r6, [r4, #-8]
  403644:	3d10      	subs	r5, #16
  403646:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40364a:	f844 6c04 	str.w	r6, [r4, #-4]
  40364e:	2d0f      	cmp	r5, #15
  403650:	f103 0310 	add.w	r3, r3, #16
  403654:	f104 0410 	add.w	r4, r4, #16
  403658:	d8e8      	bhi.n	40362c <memmove+0x38>
  40365a:	f1a2 0310 	sub.w	r3, r2, #16
  40365e:	f023 030f 	bic.w	r3, r3, #15
  403662:	f002 0e0f 	and.w	lr, r2, #15
  403666:	3310      	adds	r3, #16
  403668:	f1be 0f03 	cmp.w	lr, #3
  40366c:	4419      	add	r1, r3
  40366e:	4403      	add	r3, r0
  403670:	d921      	bls.n	4036b6 <memmove+0xc2>
  403672:	1f1e      	subs	r6, r3, #4
  403674:	460d      	mov	r5, r1
  403676:	4674      	mov	r4, lr
  403678:	3c04      	subs	r4, #4
  40367a:	f855 7b04 	ldr.w	r7, [r5], #4
  40367e:	f846 7f04 	str.w	r7, [r6, #4]!
  403682:	2c03      	cmp	r4, #3
  403684:	d8f8      	bhi.n	403678 <memmove+0x84>
  403686:	f1ae 0404 	sub.w	r4, lr, #4
  40368a:	f024 0403 	bic.w	r4, r4, #3
  40368e:	3404      	adds	r4, #4
  403690:	4421      	add	r1, r4
  403692:	4423      	add	r3, r4
  403694:	f002 0203 	and.w	r2, r2, #3
  403698:	b162      	cbz	r2, 4036b4 <memmove+0xc0>
  40369a:	3b01      	subs	r3, #1
  40369c:	440a      	add	r2, r1
  40369e:	f811 4b01 	ldrb.w	r4, [r1], #1
  4036a2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4036a6:	428a      	cmp	r2, r1
  4036a8:	d1f9      	bne.n	40369e <memmove+0xaa>
  4036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036ac:	4603      	mov	r3, r0
  4036ae:	e7f3      	b.n	403698 <memmove+0xa4>
  4036b0:	4603      	mov	r3, r0
  4036b2:	e7f2      	b.n	40369a <memmove+0xa6>
  4036b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036b6:	4672      	mov	r2, lr
  4036b8:	e7ee      	b.n	403698 <memmove+0xa4>
  4036ba:	bf00      	nop

004036bc <__malloc_lock>:
  4036bc:	4801      	ldr	r0, [pc, #4]	; (4036c4 <__malloc_lock+0x8>)
  4036be:	f7ff bb63 	b.w	402d88 <__retarget_lock_acquire_recursive>
  4036c2:	bf00      	nop
  4036c4:	20400ac0 	.word	0x20400ac0

004036c8 <__malloc_unlock>:
  4036c8:	4801      	ldr	r0, [pc, #4]	; (4036d0 <__malloc_unlock+0x8>)
  4036ca:	f7ff bb5f 	b.w	402d8c <__retarget_lock_release_recursive>
  4036ce:	bf00      	nop
  4036d0:	20400ac0 	.word	0x20400ac0

004036d4 <_realloc_r>:
  4036d4:	2900      	cmp	r1, #0
  4036d6:	f000 8095 	beq.w	403804 <_realloc_r+0x130>
  4036da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036de:	460d      	mov	r5, r1
  4036e0:	4616      	mov	r6, r2
  4036e2:	b083      	sub	sp, #12
  4036e4:	4680      	mov	r8, r0
  4036e6:	f106 070b 	add.w	r7, r6, #11
  4036ea:	f7ff ffe7 	bl	4036bc <__malloc_lock>
  4036ee:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4036f2:	2f16      	cmp	r7, #22
  4036f4:	f02e 0403 	bic.w	r4, lr, #3
  4036f8:	f1a5 0908 	sub.w	r9, r5, #8
  4036fc:	d83c      	bhi.n	403778 <_realloc_r+0xa4>
  4036fe:	2210      	movs	r2, #16
  403700:	4617      	mov	r7, r2
  403702:	42be      	cmp	r6, r7
  403704:	d83d      	bhi.n	403782 <_realloc_r+0xae>
  403706:	4294      	cmp	r4, r2
  403708:	da43      	bge.n	403792 <_realloc_r+0xbe>
  40370a:	4bc4      	ldr	r3, [pc, #784]	; (403a1c <_realloc_r+0x348>)
  40370c:	6899      	ldr	r1, [r3, #8]
  40370e:	eb09 0004 	add.w	r0, r9, r4
  403712:	4288      	cmp	r0, r1
  403714:	f000 80b4 	beq.w	403880 <_realloc_r+0x1ac>
  403718:	6843      	ldr	r3, [r0, #4]
  40371a:	f023 0101 	bic.w	r1, r3, #1
  40371e:	4401      	add	r1, r0
  403720:	6849      	ldr	r1, [r1, #4]
  403722:	07c9      	lsls	r1, r1, #31
  403724:	d54c      	bpl.n	4037c0 <_realloc_r+0xec>
  403726:	f01e 0f01 	tst.w	lr, #1
  40372a:	f000 809b 	beq.w	403864 <_realloc_r+0x190>
  40372e:	4631      	mov	r1, r6
  403730:	4640      	mov	r0, r8
  403732:	f7ff fbad 	bl	402e90 <_malloc_r>
  403736:	4606      	mov	r6, r0
  403738:	2800      	cmp	r0, #0
  40373a:	d03a      	beq.n	4037b2 <_realloc_r+0xde>
  40373c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403740:	f023 0301 	bic.w	r3, r3, #1
  403744:	444b      	add	r3, r9
  403746:	f1a0 0208 	sub.w	r2, r0, #8
  40374a:	429a      	cmp	r2, r3
  40374c:	f000 8121 	beq.w	403992 <_realloc_r+0x2be>
  403750:	1f22      	subs	r2, r4, #4
  403752:	2a24      	cmp	r2, #36	; 0x24
  403754:	f200 8107 	bhi.w	403966 <_realloc_r+0x292>
  403758:	2a13      	cmp	r2, #19
  40375a:	f200 80db 	bhi.w	403914 <_realloc_r+0x240>
  40375e:	4603      	mov	r3, r0
  403760:	462a      	mov	r2, r5
  403762:	6811      	ldr	r1, [r2, #0]
  403764:	6019      	str	r1, [r3, #0]
  403766:	6851      	ldr	r1, [r2, #4]
  403768:	6059      	str	r1, [r3, #4]
  40376a:	6892      	ldr	r2, [r2, #8]
  40376c:	609a      	str	r2, [r3, #8]
  40376e:	4629      	mov	r1, r5
  403770:	4640      	mov	r0, r8
  403772:	f7ff f86f 	bl	402854 <_free_r>
  403776:	e01c      	b.n	4037b2 <_realloc_r+0xde>
  403778:	f027 0707 	bic.w	r7, r7, #7
  40377c:	2f00      	cmp	r7, #0
  40377e:	463a      	mov	r2, r7
  403780:	dabf      	bge.n	403702 <_realloc_r+0x2e>
  403782:	2600      	movs	r6, #0
  403784:	230c      	movs	r3, #12
  403786:	4630      	mov	r0, r6
  403788:	f8c8 3000 	str.w	r3, [r8]
  40378c:	b003      	add	sp, #12
  40378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403792:	462e      	mov	r6, r5
  403794:	1be3      	subs	r3, r4, r7
  403796:	2b0f      	cmp	r3, #15
  403798:	d81e      	bhi.n	4037d8 <_realloc_r+0x104>
  40379a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40379e:	f003 0301 	and.w	r3, r3, #1
  4037a2:	4323      	orrs	r3, r4
  4037a4:	444c      	add	r4, r9
  4037a6:	f8c9 3004 	str.w	r3, [r9, #4]
  4037aa:	6863      	ldr	r3, [r4, #4]
  4037ac:	f043 0301 	orr.w	r3, r3, #1
  4037b0:	6063      	str	r3, [r4, #4]
  4037b2:	4640      	mov	r0, r8
  4037b4:	f7ff ff88 	bl	4036c8 <__malloc_unlock>
  4037b8:	4630      	mov	r0, r6
  4037ba:	b003      	add	sp, #12
  4037bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037c0:	f023 0303 	bic.w	r3, r3, #3
  4037c4:	18e1      	adds	r1, r4, r3
  4037c6:	4291      	cmp	r1, r2
  4037c8:	db1f      	blt.n	40380a <_realloc_r+0x136>
  4037ca:	68c3      	ldr	r3, [r0, #12]
  4037cc:	6882      	ldr	r2, [r0, #8]
  4037ce:	462e      	mov	r6, r5
  4037d0:	60d3      	str	r3, [r2, #12]
  4037d2:	460c      	mov	r4, r1
  4037d4:	609a      	str	r2, [r3, #8]
  4037d6:	e7dd      	b.n	403794 <_realloc_r+0xc0>
  4037d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4037dc:	eb09 0107 	add.w	r1, r9, r7
  4037e0:	f002 0201 	and.w	r2, r2, #1
  4037e4:	444c      	add	r4, r9
  4037e6:	f043 0301 	orr.w	r3, r3, #1
  4037ea:	4317      	orrs	r7, r2
  4037ec:	f8c9 7004 	str.w	r7, [r9, #4]
  4037f0:	604b      	str	r3, [r1, #4]
  4037f2:	6863      	ldr	r3, [r4, #4]
  4037f4:	f043 0301 	orr.w	r3, r3, #1
  4037f8:	3108      	adds	r1, #8
  4037fa:	6063      	str	r3, [r4, #4]
  4037fc:	4640      	mov	r0, r8
  4037fe:	f7ff f829 	bl	402854 <_free_r>
  403802:	e7d6      	b.n	4037b2 <_realloc_r+0xde>
  403804:	4611      	mov	r1, r2
  403806:	f7ff bb43 	b.w	402e90 <_malloc_r>
  40380a:	f01e 0f01 	tst.w	lr, #1
  40380e:	d18e      	bne.n	40372e <_realloc_r+0x5a>
  403810:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403814:	eba9 0a01 	sub.w	sl, r9, r1
  403818:	f8da 1004 	ldr.w	r1, [sl, #4]
  40381c:	f021 0103 	bic.w	r1, r1, #3
  403820:	440b      	add	r3, r1
  403822:	4423      	add	r3, r4
  403824:	4293      	cmp	r3, r2
  403826:	db25      	blt.n	403874 <_realloc_r+0x1a0>
  403828:	68c2      	ldr	r2, [r0, #12]
  40382a:	6881      	ldr	r1, [r0, #8]
  40382c:	4656      	mov	r6, sl
  40382e:	60ca      	str	r2, [r1, #12]
  403830:	6091      	str	r1, [r2, #8]
  403832:	f8da 100c 	ldr.w	r1, [sl, #12]
  403836:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40383a:	1f22      	subs	r2, r4, #4
  40383c:	2a24      	cmp	r2, #36	; 0x24
  40383e:	60c1      	str	r1, [r0, #12]
  403840:	6088      	str	r0, [r1, #8]
  403842:	f200 8094 	bhi.w	40396e <_realloc_r+0x29a>
  403846:	2a13      	cmp	r2, #19
  403848:	d96f      	bls.n	40392a <_realloc_r+0x256>
  40384a:	6829      	ldr	r1, [r5, #0]
  40384c:	f8ca 1008 	str.w	r1, [sl, #8]
  403850:	6869      	ldr	r1, [r5, #4]
  403852:	f8ca 100c 	str.w	r1, [sl, #12]
  403856:	2a1b      	cmp	r2, #27
  403858:	f200 80a2 	bhi.w	4039a0 <_realloc_r+0x2cc>
  40385c:	3508      	adds	r5, #8
  40385e:	f10a 0210 	add.w	r2, sl, #16
  403862:	e063      	b.n	40392c <_realloc_r+0x258>
  403864:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403868:	eba9 0a03 	sub.w	sl, r9, r3
  40386c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403870:	f021 0103 	bic.w	r1, r1, #3
  403874:	1863      	adds	r3, r4, r1
  403876:	4293      	cmp	r3, r2
  403878:	f6ff af59 	blt.w	40372e <_realloc_r+0x5a>
  40387c:	4656      	mov	r6, sl
  40387e:	e7d8      	b.n	403832 <_realloc_r+0x15e>
  403880:	6841      	ldr	r1, [r0, #4]
  403882:	f021 0b03 	bic.w	fp, r1, #3
  403886:	44a3      	add	fp, r4
  403888:	f107 0010 	add.w	r0, r7, #16
  40388c:	4583      	cmp	fp, r0
  40388e:	da56      	bge.n	40393e <_realloc_r+0x26a>
  403890:	f01e 0f01 	tst.w	lr, #1
  403894:	f47f af4b 	bne.w	40372e <_realloc_r+0x5a>
  403898:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40389c:	eba9 0a01 	sub.w	sl, r9, r1
  4038a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4038a4:	f021 0103 	bic.w	r1, r1, #3
  4038a8:	448b      	add	fp, r1
  4038aa:	4558      	cmp	r0, fp
  4038ac:	dce2      	bgt.n	403874 <_realloc_r+0x1a0>
  4038ae:	4656      	mov	r6, sl
  4038b0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4038b4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4038b8:	1f22      	subs	r2, r4, #4
  4038ba:	2a24      	cmp	r2, #36	; 0x24
  4038bc:	60c1      	str	r1, [r0, #12]
  4038be:	6088      	str	r0, [r1, #8]
  4038c0:	f200 808f 	bhi.w	4039e2 <_realloc_r+0x30e>
  4038c4:	2a13      	cmp	r2, #19
  4038c6:	f240 808a 	bls.w	4039de <_realloc_r+0x30a>
  4038ca:	6829      	ldr	r1, [r5, #0]
  4038cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4038d0:	6869      	ldr	r1, [r5, #4]
  4038d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4038d6:	2a1b      	cmp	r2, #27
  4038d8:	f200 808a 	bhi.w	4039f0 <_realloc_r+0x31c>
  4038dc:	3508      	adds	r5, #8
  4038de:	f10a 0210 	add.w	r2, sl, #16
  4038e2:	6829      	ldr	r1, [r5, #0]
  4038e4:	6011      	str	r1, [r2, #0]
  4038e6:	6869      	ldr	r1, [r5, #4]
  4038e8:	6051      	str	r1, [r2, #4]
  4038ea:	68a9      	ldr	r1, [r5, #8]
  4038ec:	6091      	str	r1, [r2, #8]
  4038ee:	eb0a 0107 	add.w	r1, sl, r7
  4038f2:	ebab 0207 	sub.w	r2, fp, r7
  4038f6:	f042 0201 	orr.w	r2, r2, #1
  4038fa:	6099      	str	r1, [r3, #8]
  4038fc:	604a      	str	r2, [r1, #4]
  4038fe:	f8da 3004 	ldr.w	r3, [sl, #4]
  403902:	f003 0301 	and.w	r3, r3, #1
  403906:	431f      	orrs	r7, r3
  403908:	4640      	mov	r0, r8
  40390a:	f8ca 7004 	str.w	r7, [sl, #4]
  40390e:	f7ff fedb 	bl	4036c8 <__malloc_unlock>
  403912:	e751      	b.n	4037b8 <_realloc_r+0xe4>
  403914:	682b      	ldr	r3, [r5, #0]
  403916:	6003      	str	r3, [r0, #0]
  403918:	686b      	ldr	r3, [r5, #4]
  40391a:	6043      	str	r3, [r0, #4]
  40391c:	2a1b      	cmp	r2, #27
  40391e:	d82d      	bhi.n	40397c <_realloc_r+0x2a8>
  403920:	f100 0308 	add.w	r3, r0, #8
  403924:	f105 0208 	add.w	r2, r5, #8
  403928:	e71b      	b.n	403762 <_realloc_r+0x8e>
  40392a:	4632      	mov	r2, r6
  40392c:	6829      	ldr	r1, [r5, #0]
  40392e:	6011      	str	r1, [r2, #0]
  403930:	6869      	ldr	r1, [r5, #4]
  403932:	6051      	str	r1, [r2, #4]
  403934:	68a9      	ldr	r1, [r5, #8]
  403936:	6091      	str	r1, [r2, #8]
  403938:	461c      	mov	r4, r3
  40393a:	46d1      	mov	r9, sl
  40393c:	e72a      	b.n	403794 <_realloc_r+0xc0>
  40393e:	eb09 0107 	add.w	r1, r9, r7
  403942:	ebab 0b07 	sub.w	fp, fp, r7
  403946:	f04b 0201 	orr.w	r2, fp, #1
  40394a:	6099      	str	r1, [r3, #8]
  40394c:	604a      	str	r2, [r1, #4]
  40394e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403952:	f003 0301 	and.w	r3, r3, #1
  403956:	431f      	orrs	r7, r3
  403958:	4640      	mov	r0, r8
  40395a:	f845 7c04 	str.w	r7, [r5, #-4]
  40395e:	f7ff feb3 	bl	4036c8 <__malloc_unlock>
  403962:	462e      	mov	r6, r5
  403964:	e728      	b.n	4037b8 <_realloc_r+0xe4>
  403966:	4629      	mov	r1, r5
  403968:	f7ff fe44 	bl	4035f4 <memmove>
  40396c:	e6ff      	b.n	40376e <_realloc_r+0x9a>
  40396e:	4629      	mov	r1, r5
  403970:	4630      	mov	r0, r6
  403972:	461c      	mov	r4, r3
  403974:	46d1      	mov	r9, sl
  403976:	f7ff fe3d 	bl	4035f4 <memmove>
  40397a:	e70b      	b.n	403794 <_realloc_r+0xc0>
  40397c:	68ab      	ldr	r3, [r5, #8]
  40397e:	6083      	str	r3, [r0, #8]
  403980:	68eb      	ldr	r3, [r5, #12]
  403982:	60c3      	str	r3, [r0, #12]
  403984:	2a24      	cmp	r2, #36	; 0x24
  403986:	d017      	beq.n	4039b8 <_realloc_r+0x2e4>
  403988:	f100 0310 	add.w	r3, r0, #16
  40398c:	f105 0210 	add.w	r2, r5, #16
  403990:	e6e7      	b.n	403762 <_realloc_r+0x8e>
  403992:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403996:	f023 0303 	bic.w	r3, r3, #3
  40399a:	441c      	add	r4, r3
  40399c:	462e      	mov	r6, r5
  40399e:	e6f9      	b.n	403794 <_realloc_r+0xc0>
  4039a0:	68a9      	ldr	r1, [r5, #8]
  4039a2:	f8ca 1010 	str.w	r1, [sl, #16]
  4039a6:	68e9      	ldr	r1, [r5, #12]
  4039a8:	f8ca 1014 	str.w	r1, [sl, #20]
  4039ac:	2a24      	cmp	r2, #36	; 0x24
  4039ae:	d00c      	beq.n	4039ca <_realloc_r+0x2f6>
  4039b0:	3510      	adds	r5, #16
  4039b2:	f10a 0218 	add.w	r2, sl, #24
  4039b6:	e7b9      	b.n	40392c <_realloc_r+0x258>
  4039b8:	692b      	ldr	r3, [r5, #16]
  4039ba:	6103      	str	r3, [r0, #16]
  4039bc:	696b      	ldr	r3, [r5, #20]
  4039be:	6143      	str	r3, [r0, #20]
  4039c0:	f105 0218 	add.w	r2, r5, #24
  4039c4:	f100 0318 	add.w	r3, r0, #24
  4039c8:	e6cb      	b.n	403762 <_realloc_r+0x8e>
  4039ca:	692a      	ldr	r2, [r5, #16]
  4039cc:	f8ca 2018 	str.w	r2, [sl, #24]
  4039d0:	696a      	ldr	r2, [r5, #20]
  4039d2:	f8ca 201c 	str.w	r2, [sl, #28]
  4039d6:	3518      	adds	r5, #24
  4039d8:	f10a 0220 	add.w	r2, sl, #32
  4039dc:	e7a6      	b.n	40392c <_realloc_r+0x258>
  4039de:	4632      	mov	r2, r6
  4039e0:	e77f      	b.n	4038e2 <_realloc_r+0x20e>
  4039e2:	4629      	mov	r1, r5
  4039e4:	4630      	mov	r0, r6
  4039e6:	9301      	str	r3, [sp, #4]
  4039e8:	f7ff fe04 	bl	4035f4 <memmove>
  4039ec:	9b01      	ldr	r3, [sp, #4]
  4039ee:	e77e      	b.n	4038ee <_realloc_r+0x21a>
  4039f0:	68a9      	ldr	r1, [r5, #8]
  4039f2:	f8ca 1010 	str.w	r1, [sl, #16]
  4039f6:	68e9      	ldr	r1, [r5, #12]
  4039f8:	f8ca 1014 	str.w	r1, [sl, #20]
  4039fc:	2a24      	cmp	r2, #36	; 0x24
  4039fe:	d003      	beq.n	403a08 <_realloc_r+0x334>
  403a00:	3510      	adds	r5, #16
  403a02:	f10a 0218 	add.w	r2, sl, #24
  403a06:	e76c      	b.n	4038e2 <_realloc_r+0x20e>
  403a08:	692a      	ldr	r2, [r5, #16]
  403a0a:	f8ca 2018 	str.w	r2, [sl, #24]
  403a0e:	696a      	ldr	r2, [r5, #20]
  403a10:	f8ca 201c 	str.w	r2, [sl, #28]
  403a14:	3518      	adds	r5, #24
  403a16:	f10a 0220 	add.w	r2, sl, #32
  403a1a:	e762      	b.n	4038e2 <_realloc_r+0x20e>
  403a1c:	204005c0 	.word	0x204005c0

00403a20 <_sbrk_r>:
  403a20:	b538      	push	{r3, r4, r5, lr}
  403a22:	4c07      	ldr	r4, [pc, #28]	; (403a40 <_sbrk_r+0x20>)
  403a24:	2300      	movs	r3, #0
  403a26:	4605      	mov	r5, r0
  403a28:	4608      	mov	r0, r1
  403a2a:	6023      	str	r3, [r4, #0]
  403a2c:	f7fd f9c2 	bl	400db4 <_sbrk>
  403a30:	1c43      	adds	r3, r0, #1
  403a32:	d000      	beq.n	403a36 <_sbrk_r+0x16>
  403a34:	bd38      	pop	{r3, r4, r5, pc}
  403a36:	6823      	ldr	r3, [r4, #0]
  403a38:	2b00      	cmp	r3, #0
  403a3a:	d0fb      	beq.n	403a34 <_sbrk_r+0x14>
  403a3c:	602b      	str	r3, [r5, #0]
  403a3e:	bd38      	pop	{r3, r4, r5, pc}
  403a40:	20400ad4 	.word	0x20400ad4

00403a44 <__sread>:
  403a44:	b510      	push	{r4, lr}
  403a46:	460c      	mov	r4, r1
  403a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a4c:	f000 f9f6 	bl	403e3c <_read_r>
  403a50:	2800      	cmp	r0, #0
  403a52:	db03      	blt.n	403a5c <__sread+0x18>
  403a54:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403a56:	4403      	add	r3, r0
  403a58:	6523      	str	r3, [r4, #80]	; 0x50
  403a5a:	bd10      	pop	{r4, pc}
  403a5c:	89a3      	ldrh	r3, [r4, #12]
  403a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403a62:	81a3      	strh	r3, [r4, #12]
  403a64:	bd10      	pop	{r4, pc}
  403a66:	bf00      	nop

00403a68 <__swrite>:
  403a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a6c:	4616      	mov	r6, r2
  403a6e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403a72:	461f      	mov	r7, r3
  403a74:	05d3      	lsls	r3, r2, #23
  403a76:	460c      	mov	r4, r1
  403a78:	4605      	mov	r5, r0
  403a7a:	d507      	bpl.n	403a8c <__swrite+0x24>
  403a7c:	2200      	movs	r2, #0
  403a7e:	2302      	movs	r3, #2
  403a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a84:	f000 f9c4 	bl	403e10 <_lseek_r>
  403a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403a94:	81a2      	strh	r2, [r4, #12]
  403a96:	463b      	mov	r3, r7
  403a98:	4632      	mov	r2, r6
  403a9a:	4628      	mov	r0, r5
  403a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403aa0:	f000 b8a4 	b.w	403bec <_write_r>

00403aa4 <__sseek>:
  403aa4:	b510      	push	{r4, lr}
  403aa6:	460c      	mov	r4, r1
  403aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403aac:	f000 f9b0 	bl	403e10 <_lseek_r>
  403ab0:	89a3      	ldrh	r3, [r4, #12]
  403ab2:	1c42      	adds	r2, r0, #1
  403ab4:	bf0e      	itee	eq
  403ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403abe:	6520      	strne	r0, [r4, #80]	; 0x50
  403ac0:	81a3      	strh	r3, [r4, #12]
  403ac2:	bd10      	pop	{r4, pc}

00403ac4 <__sclose>:
  403ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ac8:	f000 b908 	b.w	403cdc <_close_r>

00403acc <__swbuf_r>:
  403acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403ace:	460d      	mov	r5, r1
  403ad0:	4614      	mov	r4, r2
  403ad2:	4606      	mov	r6, r0
  403ad4:	b110      	cbz	r0, 403adc <__swbuf_r+0x10>
  403ad6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ad8:	2b00      	cmp	r3, #0
  403ada:	d04b      	beq.n	403b74 <__swbuf_r+0xa8>
  403adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403ae0:	69a3      	ldr	r3, [r4, #24]
  403ae2:	60a3      	str	r3, [r4, #8]
  403ae4:	b291      	uxth	r1, r2
  403ae6:	0708      	lsls	r0, r1, #28
  403ae8:	d539      	bpl.n	403b5e <__swbuf_r+0x92>
  403aea:	6923      	ldr	r3, [r4, #16]
  403aec:	2b00      	cmp	r3, #0
  403aee:	d036      	beq.n	403b5e <__swbuf_r+0x92>
  403af0:	b2ed      	uxtb	r5, r5
  403af2:	0489      	lsls	r1, r1, #18
  403af4:	462f      	mov	r7, r5
  403af6:	d515      	bpl.n	403b24 <__swbuf_r+0x58>
  403af8:	6822      	ldr	r2, [r4, #0]
  403afa:	6961      	ldr	r1, [r4, #20]
  403afc:	1ad3      	subs	r3, r2, r3
  403afe:	428b      	cmp	r3, r1
  403b00:	da1c      	bge.n	403b3c <__swbuf_r+0x70>
  403b02:	3301      	adds	r3, #1
  403b04:	68a1      	ldr	r1, [r4, #8]
  403b06:	1c50      	adds	r0, r2, #1
  403b08:	3901      	subs	r1, #1
  403b0a:	60a1      	str	r1, [r4, #8]
  403b0c:	6020      	str	r0, [r4, #0]
  403b0e:	7015      	strb	r5, [r2, #0]
  403b10:	6962      	ldr	r2, [r4, #20]
  403b12:	429a      	cmp	r2, r3
  403b14:	d01a      	beq.n	403b4c <__swbuf_r+0x80>
  403b16:	89a3      	ldrh	r3, [r4, #12]
  403b18:	07db      	lsls	r3, r3, #31
  403b1a:	d501      	bpl.n	403b20 <__swbuf_r+0x54>
  403b1c:	2d0a      	cmp	r5, #10
  403b1e:	d015      	beq.n	403b4c <__swbuf_r+0x80>
  403b20:	4638      	mov	r0, r7
  403b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b24:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403b26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403b2a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403b2e:	81a2      	strh	r2, [r4, #12]
  403b30:	6822      	ldr	r2, [r4, #0]
  403b32:	6661      	str	r1, [r4, #100]	; 0x64
  403b34:	6961      	ldr	r1, [r4, #20]
  403b36:	1ad3      	subs	r3, r2, r3
  403b38:	428b      	cmp	r3, r1
  403b3a:	dbe2      	blt.n	403b02 <__swbuf_r+0x36>
  403b3c:	4621      	mov	r1, r4
  403b3e:	4630      	mov	r0, r6
  403b40:	f7fe fd0a 	bl	402558 <_fflush_r>
  403b44:	b940      	cbnz	r0, 403b58 <__swbuf_r+0x8c>
  403b46:	6822      	ldr	r2, [r4, #0]
  403b48:	2301      	movs	r3, #1
  403b4a:	e7db      	b.n	403b04 <__swbuf_r+0x38>
  403b4c:	4621      	mov	r1, r4
  403b4e:	4630      	mov	r0, r6
  403b50:	f7fe fd02 	bl	402558 <_fflush_r>
  403b54:	2800      	cmp	r0, #0
  403b56:	d0e3      	beq.n	403b20 <__swbuf_r+0x54>
  403b58:	f04f 37ff 	mov.w	r7, #4294967295
  403b5c:	e7e0      	b.n	403b20 <__swbuf_r+0x54>
  403b5e:	4621      	mov	r1, r4
  403b60:	4630      	mov	r0, r6
  403b62:	f7fe fbe5 	bl	402330 <__swsetup_r>
  403b66:	2800      	cmp	r0, #0
  403b68:	d1f6      	bne.n	403b58 <__swbuf_r+0x8c>
  403b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b6e:	6923      	ldr	r3, [r4, #16]
  403b70:	b291      	uxth	r1, r2
  403b72:	e7bd      	b.n	403af0 <__swbuf_r+0x24>
  403b74:	f7fe fd48 	bl	402608 <__sinit>
  403b78:	e7b0      	b.n	403adc <__swbuf_r+0x10>
  403b7a:	bf00      	nop

00403b7c <_wcrtomb_r>:
  403b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b7e:	4606      	mov	r6, r0
  403b80:	b085      	sub	sp, #20
  403b82:	461f      	mov	r7, r3
  403b84:	b189      	cbz	r1, 403baa <_wcrtomb_r+0x2e>
  403b86:	4c10      	ldr	r4, [pc, #64]	; (403bc8 <_wcrtomb_r+0x4c>)
  403b88:	4d10      	ldr	r5, [pc, #64]	; (403bcc <_wcrtomb_r+0x50>)
  403b8a:	6824      	ldr	r4, [r4, #0]
  403b8c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403b8e:	2c00      	cmp	r4, #0
  403b90:	bf08      	it	eq
  403b92:	462c      	moveq	r4, r5
  403b94:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403b98:	47a0      	blx	r4
  403b9a:	1c43      	adds	r3, r0, #1
  403b9c:	d103      	bne.n	403ba6 <_wcrtomb_r+0x2a>
  403b9e:	2200      	movs	r2, #0
  403ba0:	238a      	movs	r3, #138	; 0x8a
  403ba2:	603a      	str	r2, [r7, #0]
  403ba4:	6033      	str	r3, [r6, #0]
  403ba6:	b005      	add	sp, #20
  403ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403baa:	460c      	mov	r4, r1
  403bac:	4906      	ldr	r1, [pc, #24]	; (403bc8 <_wcrtomb_r+0x4c>)
  403bae:	4a07      	ldr	r2, [pc, #28]	; (403bcc <_wcrtomb_r+0x50>)
  403bb0:	6809      	ldr	r1, [r1, #0]
  403bb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403bb4:	2900      	cmp	r1, #0
  403bb6:	bf08      	it	eq
  403bb8:	4611      	moveq	r1, r2
  403bba:	4622      	mov	r2, r4
  403bbc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403bc0:	a901      	add	r1, sp, #4
  403bc2:	47a0      	blx	r4
  403bc4:	e7e9      	b.n	403b9a <_wcrtomb_r+0x1e>
  403bc6:	bf00      	nop
  403bc8:	20400024 	.word	0x20400024
  403bcc:	20400454 	.word	0x20400454

00403bd0 <__ascii_wctomb>:
  403bd0:	b121      	cbz	r1, 403bdc <__ascii_wctomb+0xc>
  403bd2:	2aff      	cmp	r2, #255	; 0xff
  403bd4:	d804      	bhi.n	403be0 <__ascii_wctomb+0x10>
  403bd6:	700a      	strb	r2, [r1, #0]
  403bd8:	2001      	movs	r0, #1
  403bda:	4770      	bx	lr
  403bdc:	4608      	mov	r0, r1
  403bde:	4770      	bx	lr
  403be0:	238a      	movs	r3, #138	; 0x8a
  403be2:	6003      	str	r3, [r0, #0]
  403be4:	f04f 30ff 	mov.w	r0, #4294967295
  403be8:	4770      	bx	lr
  403bea:	bf00      	nop

00403bec <_write_r>:
  403bec:	b570      	push	{r4, r5, r6, lr}
  403bee:	460d      	mov	r5, r1
  403bf0:	4c08      	ldr	r4, [pc, #32]	; (403c14 <_write_r+0x28>)
  403bf2:	4611      	mov	r1, r2
  403bf4:	4606      	mov	r6, r0
  403bf6:	461a      	mov	r2, r3
  403bf8:	4628      	mov	r0, r5
  403bfa:	2300      	movs	r3, #0
  403bfc:	6023      	str	r3, [r4, #0]
  403bfe:	f7fc fb3f 	bl	400280 <_write>
  403c02:	1c43      	adds	r3, r0, #1
  403c04:	d000      	beq.n	403c08 <_write_r+0x1c>
  403c06:	bd70      	pop	{r4, r5, r6, pc}
  403c08:	6823      	ldr	r3, [r4, #0]
  403c0a:	2b00      	cmp	r3, #0
  403c0c:	d0fb      	beq.n	403c06 <_write_r+0x1a>
  403c0e:	6033      	str	r3, [r6, #0]
  403c10:	bd70      	pop	{r4, r5, r6, pc}
  403c12:	bf00      	nop
  403c14:	20400ad4 	.word	0x20400ad4

00403c18 <__register_exitproc>:
  403c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403c1c:	4d2c      	ldr	r5, [pc, #176]	; (403cd0 <__register_exitproc+0xb8>)
  403c1e:	4606      	mov	r6, r0
  403c20:	6828      	ldr	r0, [r5, #0]
  403c22:	4698      	mov	r8, r3
  403c24:	460f      	mov	r7, r1
  403c26:	4691      	mov	r9, r2
  403c28:	f7ff f8ae 	bl	402d88 <__retarget_lock_acquire_recursive>
  403c2c:	4b29      	ldr	r3, [pc, #164]	; (403cd4 <__register_exitproc+0xbc>)
  403c2e:	681c      	ldr	r4, [r3, #0]
  403c30:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403c34:	2b00      	cmp	r3, #0
  403c36:	d03e      	beq.n	403cb6 <__register_exitproc+0x9e>
  403c38:	685a      	ldr	r2, [r3, #4]
  403c3a:	2a1f      	cmp	r2, #31
  403c3c:	dc1c      	bgt.n	403c78 <__register_exitproc+0x60>
  403c3e:	f102 0e01 	add.w	lr, r2, #1
  403c42:	b176      	cbz	r6, 403c62 <__register_exitproc+0x4a>
  403c44:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403c48:	2401      	movs	r4, #1
  403c4a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403c4e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403c52:	4094      	lsls	r4, r2
  403c54:	4320      	orrs	r0, r4
  403c56:	2e02      	cmp	r6, #2
  403c58:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403c5c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403c60:	d023      	beq.n	403caa <__register_exitproc+0x92>
  403c62:	3202      	adds	r2, #2
  403c64:	f8c3 e004 	str.w	lr, [r3, #4]
  403c68:	6828      	ldr	r0, [r5, #0]
  403c6a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403c6e:	f7ff f88d 	bl	402d8c <__retarget_lock_release_recursive>
  403c72:	2000      	movs	r0, #0
  403c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403c78:	4b17      	ldr	r3, [pc, #92]	; (403cd8 <__register_exitproc+0xc0>)
  403c7a:	b30b      	cbz	r3, 403cc0 <__register_exitproc+0xa8>
  403c7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403c80:	f7ff f8fe 	bl	402e80 <malloc>
  403c84:	4603      	mov	r3, r0
  403c86:	b1d8      	cbz	r0, 403cc0 <__register_exitproc+0xa8>
  403c88:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403c8c:	6002      	str	r2, [r0, #0]
  403c8e:	2100      	movs	r1, #0
  403c90:	6041      	str	r1, [r0, #4]
  403c92:	460a      	mov	r2, r1
  403c94:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403c98:	f04f 0e01 	mov.w	lr, #1
  403c9c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403ca0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403ca4:	2e00      	cmp	r6, #0
  403ca6:	d0dc      	beq.n	403c62 <__register_exitproc+0x4a>
  403ca8:	e7cc      	b.n	403c44 <__register_exitproc+0x2c>
  403caa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403cae:	430c      	orrs	r4, r1
  403cb0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403cb4:	e7d5      	b.n	403c62 <__register_exitproc+0x4a>
  403cb6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403cba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403cbe:	e7bb      	b.n	403c38 <__register_exitproc+0x20>
  403cc0:	6828      	ldr	r0, [r5, #0]
  403cc2:	f7ff f863 	bl	402d8c <__retarget_lock_release_recursive>
  403cc6:	f04f 30ff 	mov.w	r0, #4294967295
  403cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403cce:	bf00      	nop
  403cd0:	20400450 	.word	0x20400450
  403cd4:	00404238 	.word	0x00404238
  403cd8:	00402e81 	.word	0x00402e81

00403cdc <_close_r>:
  403cdc:	b538      	push	{r3, r4, r5, lr}
  403cde:	4c07      	ldr	r4, [pc, #28]	; (403cfc <_close_r+0x20>)
  403ce0:	2300      	movs	r3, #0
  403ce2:	4605      	mov	r5, r0
  403ce4:	4608      	mov	r0, r1
  403ce6:	6023      	str	r3, [r4, #0]
  403ce8:	f7fd f880 	bl	400dec <_close>
  403cec:	1c43      	adds	r3, r0, #1
  403cee:	d000      	beq.n	403cf2 <_close_r+0x16>
  403cf0:	bd38      	pop	{r3, r4, r5, pc}
  403cf2:	6823      	ldr	r3, [r4, #0]
  403cf4:	2b00      	cmp	r3, #0
  403cf6:	d0fb      	beq.n	403cf0 <_close_r+0x14>
  403cf8:	602b      	str	r3, [r5, #0]
  403cfa:	bd38      	pop	{r3, r4, r5, pc}
  403cfc:	20400ad4 	.word	0x20400ad4

00403d00 <_fclose_r>:
  403d00:	b570      	push	{r4, r5, r6, lr}
  403d02:	b159      	cbz	r1, 403d1c <_fclose_r+0x1c>
  403d04:	4605      	mov	r5, r0
  403d06:	460c      	mov	r4, r1
  403d08:	b110      	cbz	r0, 403d10 <_fclose_r+0x10>
  403d0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403d0c:	2b00      	cmp	r3, #0
  403d0e:	d03c      	beq.n	403d8a <_fclose_r+0x8a>
  403d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403d12:	07d8      	lsls	r0, r3, #31
  403d14:	d505      	bpl.n	403d22 <_fclose_r+0x22>
  403d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d1a:	b92b      	cbnz	r3, 403d28 <_fclose_r+0x28>
  403d1c:	2600      	movs	r6, #0
  403d1e:	4630      	mov	r0, r6
  403d20:	bd70      	pop	{r4, r5, r6, pc}
  403d22:	89a3      	ldrh	r3, [r4, #12]
  403d24:	0599      	lsls	r1, r3, #22
  403d26:	d53c      	bpl.n	403da2 <_fclose_r+0xa2>
  403d28:	4621      	mov	r1, r4
  403d2a:	4628      	mov	r0, r5
  403d2c:	f7fe fb74 	bl	402418 <__sflush_r>
  403d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403d32:	4606      	mov	r6, r0
  403d34:	b133      	cbz	r3, 403d44 <_fclose_r+0x44>
  403d36:	69e1      	ldr	r1, [r4, #28]
  403d38:	4628      	mov	r0, r5
  403d3a:	4798      	blx	r3
  403d3c:	2800      	cmp	r0, #0
  403d3e:	bfb8      	it	lt
  403d40:	f04f 36ff 	movlt.w	r6, #4294967295
  403d44:	89a3      	ldrh	r3, [r4, #12]
  403d46:	061a      	lsls	r2, r3, #24
  403d48:	d422      	bmi.n	403d90 <_fclose_r+0x90>
  403d4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d4c:	b141      	cbz	r1, 403d60 <_fclose_r+0x60>
  403d4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403d52:	4299      	cmp	r1, r3
  403d54:	d002      	beq.n	403d5c <_fclose_r+0x5c>
  403d56:	4628      	mov	r0, r5
  403d58:	f7fe fd7c 	bl	402854 <_free_r>
  403d5c:	2300      	movs	r3, #0
  403d5e:	6323      	str	r3, [r4, #48]	; 0x30
  403d60:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403d62:	b121      	cbz	r1, 403d6e <_fclose_r+0x6e>
  403d64:	4628      	mov	r0, r5
  403d66:	f7fe fd75 	bl	402854 <_free_r>
  403d6a:	2300      	movs	r3, #0
  403d6c:	6463      	str	r3, [r4, #68]	; 0x44
  403d6e:	f7fe fc77 	bl	402660 <__sfp_lock_acquire>
  403d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403d74:	2200      	movs	r2, #0
  403d76:	07db      	lsls	r3, r3, #31
  403d78:	81a2      	strh	r2, [r4, #12]
  403d7a:	d50e      	bpl.n	403d9a <_fclose_r+0x9a>
  403d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d7e:	f7ff f801 	bl	402d84 <__retarget_lock_close_recursive>
  403d82:	f7fe fc73 	bl	40266c <__sfp_lock_release>
  403d86:	4630      	mov	r0, r6
  403d88:	bd70      	pop	{r4, r5, r6, pc}
  403d8a:	f7fe fc3d 	bl	402608 <__sinit>
  403d8e:	e7bf      	b.n	403d10 <_fclose_r+0x10>
  403d90:	6921      	ldr	r1, [r4, #16]
  403d92:	4628      	mov	r0, r5
  403d94:	f7fe fd5e 	bl	402854 <_free_r>
  403d98:	e7d7      	b.n	403d4a <_fclose_r+0x4a>
  403d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403d9c:	f7fe fff6 	bl	402d8c <__retarget_lock_release_recursive>
  403da0:	e7ec      	b.n	403d7c <_fclose_r+0x7c>
  403da2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403da4:	f7fe fff0 	bl	402d88 <__retarget_lock_acquire_recursive>
  403da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403dac:	2b00      	cmp	r3, #0
  403dae:	d1bb      	bne.n	403d28 <_fclose_r+0x28>
  403db0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403db2:	f016 0601 	ands.w	r6, r6, #1
  403db6:	d1b1      	bne.n	403d1c <_fclose_r+0x1c>
  403db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403dba:	f7fe ffe7 	bl	402d8c <__retarget_lock_release_recursive>
  403dbe:	4630      	mov	r0, r6
  403dc0:	bd70      	pop	{r4, r5, r6, pc}
  403dc2:	bf00      	nop

00403dc4 <_fstat_r>:
  403dc4:	b538      	push	{r3, r4, r5, lr}
  403dc6:	460b      	mov	r3, r1
  403dc8:	4c07      	ldr	r4, [pc, #28]	; (403de8 <_fstat_r+0x24>)
  403dca:	4605      	mov	r5, r0
  403dcc:	4611      	mov	r1, r2
  403dce:	4618      	mov	r0, r3
  403dd0:	2300      	movs	r3, #0
  403dd2:	6023      	str	r3, [r4, #0]
  403dd4:	f7fd f80d 	bl	400df2 <_fstat>
  403dd8:	1c43      	adds	r3, r0, #1
  403dda:	d000      	beq.n	403dde <_fstat_r+0x1a>
  403ddc:	bd38      	pop	{r3, r4, r5, pc}
  403dde:	6823      	ldr	r3, [r4, #0]
  403de0:	2b00      	cmp	r3, #0
  403de2:	d0fb      	beq.n	403ddc <_fstat_r+0x18>
  403de4:	602b      	str	r3, [r5, #0]
  403de6:	bd38      	pop	{r3, r4, r5, pc}
  403de8:	20400ad4 	.word	0x20400ad4

00403dec <_isatty_r>:
  403dec:	b538      	push	{r3, r4, r5, lr}
  403dee:	4c07      	ldr	r4, [pc, #28]	; (403e0c <_isatty_r+0x20>)
  403df0:	2300      	movs	r3, #0
  403df2:	4605      	mov	r5, r0
  403df4:	4608      	mov	r0, r1
  403df6:	6023      	str	r3, [r4, #0]
  403df8:	f7fd f800 	bl	400dfc <_isatty>
  403dfc:	1c43      	adds	r3, r0, #1
  403dfe:	d000      	beq.n	403e02 <_isatty_r+0x16>
  403e00:	bd38      	pop	{r3, r4, r5, pc}
  403e02:	6823      	ldr	r3, [r4, #0]
  403e04:	2b00      	cmp	r3, #0
  403e06:	d0fb      	beq.n	403e00 <_isatty_r+0x14>
  403e08:	602b      	str	r3, [r5, #0]
  403e0a:	bd38      	pop	{r3, r4, r5, pc}
  403e0c:	20400ad4 	.word	0x20400ad4

00403e10 <_lseek_r>:
  403e10:	b570      	push	{r4, r5, r6, lr}
  403e12:	460d      	mov	r5, r1
  403e14:	4c08      	ldr	r4, [pc, #32]	; (403e38 <_lseek_r+0x28>)
  403e16:	4611      	mov	r1, r2
  403e18:	4606      	mov	r6, r0
  403e1a:	461a      	mov	r2, r3
  403e1c:	4628      	mov	r0, r5
  403e1e:	2300      	movs	r3, #0
  403e20:	6023      	str	r3, [r4, #0]
  403e22:	f7fc ffed 	bl	400e00 <_lseek>
  403e26:	1c43      	adds	r3, r0, #1
  403e28:	d000      	beq.n	403e2c <_lseek_r+0x1c>
  403e2a:	bd70      	pop	{r4, r5, r6, pc}
  403e2c:	6823      	ldr	r3, [r4, #0]
  403e2e:	2b00      	cmp	r3, #0
  403e30:	d0fb      	beq.n	403e2a <_lseek_r+0x1a>
  403e32:	6033      	str	r3, [r6, #0]
  403e34:	bd70      	pop	{r4, r5, r6, pc}
  403e36:	bf00      	nop
  403e38:	20400ad4 	.word	0x20400ad4

00403e3c <_read_r>:
  403e3c:	b570      	push	{r4, r5, r6, lr}
  403e3e:	460d      	mov	r5, r1
  403e40:	4c08      	ldr	r4, [pc, #32]	; (403e64 <_read_r+0x28>)
  403e42:	4611      	mov	r1, r2
  403e44:	4606      	mov	r6, r0
  403e46:	461a      	mov	r2, r3
  403e48:	4628      	mov	r0, r5
  403e4a:	2300      	movs	r3, #0
  403e4c:	6023      	str	r3, [r4, #0]
  403e4e:	f7fc f9f9 	bl	400244 <_read>
  403e52:	1c43      	adds	r3, r0, #1
  403e54:	d000      	beq.n	403e58 <_read_r+0x1c>
  403e56:	bd70      	pop	{r4, r5, r6, pc}
  403e58:	6823      	ldr	r3, [r4, #0]
  403e5a:	2b00      	cmp	r3, #0
  403e5c:	d0fb      	beq.n	403e56 <_read_r+0x1a>
  403e5e:	6033      	str	r3, [r6, #0]
  403e60:	bd70      	pop	{r4, r5, r6, pc}
  403e62:	bf00      	nop
  403e64:	20400ad4 	.word	0x20400ad4

00403e68 <__aeabi_uldivmod>:
  403e68:	b953      	cbnz	r3, 403e80 <__aeabi_uldivmod+0x18>
  403e6a:	b94a      	cbnz	r2, 403e80 <__aeabi_uldivmod+0x18>
  403e6c:	2900      	cmp	r1, #0
  403e6e:	bf08      	it	eq
  403e70:	2800      	cmpeq	r0, #0
  403e72:	bf1c      	itt	ne
  403e74:	f04f 31ff 	movne.w	r1, #4294967295
  403e78:	f04f 30ff 	movne.w	r0, #4294967295
  403e7c:	f000 b97a 	b.w	404174 <__aeabi_idiv0>
  403e80:	f1ad 0c08 	sub.w	ip, sp, #8
  403e84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403e88:	f000 f806 	bl	403e98 <__udivmoddi4>
  403e8c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403e94:	b004      	add	sp, #16
  403e96:	4770      	bx	lr

00403e98 <__udivmoddi4>:
  403e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e9c:	468c      	mov	ip, r1
  403e9e:	460d      	mov	r5, r1
  403ea0:	4604      	mov	r4, r0
  403ea2:	9e08      	ldr	r6, [sp, #32]
  403ea4:	2b00      	cmp	r3, #0
  403ea6:	d151      	bne.n	403f4c <__udivmoddi4+0xb4>
  403ea8:	428a      	cmp	r2, r1
  403eaa:	4617      	mov	r7, r2
  403eac:	d96d      	bls.n	403f8a <__udivmoddi4+0xf2>
  403eae:	fab2 fe82 	clz	lr, r2
  403eb2:	f1be 0f00 	cmp.w	lr, #0
  403eb6:	d00b      	beq.n	403ed0 <__udivmoddi4+0x38>
  403eb8:	f1ce 0c20 	rsb	ip, lr, #32
  403ebc:	fa01 f50e 	lsl.w	r5, r1, lr
  403ec0:	fa20 fc0c 	lsr.w	ip, r0, ip
  403ec4:	fa02 f70e 	lsl.w	r7, r2, lr
  403ec8:	ea4c 0c05 	orr.w	ip, ip, r5
  403ecc:	fa00 f40e 	lsl.w	r4, r0, lr
  403ed0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403ed4:	0c25      	lsrs	r5, r4, #16
  403ed6:	fbbc f8fa 	udiv	r8, ip, sl
  403eda:	fa1f f987 	uxth.w	r9, r7
  403ede:	fb0a cc18 	mls	ip, sl, r8, ip
  403ee2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403ee6:	fb08 f309 	mul.w	r3, r8, r9
  403eea:	42ab      	cmp	r3, r5
  403eec:	d90a      	bls.n	403f04 <__udivmoddi4+0x6c>
  403eee:	19ed      	adds	r5, r5, r7
  403ef0:	f108 32ff 	add.w	r2, r8, #4294967295
  403ef4:	f080 8123 	bcs.w	40413e <__udivmoddi4+0x2a6>
  403ef8:	42ab      	cmp	r3, r5
  403efa:	f240 8120 	bls.w	40413e <__udivmoddi4+0x2a6>
  403efe:	f1a8 0802 	sub.w	r8, r8, #2
  403f02:	443d      	add	r5, r7
  403f04:	1aed      	subs	r5, r5, r3
  403f06:	b2a4      	uxth	r4, r4
  403f08:	fbb5 f0fa 	udiv	r0, r5, sl
  403f0c:	fb0a 5510 	mls	r5, sl, r0, r5
  403f10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403f14:	fb00 f909 	mul.w	r9, r0, r9
  403f18:	45a1      	cmp	r9, r4
  403f1a:	d909      	bls.n	403f30 <__udivmoddi4+0x98>
  403f1c:	19e4      	adds	r4, r4, r7
  403f1e:	f100 33ff 	add.w	r3, r0, #4294967295
  403f22:	f080 810a 	bcs.w	40413a <__udivmoddi4+0x2a2>
  403f26:	45a1      	cmp	r9, r4
  403f28:	f240 8107 	bls.w	40413a <__udivmoddi4+0x2a2>
  403f2c:	3802      	subs	r0, #2
  403f2e:	443c      	add	r4, r7
  403f30:	eba4 0409 	sub.w	r4, r4, r9
  403f34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403f38:	2100      	movs	r1, #0
  403f3a:	2e00      	cmp	r6, #0
  403f3c:	d061      	beq.n	404002 <__udivmoddi4+0x16a>
  403f3e:	fa24 f40e 	lsr.w	r4, r4, lr
  403f42:	2300      	movs	r3, #0
  403f44:	6034      	str	r4, [r6, #0]
  403f46:	6073      	str	r3, [r6, #4]
  403f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f4c:	428b      	cmp	r3, r1
  403f4e:	d907      	bls.n	403f60 <__udivmoddi4+0xc8>
  403f50:	2e00      	cmp	r6, #0
  403f52:	d054      	beq.n	403ffe <__udivmoddi4+0x166>
  403f54:	2100      	movs	r1, #0
  403f56:	e886 0021 	stmia.w	r6, {r0, r5}
  403f5a:	4608      	mov	r0, r1
  403f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f60:	fab3 f183 	clz	r1, r3
  403f64:	2900      	cmp	r1, #0
  403f66:	f040 808e 	bne.w	404086 <__udivmoddi4+0x1ee>
  403f6a:	42ab      	cmp	r3, r5
  403f6c:	d302      	bcc.n	403f74 <__udivmoddi4+0xdc>
  403f6e:	4282      	cmp	r2, r0
  403f70:	f200 80fa 	bhi.w	404168 <__udivmoddi4+0x2d0>
  403f74:	1a84      	subs	r4, r0, r2
  403f76:	eb65 0503 	sbc.w	r5, r5, r3
  403f7a:	2001      	movs	r0, #1
  403f7c:	46ac      	mov	ip, r5
  403f7e:	2e00      	cmp	r6, #0
  403f80:	d03f      	beq.n	404002 <__udivmoddi4+0x16a>
  403f82:	e886 1010 	stmia.w	r6, {r4, ip}
  403f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f8a:	b912      	cbnz	r2, 403f92 <__udivmoddi4+0xfa>
  403f8c:	2701      	movs	r7, #1
  403f8e:	fbb7 f7f2 	udiv	r7, r7, r2
  403f92:	fab7 fe87 	clz	lr, r7
  403f96:	f1be 0f00 	cmp.w	lr, #0
  403f9a:	d134      	bne.n	404006 <__udivmoddi4+0x16e>
  403f9c:	1beb      	subs	r3, r5, r7
  403f9e:	0c3a      	lsrs	r2, r7, #16
  403fa0:	fa1f fc87 	uxth.w	ip, r7
  403fa4:	2101      	movs	r1, #1
  403fa6:	fbb3 f8f2 	udiv	r8, r3, r2
  403faa:	0c25      	lsrs	r5, r4, #16
  403fac:	fb02 3318 	mls	r3, r2, r8, r3
  403fb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403fb4:	fb0c f308 	mul.w	r3, ip, r8
  403fb8:	42ab      	cmp	r3, r5
  403fba:	d907      	bls.n	403fcc <__udivmoddi4+0x134>
  403fbc:	19ed      	adds	r5, r5, r7
  403fbe:	f108 30ff 	add.w	r0, r8, #4294967295
  403fc2:	d202      	bcs.n	403fca <__udivmoddi4+0x132>
  403fc4:	42ab      	cmp	r3, r5
  403fc6:	f200 80d1 	bhi.w	40416c <__udivmoddi4+0x2d4>
  403fca:	4680      	mov	r8, r0
  403fcc:	1aed      	subs	r5, r5, r3
  403fce:	b2a3      	uxth	r3, r4
  403fd0:	fbb5 f0f2 	udiv	r0, r5, r2
  403fd4:	fb02 5510 	mls	r5, r2, r0, r5
  403fd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403fdc:	fb0c fc00 	mul.w	ip, ip, r0
  403fe0:	45a4      	cmp	ip, r4
  403fe2:	d907      	bls.n	403ff4 <__udivmoddi4+0x15c>
  403fe4:	19e4      	adds	r4, r4, r7
  403fe6:	f100 33ff 	add.w	r3, r0, #4294967295
  403fea:	d202      	bcs.n	403ff2 <__udivmoddi4+0x15a>
  403fec:	45a4      	cmp	ip, r4
  403fee:	f200 80b8 	bhi.w	404162 <__udivmoddi4+0x2ca>
  403ff2:	4618      	mov	r0, r3
  403ff4:	eba4 040c 	sub.w	r4, r4, ip
  403ff8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403ffc:	e79d      	b.n	403f3a <__udivmoddi4+0xa2>
  403ffe:	4631      	mov	r1, r6
  404000:	4630      	mov	r0, r6
  404002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404006:	f1ce 0420 	rsb	r4, lr, #32
  40400a:	fa05 f30e 	lsl.w	r3, r5, lr
  40400e:	fa07 f70e 	lsl.w	r7, r7, lr
  404012:	fa20 f804 	lsr.w	r8, r0, r4
  404016:	0c3a      	lsrs	r2, r7, #16
  404018:	fa25 f404 	lsr.w	r4, r5, r4
  40401c:	ea48 0803 	orr.w	r8, r8, r3
  404020:	fbb4 f1f2 	udiv	r1, r4, r2
  404024:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404028:	fb02 4411 	mls	r4, r2, r1, r4
  40402c:	fa1f fc87 	uxth.w	ip, r7
  404030:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404034:	fb01 f30c 	mul.w	r3, r1, ip
  404038:	42ab      	cmp	r3, r5
  40403a:	fa00 f40e 	lsl.w	r4, r0, lr
  40403e:	d909      	bls.n	404054 <__udivmoddi4+0x1bc>
  404040:	19ed      	adds	r5, r5, r7
  404042:	f101 30ff 	add.w	r0, r1, #4294967295
  404046:	f080 808a 	bcs.w	40415e <__udivmoddi4+0x2c6>
  40404a:	42ab      	cmp	r3, r5
  40404c:	f240 8087 	bls.w	40415e <__udivmoddi4+0x2c6>
  404050:	3902      	subs	r1, #2
  404052:	443d      	add	r5, r7
  404054:	1aeb      	subs	r3, r5, r3
  404056:	fa1f f588 	uxth.w	r5, r8
  40405a:	fbb3 f0f2 	udiv	r0, r3, r2
  40405e:	fb02 3310 	mls	r3, r2, r0, r3
  404062:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404066:	fb00 f30c 	mul.w	r3, r0, ip
  40406a:	42ab      	cmp	r3, r5
  40406c:	d907      	bls.n	40407e <__udivmoddi4+0x1e6>
  40406e:	19ed      	adds	r5, r5, r7
  404070:	f100 38ff 	add.w	r8, r0, #4294967295
  404074:	d26f      	bcs.n	404156 <__udivmoddi4+0x2be>
  404076:	42ab      	cmp	r3, r5
  404078:	d96d      	bls.n	404156 <__udivmoddi4+0x2be>
  40407a:	3802      	subs	r0, #2
  40407c:	443d      	add	r5, r7
  40407e:	1aeb      	subs	r3, r5, r3
  404080:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404084:	e78f      	b.n	403fa6 <__udivmoddi4+0x10e>
  404086:	f1c1 0720 	rsb	r7, r1, #32
  40408a:	fa22 f807 	lsr.w	r8, r2, r7
  40408e:	408b      	lsls	r3, r1
  404090:	fa05 f401 	lsl.w	r4, r5, r1
  404094:	ea48 0303 	orr.w	r3, r8, r3
  404098:	fa20 fe07 	lsr.w	lr, r0, r7
  40409c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4040a0:	40fd      	lsrs	r5, r7
  4040a2:	ea4e 0e04 	orr.w	lr, lr, r4
  4040a6:	fbb5 f9fc 	udiv	r9, r5, ip
  4040aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4040ae:	fb0c 5519 	mls	r5, ip, r9, r5
  4040b2:	fa1f f883 	uxth.w	r8, r3
  4040b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4040ba:	fb09 f408 	mul.w	r4, r9, r8
  4040be:	42ac      	cmp	r4, r5
  4040c0:	fa02 f201 	lsl.w	r2, r2, r1
  4040c4:	fa00 fa01 	lsl.w	sl, r0, r1
  4040c8:	d908      	bls.n	4040dc <__udivmoddi4+0x244>
  4040ca:	18ed      	adds	r5, r5, r3
  4040cc:	f109 30ff 	add.w	r0, r9, #4294967295
  4040d0:	d243      	bcs.n	40415a <__udivmoddi4+0x2c2>
  4040d2:	42ac      	cmp	r4, r5
  4040d4:	d941      	bls.n	40415a <__udivmoddi4+0x2c2>
  4040d6:	f1a9 0902 	sub.w	r9, r9, #2
  4040da:	441d      	add	r5, r3
  4040dc:	1b2d      	subs	r5, r5, r4
  4040de:	fa1f fe8e 	uxth.w	lr, lr
  4040e2:	fbb5 f0fc 	udiv	r0, r5, ip
  4040e6:	fb0c 5510 	mls	r5, ip, r0, r5
  4040ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4040ee:	fb00 f808 	mul.w	r8, r0, r8
  4040f2:	45a0      	cmp	r8, r4
  4040f4:	d907      	bls.n	404106 <__udivmoddi4+0x26e>
  4040f6:	18e4      	adds	r4, r4, r3
  4040f8:	f100 35ff 	add.w	r5, r0, #4294967295
  4040fc:	d229      	bcs.n	404152 <__udivmoddi4+0x2ba>
  4040fe:	45a0      	cmp	r8, r4
  404100:	d927      	bls.n	404152 <__udivmoddi4+0x2ba>
  404102:	3802      	subs	r0, #2
  404104:	441c      	add	r4, r3
  404106:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40410a:	eba4 0408 	sub.w	r4, r4, r8
  40410e:	fba0 8902 	umull	r8, r9, r0, r2
  404112:	454c      	cmp	r4, r9
  404114:	46c6      	mov	lr, r8
  404116:	464d      	mov	r5, r9
  404118:	d315      	bcc.n	404146 <__udivmoddi4+0x2ae>
  40411a:	d012      	beq.n	404142 <__udivmoddi4+0x2aa>
  40411c:	b156      	cbz	r6, 404134 <__udivmoddi4+0x29c>
  40411e:	ebba 030e 	subs.w	r3, sl, lr
  404122:	eb64 0405 	sbc.w	r4, r4, r5
  404126:	fa04 f707 	lsl.w	r7, r4, r7
  40412a:	40cb      	lsrs	r3, r1
  40412c:	431f      	orrs	r7, r3
  40412e:	40cc      	lsrs	r4, r1
  404130:	6037      	str	r7, [r6, #0]
  404132:	6074      	str	r4, [r6, #4]
  404134:	2100      	movs	r1, #0
  404136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40413a:	4618      	mov	r0, r3
  40413c:	e6f8      	b.n	403f30 <__udivmoddi4+0x98>
  40413e:	4690      	mov	r8, r2
  404140:	e6e0      	b.n	403f04 <__udivmoddi4+0x6c>
  404142:	45c2      	cmp	sl, r8
  404144:	d2ea      	bcs.n	40411c <__udivmoddi4+0x284>
  404146:	ebb8 0e02 	subs.w	lr, r8, r2
  40414a:	eb69 0503 	sbc.w	r5, r9, r3
  40414e:	3801      	subs	r0, #1
  404150:	e7e4      	b.n	40411c <__udivmoddi4+0x284>
  404152:	4628      	mov	r0, r5
  404154:	e7d7      	b.n	404106 <__udivmoddi4+0x26e>
  404156:	4640      	mov	r0, r8
  404158:	e791      	b.n	40407e <__udivmoddi4+0x1e6>
  40415a:	4681      	mov	r9, r0
  40415c:	e7be      	b.n	4040dc <__udivmoddi4+0x244>
  40415e:	4601      	mov	r1, r0
  404160:	e778      	b.n	404054 <__udivmoddi4+0x1bc>
  404162:	3802      	subs	r0, #2
  404164:	443c      	add	r4, r7
  404166:	e745      	b.n	403ff4 <__udivmoddi4+0x15c>
  404168:	4608      	mov	r0, r1
  40416a:	e708      	b.n	403f7e <__udivmoddi4+0xe6>
  40416c:	f1a8 0802 	sub.w	r8, r8, #2
  404170:	443d      	add	r5, r7
  404172:	e72b      	b.n	403fcc <__udivmoddi4+0x134>

00404174 <__aeabi_idiv0>:
  404174:	4770      	bx	lr
  404176:	bf00      	nop
  404178:	1b485b1b 	.word	0x1b485b1b
  40417c:	00004a5b 	.word	0x00004a5b
  404180:	72727543 	.word	0x72727543
  404184:	20746e65 	.word	0x20746e65
  404188:	656d6974 	.word	0x656d6974
  40418c:	3025203a 	.word	0x3025203a
  404190:	253a7532 	.word	0x253a7532
  404194:	3a753230 	.word	0x3a753230
  404198:	75323025 	.word	0x75323025
  40419c:	0000000a 	.word	0x0000000a
  4041a0:	72727543 	.word	0x72727543
  4041a4:	20746e65 	.word	0x20746e65
  4041a8:	65746164 	.word	0x65746164
  4041ac:	3025203a 	.word	0x3025203a
  4041b0:	252f7532 	.word	0x252f7532
  4041b4:	2f753230 	.word	0x2f753230
  4041b8:	75343025 	.word	0x75343025
  4041bc:	0a732520 	.word	0x0a732520
  4041c0:	00000000 	.word	0x00000000
  4041c4:	65746e49 	.word	0x65746e49
  4041c8:	70757272 	.word	0x70757272
  4041cc:	43203a74 	.word	0x43203a74
  4041d0:	746e756f 	.word	0x746e756f
  4041d4:	68207265 	.word	0x68207265
  4041d8:	72207361 	.word	0x72207361
  4041dc:	68636165 	.word	0x68636165
  4041e0:	25206465 	.word	0x25206465
  4041e4:	000a2164 	.word	0x000a2164
  4041e8:	52202d2d 	.word	0x52202d2d
  4041ec:	45204354 	.word	0x45204354
  4041f0:	706d6178 	.word	0x706d6178
  4041f4:	2d20656c 	.word	0x2d20656c
  4041f8:	2d0a0d2d 	.word	0x2d0a0d2d
  4041fc:	4153202d 	.word	0x4153202d
  404200:	3137564d 	.word	0x3137564d
  404204:	544c582d 	.word	0x544c582d
  404208:	2d204152 	.word	0x2d204152
  40420c:	2d0a0d2d 	.word	0x2d0a0d2d
  404210:	6f43202d 	.word	0x6f43202d
  404214:	6c69706d 	.word	0x6c69706d
  404218:	203a6465 	.word	0x203a6465
  40421c:	20677541 	.word	0x20677541
  404220:	32203620 	.word	0x32203620
  404224:	20343230 	.word	0x20343230
  404228:	313a3431 	.word	0x313a3431
  40422c:	36303a39 	.word	0x36303a39
  404230:	0d2d2d20 	.word	0x0d2d2d20
  404234:	00000000 	.word	0x00000000

00404238 <_global_impure_ptr>:
  404238:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  404248:	46454443 00000000 33323130 37363534     CDEF....01234567
  404258:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  404268:	0000296c                                l)..

0040426c <blanks.7217>:
  40426c:	20202020 20202020 20202020 20202020                     

0040427c <zeroes.7218>:
  40427c:	30303030 30303030 30303030 30303030     0000000000000000
  40428c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040429c <_ctype_>:
  40429c:	20202000 20202020 28282020 20282828     .         ((((( 
  4042ac:	20202020 20202020 20202020 20202020                     
  4042bc:	10108820 10101010 10101010 10101010      ...............
  4042cc:	04040410 04040404 10040404 10101010     ................
  4042dc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4042ec:	01010101 01010101 01010101 10101010     ................
  4042fc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40430c:	02020202 02020202 02020202 10101010     ................
  40431c:	00000020 00000000 00000000 00000000      ...............
	...

004043a0 <_init>:
  4043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043a2:	bf00      	nop
  4043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4043a6:	bc08      	pop	{r3}
  4043a8:	469e      	mov	lr, r3
  4043aa:	4770      	bx	lr

004043ac <__init_array_start>:
  4043ac:	004023f9 	.word	0x004023f9

004043b0 <__frame_dummy_init_array_entry>:
  4043b0:	0040018d                                ..@.

004043b4 <_fini>:
  4043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4043b6:	bf00      	nop
  4043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4043ba:	bc08      	pop	{r3}
  4043bc:	469e      	mov	lr, r3
  4043be:	4770      	bx	lr

004043c0 <__fini_array_start>:
  4043c0:	00400169 	.word	0x00400169
