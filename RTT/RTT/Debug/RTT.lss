
RTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040c8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004040c8  004040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004040d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000104  204009b8  00404a88  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400abc  00404b8c  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402ac0  00406b90  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000138e6  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a53  00000000  00000000  00034325  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003fdf  00000000  00000000  00036d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a18  00000000  00000000  0003ad57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a48  00000000  00000000  0003b76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000205c6  00000000  00000000  0003c1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000af16  00000000  00000000  0005c77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009389a  00000000  00000000  00067693  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002228  00000000  00000000  000faf30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2a 40 20 65 08 40 00 63 08 40 00 63 08 40 00     .*@ e.@.c.@.c.@.
  400010:	63 08 40 00 63 08 40 00 63 08 40 00 00 00 00 00     c.@.c.@.c.@.....
	...
  40002c:	63 08 40 00 63 08 40 00 00 00 00 00 63 08 40 00     c.@.c.@.....c.@.
  40003c:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  40004c:	11 0d 40 00 63 08 40 00 63 08 40 00 63 08 40 00     ..@.c.@.c.@.c.@.
  40005c:	63 08 40 00 63 08 40 00 00 00 00 00 c5 04 40 00     c.@.c.@.......@.
  40006c:	d9 04 40 00 ed 04 40 00 63 08 40 00 63 08 40 00     ..@...@.c.@.c.@.
  40007c:	63 08 40 00 01 05 40 00 15 05 40 00 63 08 40 00     c.@...@...@.c.@.
  40008c:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  40009c:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  4000ac:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  4000bc:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  4000cc:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  4000dc:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  4000ec:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  4000fc:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  40010c:	63 08 40 00 63 08 40 00 63 08 40 00 00 00 00 00     c.@.c.@.c.@.....
  40011c:	00 00 00 00 63 08 40 00 63 08 40 00 63 08 40 00     ....c.@.c.@.c.@.
  40012c:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  40013c:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  40014c:	63 08 40 00 63 08 40 00 63 08 40 00 63 08 40 00     c.@.c.@.c.@.c.@.
  40015c:	63 08 40 00 63 08 40 00 63 08 40 00                 c.@.c.@.c.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	004040d0 	.word	0x004040d0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004040d0 	.word	0x004040d0
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	004040d0 	.word	0x004040d0
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400a39 	.word	0x00400a39
  400220:	004005c5 	.word	0x004005c5
  400224:	00400619 	.word	0x00400619
  400228:	00400629 	.word	0x00400629
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400639 	.word	0x00400639
  400238:	00400529 	.word	0x00400529
  40023c:	00400561 	.word	0x00400561
  400240:	0040092d 	.word	0x0040092d

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400a8c 	.word	0x20400a8c
  40027c:	20400a84 	.word	0x20400a84

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400a88 	.word	0x20400a88
  4002cc:	20400a8c 	.word	0x20400a8c

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5c      	ldr	r3, [pc, #368]	; (400448 <board_init+0x178>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b5a      	ldr	r3, [pc, #360]	; (40044c <board_init+0x17c>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3f      	ldr	r3, [pc, #252]	; (40044c <board_init+0x17c>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3c      	ldr	r2, [pc, #240]	; (400450 <board_init+0x180>)
  400360:	493c      	ldr	r1, [pc, #240]	; (400454 <board_init+0x184>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c30      	ldr	r4, [pc, #192]	; (400458 <board_init+0x188>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2c      	ldr	r3, [pc, #176]	; (40045c <board_init+0x18c>)
  4003aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003b6:	492a      	ldr	r1, [pc, #168]	; (400460 <board_init+0x190>)
  4003b8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4003bc:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003c2:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003c4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003ca:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003d2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003da:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4003de:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4003e6:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003fe:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400400:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400406:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400408:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40040e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400410:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400414:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400416:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400418:	4a12      	ldr	r2, [pc, #72]	; (400464 <board_init+0x194>)
  40041a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40041e:	f043 0310 	orr.w	r3, r3, #16
  400422:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400426:	4b10      	ldr	r3, [pc, #64]	; (400468 <board_init+0x198>)
  400428:	2210      	movs	r2, #16
  40042a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40042c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400430:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400432:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400438:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40043a:	4311      	orrs	r1, r2
  40043c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40043e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400440:	4311      	orrs	r1, r2
  400442:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400444:	605a      	str	r2, [r3, #4]
  400446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400448:	400e1850 	.word	0x400e1850
  40044c:	e000ed00 	.word	0xe000ed00
  400450:	400e0c00 	.word	0x400e0c00
  400454:	5a00080c 	.word	0x5a00080c
  400458:	00400649 	.word	0x00400649
  40045c:	400e0e00 	.word	0x400e0e00
  400460:	400e1200 	.word	0x400e1200
  400464:	40088000 	.word	0x40088000
  400468:	400e1000 	.word	0x400e1000

0040046c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40046c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40046e:	4770      	bx	lr

00400470 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400470:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400472:	4770      	bx	lr

00400474 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400478:	4604      	mov	r4, r0
  40047a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40047c:	4b0e      	ldr	r3, [pc, #56]	; (4004b8 <pio_handler_process+0x44>)
  40047e:	4798      	blx	r3
  400480:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400482:	4620      	mov	r0, r4
  400484:	4b0d      	ldr	r3, [pc, #52]	; (4004bc <pio_handler_process+0x48>)
  400486:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400488:	4005      	ands	r5, r0
  40048a:	d013      	beq.n	4004b4 <pio_handler_process+0x40>
  40048c:	4c0c      	ldr	r4, [pc, #48]	; (4004c0 <pio_handler_process+0x4c>)
  40048e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400492:	e003      	b.n	40049c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400494:	42b4      	cmp	r4, r6
  400496:	d00d      	beq.n	4004b4 <pio_handler_process+0x40>
  400498:	3410      	adds	r4, #16
		while (status != 0) {
  40049a:	b15d      	cbz	r5, 4004b4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40049c:	6820      	ldr	r0, [r4, #0]
  40049e:	4540      	cmp	r0, r8
  4004a0:	d1f8      	bne.n	400494 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004a2:	6861      	ldr	r1, [r4, #4]
  4004a4:	4229      	tst	r1, r5
  4004a6:	d0f5      	beq.n	400494 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004a8:	68e3      	ldr	r3, [r4, #12]
  4004aa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4004ac:	6863      	ldr	r3, [r4, #4]
  4004ae:	ea25 0503 	bic.w	r5, r5, r3
  4004b2:	e7ef      	b.n	400494 <pio_handler_process+0x20>
  4004b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004b8:	0040046d 	.word	0x0040046d
  4004bc:	00400471 	.word	0x00400471
  4004c0:	204009d4 	.word	0x204009d4

004004c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4004c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4004c6:	210a      	movs	r1, #10
  4004c8:	4801      	ldr	r0, [pc, #4]	; (4004d0 <PIOA_Handler+0xc>)
  4004ca:	4b02      	ldr	r3, [pc, #8]	; (4004d4 <PIOA_Handler+0x10>)
  4004cc:	4798      	blx	r3
  4004ce:	bd08      	pop	{r3, pc}
  4004d0:	400e0e00 	.word	0x400e0e00
  4004d4:	00400475 	.word	0x00400475

004004d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4004d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4004da:	210b      	movs	r1, #11
  4004dc:	4801      	ldr	r0, [pc, #4]	; (4004e4 <PIOB_Handler+0xc>)
  4004de:	4b02      	ldr	r3, [pc, #8]	; (4004e8 <PIOB_Handler+0x10>)
  4004e0:	4798      	blx	r3
  4004e2:	bd08      	pop	{r3, pc}
  4004e4:	400e1000 	.word	0x400e1000
  4004e8:	00400475 	.word	0x00400475

004004ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004ee:	210c      	movs	r1, #12
  4004f0:	4801      	ldr	r0, [pc, #4]	; (4004f8 <PIOC_Handler+0xc>)
  4004f2:	4b02      	ldr	r3, [pc, #8]	; (4004fc <PIOC_Handler+0x10>)
  4004f4:	4798      	blx	r3
  4004f6:	bd08      	pop	{r3, pc}
  4004f8:	400e1200 	.word	0x400e1200
  4004fc:	00400475 	.word	0x00400475

00400500 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400500:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400502:	2110      	movs	r1, #16
  400504:	4801      	ldr	r0, [pc, #4]	; (40050c <PIOD_Handler+0xc>)
  400506:	4b02      	ldr	r3, [pc, #8]	; (400510 <PIOD_Handler+0x10>)
  400508:	4798      	blx	r3
  40050a:	bd08      	pop	{r3, pc}
  40050c:	400e1400 	.word	0x400e1400
  400510:	00400475 	.word	0x00400475

00400514 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400514:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400516:	2111      	movs	r1, #17
  400518:	4801      	ldr	r0, [pc, #4]	; (400520 <PIOE_Handler+0xc>)
  40051a:	4b02      	ldr	r3, [pc, #8]	; (400524 <PIOE_Handler+0x10>)
  40051c:	4798      	blx	r3
  40051e:	bd08      	pop	{r3, pc}
  400520:	400e1600 	.word	0x400e1600
  400524:	00400475 	.word	0x00400475

00400528 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400528:	2803      	cmp	r0, #3
  40052a:	d011      	beq.n	400550 <pmc_mck_set_division+0x28>
  40052c:	2804      	cmp	r0, #4
  40052e:	d012      	beq.n	400556 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400530:	2802      	cmp	r0, #2
  400532:	bf0c      	ite	eq
  400534:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400538:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40053a:	4a08      	ldr	r2, [pc, #32]	; (40055c <pmc_mck_set_division+0x34>)
  40053c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40053e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400542:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400544:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400546:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400548:	f013 0f08 	tst.w	r3, #8
  40054c:	d0fb      	beq.n	400546 <pmc_mck_set_division+0x1e>
}
  40054e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400550:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400554:	e7f1      	b.n	40053a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400556:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40055a:	e7ee      	b.n	40053a <pmc_mck_set_division+0x12>
  40055c:	400e0600 	.word	0x400e0600

00400560 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400560:	4a17      	ldr	r2, [pc, #92]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  400562:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400568:	4318      	orrs	r0, r3
  40056a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40056c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40056e:	f013 0f08 	tst.w	r3, #8
  400572:	d10a      	bne.n	40058a <pmc_switch_mck_to_pllack+0x2a>
  400574:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400578:	4911      	ldr	r1, [pc, #68]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  40057a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40057c:	f012 0f08 	tst.w	r2, #8
  400580:	d103      	bne.n	40058a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400582:	3b01      	subs	r3, #1
  400584:	d1f9      	bne.n	40057a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400586:	2001      	movs	r0, #1
  400588:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40058a:	4a0d      	ldr	r2, [pc, #52]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  40058c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40058e:	f023 0303 	bic.w	r3, r3, #3
  400592:	f043 0302 	orr.w	r3, r3, #2
  400596:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400598:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40059a:	f013 0f08 	tst.w	r3, #8
  40059e:	d10a      	bne.n	4005b6 <pmc_switch_mck_to_pllack+0x56>
  4005a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005a4:	4906      	ldr	r1, [pc, #24]	; (4005c0 <pmc_switch_mck_to_pllack+0x60>)
  4005a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005a8:	f012 0f08 	tst.w	r2, #8
  4005ac:	d105      	bne.n	4005ba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ae:	3b01      	subs	r3, #1
  4005b0:	d1f9      	bne.n	4005a6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4005b2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005b4:	4770      	bx	lr
	return 0;
  4005b6:	2000      	movs	r0, #0
  4005b8:	4770      	bx	lr
  4005ba:	2000      	movs	r0, #0
  4005bc:	4770      	bx	lr
  4005be:	bf00      	nop
  4005c0:	400e0600 	.word	0x400e0600

004005c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005c4:	b9a0      	cbnz	r0, 4005f0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005c6:	480e      	ldr	r0, [pc, #56]	; (400600 <pmc_switch_mainck_to_xtal+0x3c>)
  4005c8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005ca:	0209      	lsls	r1, r1, #8
  4005cc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005ce:	4a0d      	ldr	r2, [pc, #52]	; (400604 <pmc_switch_mainck_to_xtal+0x40>)
  4005d0:	401a      	ands	r2, r3
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <pmc_switch_mainck_to_xtal+0x44>)
  4005d4:	4313      	orrs	r3, r2
  4005d6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005d8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005da:	4602      	mov	r2, r0
  4005dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005de:	f013 0f01 	tst.w	r3, #1
  4005e2:	d0fb      	beq.n	4005dc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005e4:	4a06      	ldr	r2, [pc, #24]	; (400600 <pmc_switch_mainck_to_xtal+0x3c>)
  4005e6:	6a11      	ldr	r1, [r2, #32]
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <pmc_switch_mainck_to_xtal+0x48>)
  4005ea:	430b      	orrs	r3, r1
  4005ec:	6213      	str	r3, [r2, #32]
  4005ee:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005f0:	4903      	ldr	r1, [pc, #12]	; (400600 <pmc_switch_mainck_to_xtal+0x3c>)
  4005f2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4005f4:	4a06      	ldr	r2, [pc, #24]	; (400610 <pmc_switch_mainck_to_xtal+0x4c>)
  4005f6:	401a      	ands	r2, r3
  4005f8:	4b06      	ldr	r3, [pc, #24]	; (400614 <pmc_switch_mainck_to_xtal+0x50>)
  4005fa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005fc:	620b      	str	r3, [r1, #32]
  4005fe:	4770      	bx	lr
  400600:	400e0600 	.word	0x400e0600
  400604:	ffc8fffc 	.word	0xffc8fffc
  400608:	00370001 	.word	0x00370001
  40060c:	01370000 	.word	0x01370000
  400610:	fec8fffc 	.word	0xfec8fffc
  400614:	01370002 	.word	0x01370002

00400618 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400618:	4b02      	ldr	r3, [pc, #8]	; (400624 <pmc_osc_is_ready_mainck+0xc>)
  40061a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40061c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400620:	4770      	bx	lr
  400622:	bf00      	nop
  400624:	400e0600 	.word	0x400e0600

00400628 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400628:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40062c:	4b01      	ldr	r3, [pc, #4]	; (400634 <pmc_disable_pllack+0xc>)
  40062e:	629a      	str	r2, [r3, #40]	; 0x28
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	400e0600 	.word	0x400e0600

00400638 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400638:	4b02      	ldr	r3, [pc, #8]	; (400644 <pmc_is_locked_pllack+0xc>)
  40063a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40063c:	f000 0002 	and.w	r0, r0, #2
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	400e0600 	.word	0x400e0600

00400648 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400648:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40064c:	4b05      	ldr	r3, [pc, #20]	; (400664 <pmc_enable_periph_clk+0x1c>)
  40064e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400652:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400656:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40065a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40065e:	2000      	movs	r0, #0
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	400e0600 	.word	0x400e0600

00400668 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400668:	4b03      	ldr	r3, [pc, #12]	; (400678 <rtt_init+0x10>)
  40066a:	681b      	ldr	r3, [r3, #0]
  40066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400670:	4319      	orrs	r1, r3
  400672:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400674:	2000      	movs	r0, #0
  400676:	4770      	bx	lr
  400678:	20400a44 	.word	0x20400a44

0040067c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40067c:	b941      	cbnz	r1, 400690 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40067e:	4a09      	ldr	r2, [pc, #36]	; (4006a4 <rtt_sel_source+0x28>)
  400680:	6813      	ldr	r3, [r2, #0]
  400682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400686:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400688:	6802      	ldr	r2, [r0, #0]
  40068a:	4313      	orrs	r3, r2
  40068c:	6003      	str	r3, [r0, #0]
  40068e:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400690:	4a04      	ldr	r2, [pc, #16]	; (4006a4 <rtt_sel_source+0x28>)
  400692:	6813      	ldr	r3, [r2, #0]
  400694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400698:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40069a:	6802      	ldr	r2, [r0, #0]
  40069c:	4313      	orrs	r3, r2
  40069e:	6003      	str	r3, [r0, #0]
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop
  4006a4:	20400a44 	.word	0x20400a44

004006a8 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4006a8:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4006aa:	4b03      	ldr	r3, [pc, #12]	; (4006b8 <rtt_enable_interrupt+0x10>)
  4006ac:	681b      	ldr	r3, [r3, #0]
  4006ae:	4319      	orrs	r1, r3
  4006b0:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4006b2:	6001      	str	r1, [r0, #0]
  4006b4:	4770      	bx	lr
  4006b6:	bf00      	nop
  4006b8:	20400a44 	.word	0x20400a44

004006bc <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4006bc:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4006be:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4006c2:	4b02      	ldr	r3, [pc, #8]	; (4006cc <rtt_disable_interrupt+0x10>)
  4006c4:	681b      	ldr	r3, [r3, #0]
  4006c6:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4006c8:	6001      	str	r1, [r0, #0]
  4006ca:	4770      	bx	lr
  4006cc:	20400a44 	.word	0x20400a44

004006d0 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4006d0:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4006d2:	6883      	ldr	r3, [r0, #8]
  4006d4:	429a      	cmp	r2, r3
  4006d6:	d003      	beq.n	4006e0 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4006d8:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4006da:	6883      	ldr	r3, [r0, #8]
  4006dc:	4293      	cmp	r3, r2
  4006de:	d1fb      	bne.n	4006d8 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4006e0:	4618      	mov	r0, r3
  4006e2:	4770      	bx	lr

004006e4 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4006e4:	68c0      	ldr	r0, [r0, #12]
}
  4006e6:	4770      	bx	lr

004006e8 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4006e8:	b570      	push	{r4, r5, r6, lr}
  4006ea:	4606      	mov	r6, r0
  4006ec:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4006ee:	6804      	ldr	r4, [r0, #0]
  4006f0:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4006f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4006f8:	4809      	ldr	r0, [pc, #36]	; (400720 <rtt_write_alarm_time+0x38>)
  4006fa:	4b0a      	ldr	r3, [pc, #40]	; (400724 <rtt_write_alarm_time+0x3c>)
  4006fc:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  4006fe:	b92d      	cbnz	r5, 40070c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400700:	f04f 33ff 	mov.w	r3, #4294967295
  400704:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400706:	b924      	cbnz	r4, 400712 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400708:	2000      	movs	r0, #0
  40070a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40070c:	3d01      	subs	r5, #1
  40070e:	6075      	str	r5, [r6, #4]
  400710:	e7f9      	b.n	400706 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400712:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400716:	4802      	ldr	r0, [pc, #8]	; (400720 <rtt_write_alarm_time+0x38>)
  400718:	4b03      	ldr	r3, [pc, #12]	; (400728 <rtt_write_alarm_time+0x40>)
  40071a:	4798      	blx	r3
  40071c:	e7f4      	b.n	400708 <rtt_write_alarm_time+0x20>
  40071e:	bf00      	nop
  400720:	400e1830 	.word	0x400e1830
  400724:	004006bd 	.word	0x004006bd
  400728:	004006a9 	.word	0x004006a9

0040072c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40072c:	6943      	ldr	r3, [r0, #20]
  40072e:	f013 0f02 	tst.w	r3, #2
  400732:	d002      	beq.n	40073a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400734:	61c1      	str	r1, [r0, #28]
	return 0;
  400736:	2000      	movs	r0, #0
  400738:	4770      	bx	lr
		return 1;
  40073a:	2001      	movs	r0, #1
}
  40073c:	4770      	bx	lr

0040073e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40073e:	6943      	ldr	r3, [r0, #20]
  400740:	f013 0f01 	tst.w	r3, #1
  400744:	d003      	beq.n	40074e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400746:	6983      	ldr	r3, [r0, #24]
  400748:	700b      	strb	r3, [r1, #0]
	return 0;
  40074a:	2000      	movs	r0, #0
  40074c:	4770      	bx	lr
		return 1;
  40074e:	2001      	movs	r0, #1
}
  400750:	4770      	bx	lr

00400752 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400752:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400754:	010b      	lsls	r3, r1, #4
  400756:	4293      	cmp	r3, r2
  400758:	d914      	bls.n	400784 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40075a:	00c9      	lsls	r1, r1, #3
  40075c:	084b      	lsrs	r3, r1, #1
  40075e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400762:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400766:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400768:	1e5c      	subs	r4, r3, #1
  40076a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40076e:	428c      	cmp	r4, r1
  400770:	d901      	bls.n	400776 <usart_set_async_baudrate+0x24>
		return 1;
  400772:	2001      	movs	r0, #1
  400774:	e017      	b.n	4007a6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400776:	6841      	ldr	r1, [r0, #4]
  400778:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40077c:	6041      	str	r1, [r0, #4]
  40077e:	e00c      	b.n	40079a <usart_set_async_baudrate+0x48>
		return 1;
  400780:	2001      	movs	r0, #1
  400782:	e010      	b.n	4007a6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400784:	0859      	lsrs	r1, r3, #1
  400786:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40078a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40078e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400790:	1e5c      	subs	r4, r3, #1
  400792:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400796:	428c      	cmp	r4, r1
  400798:	d8f2      	bhi.n	400780 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40079a:	0412      	lsls	r2, r2, #16
  40079c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4007a0:	431a      	orrs	r2, r3
  4007a2:	6202      	str	r2, [r0, #32]

	return 0;
  4007a4:	2000      	movs	r0, #0
}
  4007a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007aa:	4770      	bx	lr

004007ac <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4007ac:	4b08      	ldr	r3, [pc, #32]	; (4007d0 <usart_reset+0x24>)
  4007ae:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4007b2:	2300      	movs	r3, #0
  4007b4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4007b6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4007b8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4007ba:	2388      	movs	r3, #136	; 0x88
  4007bc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4007be:	2324      	movs	r3, #36	; 0x24
  4007c0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4007c2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4007c6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4007c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4007cc:	6003      	str	r3, [r0, #0]
  4007ce:	4770      	bx	lr
  4007d0:	55534100 	.word	0x55534100

004007d4 <usart_init_rs232>:
{
  4007d4:	b570      	push	{r4, r5, r6, lr}
  4007d6:	4605      	mov	r5, r0
  4007d8:	460c      	mov	r4, r1
  4007da:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4007dc:	4b0f      	ldr	r3, [pc, #60]	; (40081c <usart_init_rs232+0x48>)
  4007de:	4798      	blx	r3
	ul_reg_val = 0;
  4007e0:	2200      	movs	r2, #0
  4007e2:	4b0f      	ldr	r3, [pc, #60]	; (400820 <usart_init_rs232+0x4c>)
  4007e4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4007e6:	b1a4      	cbz	r4, 400812 <usart_init_rs232+0x3e>
  4007e8:	4632      	mov	r2, r6
  4007ea:	6821      	ldr	r1, [r4, #0]
  4007ec:	4628      	mov	r0, r5
  4007ee:	4b0d      	ldr	r3, [pc, #52]	; (400824 <usart_init_rs232+0x50>)
  4007f0:	4798      	blx	r3
  4007f2:	4602      	mov	r2, r0
  4007f4:	b978      	cbnz	r0, 400816 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007f6:	6863      	ldr	r3, [r4, #4]
  4007f8:	68a1      	ldr	r1, [r4, #8]
  4007fa:	430b      	orrs	r3, r1
  4007fc:	6921      	ldr	r1, [r4, #16]
  4007fe:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400800:	68e1      	ldr	r1, [r4, #12]
  400802:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400804:	4906      	ldr	r1, [pc, #24]	; (400820 <usart_init_rs232+0x4c>)
  400806:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400808:	6869      	ldr	r1, [r5, #4]
  40080a:	430b      	orrs	r3, r1
  40080c:	606b      	str	r3, [r5, #4]
}
  40080e:	4610      	mov	r0, r2
  400810:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400812:	2201      	movs	r2, #1
  400814:	e7fb      	b.n	40080e <usart_init_rs232+0x3a>
  400816:	2201      	movs	r2, #1
  400818:	e7f9      	b.n	40080e <usart_init_rs232+0x3a>
  40081a:	bf00      	nop
  40081c:	004007ad 	.word	0x004007ad
  400820:	20400a48 	.word	0x20400a48
  400824:	00400753 	.word	0x00400753

00400828 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400828:	2340      	movs	r3, #64	; 0x40
  40082a:	6003      	str	r3, [r0, #0]
  40082c:	4770      	bx	lr

0040082e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40082e:	2310      	movs	r3, #16
  400830:	6003      	str	r3, [r0, #0]
  400832:	4770      	bx	lr

00400834 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400834:	6943      	ldr	r3, [r0, #20]
  400836:	f013 0f02 	tst.w	r3, #2
  40083a:	d004      	beq.n	400846 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40083c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400840:	61c1      	str	r1, [r0, #28]
	return 0;
  400842:	2000      	movs	r0, #0
  400844:	4770      	bx	lr
		return 1;
  400846:	2001      	movs	r0, #1
}
  400848:	4770      	bx	lr

0040084a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40084a:	6943      	ldr	r3, [r0, #20]
  40084c:	f013 0f01 	tst.w	r3, #1
  400850:	d005      	beq.n	40085e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400852:	6983      	ldr	r3, [r0, #24]
  400854:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400858:	600b      	str	r3, [r1, #0]
	return 0;
  40085a:	2000      	movs	r0, #0
  40085c:	4770      	bx	lr
		return 1;
  40085e:	2001      	movs	r0, #1
}
  400860:	4770      	bx	lr

00400862 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400862:	e7fe      	b.n	400862 <Dummy_Handler>

00400864 <Reset_Handler>:
{
  400864:	b500      	push	{lr}
  400866:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400868:	4b25      	ldr	r3, [pc, #148]	; (400900 <Reset_Handler+0x9c>)
  40086a:	4a26      	ldr	r2, [pc, #152]	; (400904 <Reset_Handler+0xa0>)
  40086c:	429a      	cmp	r2, r3
  40086e:	d010      	beq.n	400892 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400870:	4b25      	ldr	r3, [pc, #148]	; (400908 <Reset_Handler+0xa4>)
  400872:	4a23      	ldr	r2, [pc, #140]	; (400900 <Reset_Handler+0x9c>)
  400874:	429a      	cmp	r2, r3
  400876:	d20c      	bcs.n	400892 <Reset_Handler+0x2e>
  400878:	3b01      	subs	r3, #1
  40087a:	1a9b      	subs	r3, r3, r2
  40087c:	f023 0303 	bic.w	r3, r3, #3
  400880:	3304      	adds	r3, #4
  400882:	4413      	add	r3, r2
  400884:	491f      	ldr	r1, [pc, #124]	; (400904 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400886:	f851 0b04 	ldr.w	r0, [r1], #4
  40088a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40088e:	429a      	cmp	r2, r3
  400890:	d1f9      	bne.n	400886 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400892:	4b1e      	ldr	r3, [pc, #120]	; (40090c <Reset_Handler+0xa8>)
  400894:	4a1e      	ldr	r2, [pc, #120]	; (400910 <Reset_Handler+0xac>)
  400896:	429a      	cmp	r2, r3
  400898:	d20a      	bcs.n	4008b0 <Reset_Handler+0x4c>
  40089a:	3b01      	subs	r3, #1
  40089c:	1a9b      	subs	r3, r3, r2
  40089e:	f023 0303 	bic.w	r3, r3, #3
  4008a2:	3304      	adds	r3, #4
  4008a4:	4413      	add	r3, r2
                *pDest++ = 0;
  4008a6:	2100      	movs	r1, #0
  4008a8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4008ac:	4293      	cmp	r3, r2
  4008ae:	d1fb      	bne.n	4008a8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4008b0:	4a18      	ldr	r2, [pc, #96]	; (400914 <Reset_Handler+0xb0>)
  4008b2:	4b19      	ldr	r3, [pc, #100]	; (400918 <Reset_Handler+0xb4>)
  4008b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4008b8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4008ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4008be:	fab3 f383 	clz	r3, r3
  4008c2:	095b      	lsrs	r3, r3, #5
  4008c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4008c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4008c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008cc:	2200      	movs	r2, #0
  4008ce:	4b13      	ldr	r3, [pc, #76]	; (40091c <Reset_Handler+0xb8>)
  4008d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008d2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008d4:	4a12      	ldr	r2, [pc, #72]	; (400920 <Reset_Handler+0xbc>)
  4008d6:	6813      	ldr	r3, [r2, #0]
  4008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4008de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008e2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008e6:	b129      	cbz	r1, 4008f4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4008e8:	2201      	movs	r2, #1
  4008ea:	4b0c      	ldr	r3, [pc, #48]	; (40091c <Reset_Handler+0xb8>)
  4008ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4008ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008f2:	b662      	cpsie	i
        __libc_init_array();
  4008f4:	4b0b      	ldr	r3, [pc, #44]	; (400924 <Reset_Handler+0xc0>)
  4008f6:	4798      	blx	r3
        main();
  4008f8:	4b0b      	ldr	r3, [pc, #44]	; (400928 <Reset_Handler+0xc4>)
  4008fa:	4798      	blx	r3
  4008fc:	e7fe      	b.n	4008fc <Reset_Handler+0x98>
  4008fe:	bf00      	nop
  400900:	20400000 	.word	0x20400000
  400904:	004040d0 	.word	0x004040d0
  400908:	204009b8 	.word	0x204009b8
  40090c:	20400abc 	.word	0x20400abc
  400910:	204009b8 	.word	0x204009b8
  400914:	e000ed00 	.word	0xe000ed00
  400918:	00400000 	.word	0x00400000
  40091c:	20400000 	.word	0x20400000
  400920:	e000ed88 	.word	0xe000ed88
  400924:	00400ea1 	.word	0x00400ea1
  400928:	00400d65 	.word	0x00400d65

0040092c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40092c:	4b3b      	ldr	r3, [pc, #236]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  40092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400930:	f003 0303 	and.w	r3, r3, #3
  400934:	2b01      	cmp	r3, #1
  400936:	d01d      	beq.n	400974 <SystemCoreClockUpdate+0x48>
  400938:	b183      	cbz	r3, 40095c <SystemCoreClockUpdate+0x30>
  40093a:	2b02      	cmp	r3, #2
  40093c:	d036      	beq.n	4009ac <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40093e:	4b37      	ldr	r3, [pc, #220]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  400940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400942:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400946:	2b70      	cmp	r3, #112	; 0x70
  400948:	d05f      	beq.n	400a0a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40094a:	4b34      	ldr	r3, [pc, #208]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  40094c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40094e:	4934      	ldr	r1, [pc, #208]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  400950:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400954:	680b      	ldr	r3, [r1, #0]
  400956:	40d3      	lsrs	r3, r2
  400958:	600b      	str	r3, [r1, #0]
  40095a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40095c:	4b31      	ldr	r3, [pc, #196]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  40095e:	695b      	ldr	r3, [r3, #20]
  400960:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400964:	bf14      	ite	ne
  400966:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40096a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40096e:	4b2c      	ldr	r3, [pc, #176]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  400970:	601a      	str	r2, [r3, #0]
  400972:	e7e4      	b.n	40093e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400974:	4b29      	ldr	r3, [pc, #164]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  400976:	6a1b      	ldr	r3, [r3, #32]
  400978:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40097c:	d003      	beq.n	400986 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40097e:	4a2a      	ldr	r2, [pc, #168]	; (400a28 <SystemCoreClockUpdate+0xfc>)
  400980:	4b27      	ldr	r3, [pc, #156]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  400982:	601a      	str	r2, [r3, #0]
  400984:	e7db      	b.n	40093e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400986:	4a29      	ldr	r2, [pc, #164]	; (400a2c <SystemCoreClockUpdate+0x100>)
  400988:	4b25      	ldr	r3, [pc, #148]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  40098a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40098c:	4b23      	ldr	r3, [pc, #140]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  40098e:	6a1b      	ldr	r3, [r3, #32]
  400990:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400994:	2b10      	cmp	r3, #16
  400996:	d005      	beq.n	4009a4 <SystemCoreClockUpdate+0x78>
  400998:	2b20      	cmp	r3, #32
  40099a:	d1d0      	bne.n	40093e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40099c:	4a22      	ldr	r2, [pc, #136]	; (400a28 <SystemCoreClockUpdate+0xfc>)
  40099e:	4b20      	ldr	r3, [pc, #128]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  4009a0:	601a      	str	r2, [r3, #0]
          break;
  4009a2:	e7cc      	b.n	40093e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4009a4:	4a22      	ldr	r2, [pc, #136]	; (400a30 <SystemCoreClockUpdate+0x104>)
  4009a6:	4b1e      	ldr	r3, [pc, #120]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  4009a8:	601a      	str	r2, [r3, #0]
          break;
  4009aa:	e7c8      	b.n	40093e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4009ac:	4b1b      	ldr	r3, [pc, #108]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  4009ae:	6a1b      	ldr	r3, [r3, #32]
  4009b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009b4:	d016      	beq.n	4009e4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4009b6:	4a1c      	ldr	r2, [pc, #112]	; (400a28 <SystemCoreClockUpdate+0xfc>)
  4009b8:	4b19      	ldr	r3, [pc, #100]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  4009ba:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4009bc:	4b17      	ldr	r3, [pc, #92]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  4009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009c0:	f003 0303 	and.w	r3, r3, #3
  4009c4:	2b02      	cmp	r3, #2
  4009c6:	d1ba      	bne.n	40093e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009c8:	4a14      	ldr	r2, [pc, #80]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  4009ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009ce:	4814      	ldr	r0, [pc, #80]	; (400a20 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009d0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4009d4:	6803      	ldr	r3, [r0, #0]
  4009d6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009da:	b2d2      	uxtb	r2, r2
  4009dc:	fbb3 f3f2 	udiv	r3, r3, r2
  4009e0:	6003      	str	r3, [r0, #0]
  4009e2:	e7ac      	b.n	40093e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009e4:	4a11      	ldr	r2, [pc, #68]	; (400a2c <SystemCoreClockUpdate+0x100>)
  4009e6:	4b0e      	ldr	r3, [pc, #56]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  4009e8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <SystemCoreClockUpdate+0xf0>)
  4009ec:	6a1b      	ldr	r3, [r3, #32]
  4009ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009f2:	2b10      	cmp	r3, #16
  4009f4:	d005      	beq.n	400a02 <SystemCoreClockUpdate+0xd6>
  4009f6:	2b20      	cmp	r3, #32
  4009f8:	d1e0      	bne.n	4009bc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4009fa:	4a0b      	ldr	r2, [pc, #44]	; (400a28 <SystemCoreClockUpdate+0xfc>)
  4009fc:	4b08      	ldr	r3, [pc, #32]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  4009fe:	601a      	str	r2, [r3, #0]
          break;
  400a00:	e7dc      	b.n	4009bc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400a02:	4a0b      	ldr	r2, [pc, #44]	; (400a30 <SystemCoreClockUpdate+0x104>)
  400a04:	4b06      	ldr	r3, [pc, #24]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  400a06:	601a      	str	r2, [r3, #0]
          break;
  400a08:	e7d8      	b.n	4009bc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400a0a:	4a05      	ldr	r2, [pc, #20]	; (400a20 <SystemCoreClockUpdate+0xf4>)
  400a0c:	6813      	ldr	r3, [r2, #0]
  400a0e:	4909      	ldr	r1, [pc, #36]	; (400a34 <SystemCoreClockUpdate+0x108>)
  400a10:	fba1 1303 	umull	r1, r3, r1, r3
  400a14:	085b      	lsrs	r3, r3, #1
  400a16:	6013      	str	r3, [r2, #0]
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	400e0600 	.word	0x400e0600
  400a20:	20400004 	.word	0x20400004
  400a24:	400e1810 	.word	0x400e1810
  400a28:	00b71b00 	.word	0x00b71b00
  400a2c:	003d0900 	.word	0x003d0900
  400a30:	007a1200 	.word	0x007a1200
  400a34:	aaaaaaab 	.word	0xaaaaaaab

00400a38 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a38:	4b16      	ldr	r3, [pc, #88]	; (400a94 <system_init_flash+0x5c>)
  400a3a:	4298      	cmp	r0, r3
  400a3c:	d913      	bls.n	400a66 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a3e:	4b16      	ldr	r3, [pc, #88]	; (400a98 <system_init_flash+0x60>)
  400a40:	4298      	cmp	r0, r3
  400a42:	d915      	bls.n	400a70 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a44:	4b15      	ldr	r3, [pc, #84]	; (400a9c <system_init_flash+0x64>)
  400a46:	4298      	cmp	r0, r3
  400a48:	d916      	bls.n	400a78 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a4a:	4b15      	ldr	r3, [pc, #84]	; (400aa0 <system_init_flash+0x68>)
  400a4c:	4298      	cmp	r0, r3
  400a4e:	d917      	bls.n	400a80 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a50:	4b14      	ldr	r3, [pc, #80]	; (400aa4 <system_init_flash+0x6c>)
  400a52:	4298      	cmp	r0, r3
  400a54:	d918      	bls.n	400a88 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400a56:	4b14      	ldr	r3, [pc, #80]	; (400aa8 <system_init_flash+0x70>)
  400a58:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a5a:	bf94      	ite	ls
  400a5c:	4a13      	ldrls	r2, [pc, #76]	; (400aac <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400a5e:	4a14      	ldrhi	r2, [pc, #80]	; (400ab0 <system_init_flash+0x78>)
  400a60:	4b14      	ldr	r3, [pc, #80]	; (400ab4 <system_init_flash+0x7c>)
  400a62:	601a      	str	r2, [r3, #0]
  400a64:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a6a:	4b12      	ldr	r3, [pc, #72]	; (400ab4 <system_init_flash+0x7c>)
  400a6c:	601a      	str	r2, [r3, #0]
  400a6e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a70:	4a11      	ldr	r2, [pc, #68]	; (400ab8 <system_init_flash+0x80>)
  400a72:	4b10      	ldr	r3, [pc, #64]	; (400ab4 <system_init_flash+0x7c>)
  400a74:	601a      	str	r2, [r3, #0]
  400a76:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a78:	4a10      	ldr	r2, [pc, #64]	; (400abc <system_init_flash+0x84>)
  400a7a:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <system_init_flash+0x7c>)
  400a7c:	601a      	str	r2, [r3, #0]
  400a7e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a80:	4a0f      	ldr	r2, [pc, #60]	; (400ac0 <system_init_flash+0x88>)
  400a82:	4b0c      	ldr	r3, [pc, #48]	; (400ab4 <system_init_flash+0x7c>)
  400a84:	601a      	str	r2, [r3, #0]
  400a86:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a88:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400a8c:	4b09      	ldr	r3, [pc, #36]	; (400ab4 <system_init_flash+0x7c>)
  400a8e:	601a      	str	r2, [r3, #0]
  400a90:	4770      	bx	lr
  400a92:	bf00      	nop
  400a94:	015ef3bf 	.word	0x015ef3bf
  400a98:	02bde77f 	.word	0x02bde77f
  400a9c:	041cdb3f 	.word	0x041cdb3f
  400aa0:	057bceff 	.word	0x057bceff
  400aa4:	06dac2bf 	.word	0x06dac2bf
  400aa8:	0839b67f 	.word	0x0839b67f
  400aac:	04000500 	.word	0x04000500
  400ab0:	04000600 	.word	0x04000600
  400ab4:	400e0c00 	.word	0x400e0c00
  400ab8:	04000100 	.word	0x04000100
  400abc:	04000200 	.word	0x04000200
  400ac0:	04000300 	.word	0x04000300

00400ac4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ac4:	4b0a      	ldr	r3, [pc, #40]	; (400af0 <_sbrk+0x2c>)
  400ac6:	681b      	ldr	r3, [r3, #0]
  400ac8:	b153      	cbz	r3, 400ae0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400aca:	4b09      	ldr	r3, [pc, #36]	; (400af0 <_sbrk+0x2c>)
  400acc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400ace:	181a      	adds	r2, r3, r0
  400ad0:	4908      	ldr	r1, [pc, #32]	; (400af4 <_sbrk+0x30>)
  400ad2:	4291      	cmp	r1, r2
  400ad4:	db08      	blt.n	400ae8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400ad6:	4610      	mov	r0, r2
  400ad8:	4a05      	ldr	r2, [pc, #20]	; (400af0 <_sbrk+0x2c>)
  400ada:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400adc:	4618      	mov	r0, r3
  400ade:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ae0:	4a05      	ldr	r2, [pc, #20]	; (400af8 <_sbrk+0x34>)
  400ae2:	4b03      	ldr	r3, [pc, #12]	; (400af0 <_sbrk+0x2c>)
  400ae4:	601a      	str	r2, [r3, #0]
  400ae6:	e7f0      	b.n	400aca <_sbrk+0x6>
		return (caddr_t) -1;	
  400ae8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400aec:	4770      	bx	lr
  400aee:	bf00      	nop
  400af0:	20400a4c 	.word	0x20400a4c
  400af4:	2045fffc 	.word	0x2045fffc
  400af8:	20402cc0 	.word	0x20402cc0

00400afc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400afc:	f04f 30ff 	mov.w	r0, #4294967295
  400b00:	4770      	bx	lr

00400b02 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b06:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b08:	2000      	movs	r0, #0
  400b0a:	4770      	bx	lr

00400b0c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b0c:	2001      	movs	r0, #1
  400b0e:	4770      	bx	lr

00400b10 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b10:	2000      	movs	r0, #0
  400b12:	4770      	bx	lr

00400b14 <refresh_display>:
 * \brief Refresh display on terminal.
 *
 * Update the terminal display to show the current time and the alarm status.
 */
static void refresh_display(void)
{
  400b14:	b510      	push	{r4, lr}
	printf("%c[2J\r", 27);
  400b16:	211b      	movs	r1, #27
  400b18:	4809      	ldr	r0, [pc, #36]	; (400b40 <refresh_display+0x2c>)
  400b1a:	4c0a      	ldr	r4, [pc, #40]	; (400b44 <refresh_display+0x30>)
  400b1c:	47a0      	blx	r4
	printf("Time: %u\n\r", (unsigned int)rtt_read_timer_value(RTT));
  400b1e:	480a      	ldr	r0, [pc, #40]	; (400b48 <refresh_display+0x34>)
  400b20:	4b0a      	ldr	r3, [pc, #40]	; (400b4c <refresh_display+0x38>)
  400b22:	4798      	blx	r3
  400b24:	4601      	mov	r1, r0
  400b26:	480a      	ldr	r0, [pc, #40]	; (400b50 <refresh_display+0x3c>)
  400b28:	47a0      	blx	r4

	/* Display alarm */
	if (g_uc_alarmed) {
  400b2a:	4b0a      	ldr	r3, [pc, #40]	; (400b54 <refresh_display+0x40>)
  400b2c:	781b      	ldrb	r3, [r3, #0]
  400b2e:	b903      	cbnz	r3, 400b32 <refresh_display+0x1e>
  400b30:	bd10      	pop	{r4, pc}
		puts("!!! ALARM !!!\r");
  400b32:	4809      	ldr	r0, [pc, #36]	; (400b58 <refresh_display+0x44>)
  400b34:	4b09      	ldr	r3, [pc, #36]	; (400b5c <refresh_display+0x48>)
  400b36:	4798      	blx	r3
		g_uc_alarmed = 0;  // Reset the alarm status after displaying
  400b38:	2200      	movs	r2, #0
  400b3a:	4b06      	ldr	r3, [pc, #24]	; (400b54 <refresh_display+0x40>)
  400b3c:	701a      	strb	r2, [r3, #0]
	}
}
  400b3e:	e7f7      	b.n	400b30 <refresh_display+0x1c>
  400b40:	00403f14 	.word	0x00403f14
  400b44:	00400ef1 	.word	0x00400ef1
  400b48:	400e1830 	.word	0x400e1830
  400b4c:	004006d1 	.word	0x004006d1
  400b50:	00403f1c 	.word	0x00403f1c
  400b54:	20400a90 	.word	0x20400a90
  400b58:	00403f28 	.word	0x00403f28
  400b5c:	00401051 	.word	0x00401051

00400b60 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b60:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b62:	b083      	sub	sp, #12
  400b64:	4605      	mov	r5, r0
  400b66:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b68:	2300      	movs	r3, #0
  400b6a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b6c:	4b2a      	ldr	r3, [pc, #168]	; (400c18 <usart_serial_getchar+0xb8>)
  400b6e:	4298      	cmp	r0, r3
  400b70:	d013      	beq.n	400b9a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b72:	4b2a      	ldr	r3, [pc, #168]	; (400c1c <usart_serial_getchar+0xbc>)
  400b74:	4298      	cmp	r0, r3
  400b76:	d018      	beq.n	400baa <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400b78:	4b29      	ldr	r3, [pc, #164]	; (400c20 <usart_serial_getchar+0xc0>)
  400b7a:	4298      	cmp	r0, r3
  400b7c:	d01d      	beq.n	400bba <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400b7e:	4b29      	ldr	r3, [pc, #164]	; (400c24 <usart_serial_getchar+0xc4>)
  400b80:	429d      	cmp	r5, r3
  400b82:	d022      	beq.n	400bca <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400b84:	4b28      	ldr	r3, [pc, #160]	; (400c28 <usart_serial_getchar+0xc8>)
  400b86:	429d      	cmp	r5, r3
  400b88:	d027      	beq.n	400bda <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400b8a:	4b28      	ldr	r3, [pc, #160]	; (400c2c <usart_serial_getchar+0xcc>)
  400b8c:	429d      	cmp	r5, r3
  400b8e:	d02e      	beq.n	400bee <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400b90:	4b27      	ldr	r3, [pc, #156]	; (400c30 <usart_serial_getchar+0xd0>)
  400b92:	429d      	cmp	r5, r3
  400b94:	d035      	beq.n	400c02 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400b96:	b003      	add	sp, #12
  400b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400b9a:	461f      	mov	r7, r3
  400b9c:	4e25      	ldr	r6, [pc, #148]	; (400c34 <usart_serial_getchar+0xd4>)
  400b9e:	4621      	mov	r1, r4
  400ba0:	4638      	mov	r0, r7
  400ba2:	47b0      	blx	r6
  400ba4:	2800      	cmp	r0, #0
  400ba6:	d1fa      	bne.n	400b9e <usart_serial_getchar+0x3e>
  400ba8:	e7e9      	b.n	400b7e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400baa:	461f      	mov	r7, r3
  400bac:	4e21      	ldr	r6, [pc, #132]	; (400c34 <usart_serial_getchar+0xd4>)
  400bae:	4621      	mov	r1, r4
  400bb0:	4638      	mov	r0, r7
  400bb2:	47b0      	blx	r6
  400bb4:	2800      	cmp	r0, #0
  400bb6:	d1fa      	bne.n	400bae <usart_serial_getchar+0x4e>
  400bb8:	e7e4      	b.n	400b84 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400bba:	461f      	mov	r7, r3
  400bbc:	4e1d      	ldr	r6, [pc, #116]	; (400c34 <usart_serial_getchar+0xd4>)
  400bbe:	4621      	mov	r1, r4
  400bc0:	4638      	mov	r0, r7
  400bc2:	47b0      	blx	r6
  400bc4:	2800      	cmp	r0, #0
  400bc6:	d1fa      	bne.n	400bbe <usart_serial_getchar+0x5e>
  400bc8:	e7df      	b.n	400b8a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400bca:	461f      	mov	r7, r3
  400bcc:	4e19      	ldr	r6, [pc, #100]	; (400c34 <usart_serial_getchar+0xd4>)
  400bce:	4621      	mov	r1, r4
  400bd0:	4638      	mov	r0, r7
  400bd2:	47b0      	blx	r6
  400bd4:	2800      	cmp	r0, #0
  400bd6:	d1fa      	bne.n	400bce <usart_serial_getchar+0x6e>
  400bd8:	e7da      	b.n	400b90 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400bda:	461e      	mov	r6, r3
  400bdc:	4d16      	ldr	r5, [pc, #88]	; (400c38 <usart_serial_getchar+0xd8>)
  400bde:	a901      	add	r1, sp, #4
  400be0:	4630      	mov	r0, r6
  400be2:	47a8      	blx	r5
  400be4:	2800      	cmp	r0, #0
  400be6:	d1fa      	bne.n	400bde <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400be8:	9b01      	ldr	r3, [sp, #4]
  400bea:	7023      	strb	r3, [r4, #0]
  400bec:	e7d3      	b.n	400b96 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400bee:	461e      	mov	r6, r3
  400bf0:	4d11      	ldr	r5, [pc, #68]	; (400c38 <usart_serial_getchar+0xd8>)
  400bf2:	a901      	add	r1, sp, #4
  400bf4:	4630      	mov	r0, r6
  400bf6:	47a8      	blx	r5
  400bf8:	2800      	cmp	r0, #0
  400bfa:	d1fa      	bne.n	400bf2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400bfc:	9b01      	ldr	r3, [sp, #4]
  400bfe:	7023      	strb	r3, [r4, #0]
  400c00:	e7c9      	b.n	400b96 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400c02:	461e      	mov	r6, r3
  400c04:	4d0c      	ldr	r5, [pc, #48]	; (400c38 <usart_serial_getchar+0xd8>)
  400c06:	a901      	add	r1, sp, #4
  400c08:	4630      	mov	r0, r6
  400c0a:	47a8      	blx	r5
  400c0c:	2800      	cmp	r0, #0
  400c0e:	d1fa      	bne.n	400c06 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400c10:	9b01      	ldr	r3, [sp, #4]
  400c12:	7023      	strb	r3, [r4, #0]
}
  400c14:	e7bf      	b.n	400b96 <usart_serial_getchar+0x36>
  400c16:	bf00      	nop
  400c18:	400e0800 	.word	0x400e0800
  400c1c:	400e0a00 	.word	0x400e0a00
  400c20:	400e1a00 	.word	0x400e1a00
  400c24:	400e1c00 	.word	0x400e1c00
  400c28:	40024000 	.word	0x40024000
  400c2c:	40028000 	.word	0x40028000
  400c30:	4002c000 	.word	0x4002c000
  400c34:	0040073f 	.word	0x0040073f
  400c38:	0040084b 	.word	0x0040084b

00400c3c <usart_serial_putchar>:
{
  400c3c:	b570      	push	{r4, r5, r6, lr}
  400c3e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400c40:	4b2a      	ldr	r3, [pc, #168]	; (400cec <usart_serial_putchar+0xb0>)
  400c42:	4298      	cmp	r0, r3
  400c44:	d013      	beq.n	400c6e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400c46:	4b2a      	ldr	r3, [pc, #168]	; (400cf0 <usart_serial_putchar+0xb4>)
  400c48:	4298      	cmp	r0, r3
  400c4a:	d019      	beq.n	400c80 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400c4c:	4b29      	ldr	r3, [pc, #164]	; (400cf4 <usart_serial_putchar+0xb8>)
  400c4e:	4298      	cmp	r0, r3
  400c50:	d01f      	beq.n	400c92 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400c52:	4b29      	ldr	r3, [pc, #164]	; (400cf8 <usart_serial_putchar+0xbc>)
  400c54:	4298      	cmp	r0, r3
  400c56:	d025      	beq.n	400ca4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400c58:	4b28      	ldr	r3, [pc, #160]	; (400cfc <usart_serial_putchar+0xc0>)
  400c5a:	4298      	cmp	r0, r3
  400c5c:	d02b      	beq.n	400cb6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400c5e:	4b28      	ldr	r3, [pc, #160]	; (400d00 <usart_serial_putchar+0xc4>)
  400c60:	4298      	cmp	r0, r3
  400c62:	d031      	beq.n	400cc8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400c64:	4b27      	ldr	r3, [pc, #156]	; (400d04 <usart_serial_putchar+0xc8>)
  400c66:	4298      	cmp	r0, r3
  400c68:	d037      	beq.n	400cda <usart_serial_putchar+0x9e>
	return 0;
  400c6a:	2000      	movs	r0, #0
}
  400c6c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c6e:	461e      	mov	r6, r3
  400c70:	4d25      	ldr	r5, [pc, #148]	; (400d08 <usart_serial_putchar+0xcc>)
  400c72:	4621      	mov	r1, r4
  400c74:	4630      	mov	r0, r6
  400c76:	47a8      	blx	r5
  400c78:	2800      	cmp	r0, #0
  400c7a:	d1fa      	bne.n	400c72 <usart_serial_putchar+0x36>
		return 1;
  400c7c:	2001      	movs	r0, #1
  400c7e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c80:	461e      	mov	r6, r3
  400c82:	4d21      	ldr	r5, [pc, #132]	; (400d08 <usart_serial_putchar+0xcc>)
  400c84:	4621      	mov	r1, r4
  400c86:	4630      	mov	r0, r6
  400c88:	47a8      	blx	r5
  400c8a:	2800      	cmp	r0, #0
  400c8c:	d1fa      	bne.n	400c84 <usart_serial_putchar+0x48>
		return 1;
  400c8e:	2001      	movs	r0, #1
  400c90:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c92:	461e      	mov	r6, r3
  400c94:	4d1c      	ldr	r5, [pc, #112]	; (400d08 <usart_serial_putchar+0xcc>)
  400c96:	4621      	mov	r1, r4
  400c98:	4630      	mov	r0, r6
  400c9a:	47a8      	blx	r5
  400c9c:	2800      	cmp	r0, #0
  400c9e:	d1fa      	bne.n	400c96 <usart_serial_putchar+0x5a>
		return 1;
  400ca0:	2001      	movs	r0, #1
  400ca2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400ca4:	461e      	mov	r6, r3
  400ca6:	4d18      	ldr	r5, [pc, #96]	; (400d08 <usart_serial_putchar+0xcc>)
  400ca8:	4621      	mov	r1, r4
  400caa:	4630      	mov	r0, r6
  400cac:	47a8      	blx	r5
  400cae:	2800      	cmp	r0, #0
  400cb0:	d1fa      	bne.n	400ca8 <usart_serial_putchar+0x6c>
		return 1;
  400cb2:	2001      	movs	r0, #1
  400cb4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400cb6:	461e      	mov	r6, r3
  400cb8:	4d14      	ldr	r5, [pc, #80]	; (400d0c <usart_serial_putchar+0xd0>)
  400cba:	4621      	mov	r1, r4
  400cbc:	4630      	mov	r0, r6
  400cbe:	47a8      	blx	r5
  400cc0:	2800      	cmp	r0, #0
  400cc2:	d1fa      	bne.n	400cba <usart_serial_putchar+0x7e>
		return 1;
  400cc4:	2001      	movs	r0, #1
  400cc6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400cc8:	461e      	mov	r6, r3
  400cca:	4d10      	ldr	r5, [pc, #64]	; (400d0c <usart_serial_putchar+0xd0>)
  400ccc:	4621      	mov	r1, r4
  400cce:	4630      	mov	r0, r6
  400cd0:	47a8      	blx	r5
  400cd2:	2800      	cmp	r0, #0
  400cd4:	d1fa      	bne.n	400ccc <usart_serial_putchar+0x90>
		return 1;
  400cd6:	2001      	movs	r0, #1
  400cd8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400cda:	461e      	mov	r6, r3
  400cdc:	4d0b      	ldr	r5, [pc, #44]	; (400d0c <usart_serial_putchar+0xd0>)
  400cde:	4621      	mov	r1, r4
  400ce0:	4630      	mov	r0, r6
  400ce2:	47a8      	blx	r5
  400ce4:	2800      	cmp	r0, #0
  400ce6:	d1fa      	bne.n	400cde <usart_serial_putchar+0xa2>
		return 1;
  400ce8:	2001      	movs	r0, #1
  400cea:	bd70      	pop	{r4, r5, r6, pc}
  400cec:	400e0800 	.word	0x400e0800
  400cf0:	400e0a00 	.word	0x400e0a00
  400cf4:	400e1a00 	.word	0x400e1a00
  400cf8:	400e1c00 	.word	0x400e1c00
  400cfc:	40024000 	.word	0x40024000
  400d00:	40028000 	.word	0x40028000
  400d04:	4002c000 	.word	0x4002c000
  400d08:	0040072d 	.word	0x0040072d
  400d0c:	00400835 	.word	0x00400835

00400d10 <RTT_Handler>:
 * \brief Interrupt handler for the RTT.
 *
 * Display the current time on the terminal.
 */
void RTT_Handler(void)
{
  400d10:	b510      	push	{r4, lr}
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT);
  400d12:	480e      	ldr	r0, [pc, #56]	; (400d4c <RTT_Handler+0x3c>)
  400d14:	4b0e      	ldr	r3, [pc, #56]	; (400d50 <RTT_Handler+0x40>)
  400d16:	4798      	blx	r3
  400d18:	4604      	mov	r4, r0

	/* Time has changed, refresh display */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  400d1a:	f010 0f02 	tst.w	r0, #2
  400d1e:	d103      	bne.n	400d28 <RTT_Handler+0x18>
		refresh_display();
	}

	/* Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  400d20:	f014 0f01 	tst.w	r4, #1
  400d24:	d103      	bne.n	400d2e <RTT_Handler+0x1e>
  400d26:	bd10      	pop	{r4, pc}
		refresh_display();
  400d28:	4b0a      	ldr	r3, [pc, #40]	; (400d54 <RTT_Handler+0x44>)
  400d2a:	4798      	blx	r3
  400d2c:	e7f8      	b.n	400d20 <RTT_Handler+0x10>
		g_uc_alarmed = 1;
  400d2e:	2201      	movs	r2, #1
  400d30:	4b09      	ldr	r3, [pc, #36]	; (400d58 <RTT_Handler+0x48>)
  400d32:	701a      	strb	r2, [r3, #0]
		/* Set the next alarm for 5 seconds later */
		rtt_write_alarm_time(RTT, rtt_read_timer_value(RTT) + 5);
  400d34:	4c05      	ldr	r4, [pc, #20]	; (400d4c <RTT_Handler+0x3c>)
  400d36:	4620      	mov	r0, r4
  400d38:	4b08      	ldr	r3, [pc, #32]	; (400d5c <RTT_Handler+0x4c>)
  400d3a:	4798      	blx	r3
  400d3c:	1d41      	adds	r1, r0, #5
  400d3e:	4620      	mov	r0, r4
  400d40:	4b07      	ldr	r3, [pc, #28]	; (400d60 <RTT_Handler+0x50>)
  400d42:	4798      	blx	r3
		refresh_display();
  400d44:	4b03      	ldr	r3, [pc, #12]	; (400d54 <RTT_Handler+0x44>)
  400d46:	4798      	blx	r3
	}
}
  400d48:	e7ed      	b.n	400d26 <RTT_Handler+0x16>
  400d4a:	bf00      	nop
  400d4c:	400e1830 	.word	0x400e1830
  400d50:	004006e5 	.word	0x004006e5
  400d54:	00400b15 	.word	0x00400b15
  400d58:	20400a90 	.word	0x20400a90
  400d5c:	004006d1 	.word	0x004006d1
  400d60:	004006e9 	.word	0x004006e9

00400d64 <main>:
 * Initialize the RTT, display the current time, and set an alarm for 5 seconds.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400d64:	b500      	push	{lr}
  400d66:	b087      	sub	sp, #28
	/* Initialize the SAM system */
	sysclk_init();
  400d68:	4b33      	ldr	r3, [pc, #204]	; (400e38 <main+0xd4>)
  400d6a:	4798      	blx	r3
	board_init();
  400d6c:	4b33      	ldr	r3, [pc, #204]	; (400e3c <main+0xd8>)
  400d6e:	4798      	blx	r3
  400d70:	200e      	movs	r0, #14
  400d72:	4e33      	ldr	r6, [pc, #204]	; (400e40 <main+0xdc>)
  400d74:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d76:	4d33      	ldr	r5, [pc, #204]	; (400e44 <main+0xe0>)
  400d78:	4b33      	ldr	r3, [pc, #204]	; (400e48 <main+0xe4>)
  400d7a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d7c:	4a33      	ldr	r2, [pc, #204]	; (400e4c <main+0xe8>)
  400d7e:	4b34      	ldr	r3, [pc, #208]	; (400e50 <main+0xec>)
  400d80:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d82:	4a34      	ldr	r2, [pc, #208]	; (400e54 <main+0xf0>)
  400d84:	4b34      	ldr	r3, [pc, #208]	; (400e58 <main+0xf4>)
  400d86:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400d88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400d8c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  400d8e:	23c0      	movs	r3, #192	; 0xc0
  400d90:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d96:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  400d98:	2400      	movs	r4, #0
  400d9a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400d9c:	9404      	str	r4, [sp, #16]
  400d9e:	200e      	movs	r0, #14
  400da0:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  400da2:	4a2e      	ldr	r2, [pc, #184]	; (400e5c <main+0xf8>)
  400da4:	4669      	mov	r1, sp
  400da6:	4628      	mov	r0, r5
  400da8:	4b2d      	ldr	r3, [pc, #180]	; (400e60 <main+0xfc>)
  400daa:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400dac:	4628      	mov	r0, r5
  400dae:	4b2d      	ldr	r3, [pc, #180]	; (400e64 <main+0x100>)
  400db0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400db2:	4628      	mov	r0, r5
  400db4:	4b2c      	ldr	r3, [pc, #176]	; (400e68 <main+0x104>)
  400db6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400db8:	4e2c      	ldr	r6, [pc, #176]	; (400e6c <main+0x108>)
  400dba:	6833      	ldr	r3, [r6, #0]
  400dbc:	4621      	mov	r1, r4
  400dbe:	6898      	ldr	r0, [r3, #8]
  400dc0:	4d2b      	ldr	r5, [pc, #172]	; (400e70 <main+0x10c>)
  400dc2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400dc4:	6833      	ldr	r3, [r6, #0]
  400dc6:	4621      	mov	r1, r4
  400dc8:	6858      	ldr	r0, [r3, #4]
  400dca:	47a8      	blx	r5

	/* Configure console UART */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400dcc:	4829      	ldr	r0, [pc, #164]	; (400e74 <main+0x110>)
  400dce:	4b2a      	ldr	r3, [pc, #168]	; (400e78 <main+0x114>)
  400dd0:	4798      	blx	r3
	rtt_sel_source(RTT, false);
  400dd2:	4d2a      	ldr	r5, [pc, #168]	; (400e7c <main+0x118>)
  400dd4:	4621      	mov	r1, r4
  400dd6:	4628      	mov	r0, r5
  400dd8:	4b29      	ldr	r3, [pc, #164]	; (400e80 <main+0x11c>)
  400dda:	4798      	blx	r3
	rtt_init(RTT, 32768);  // 32768 Hz = 1 tick per second
  400ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400de0:	4628      	mov	r0, r5
  400de2:	4b28      	ldr	r3, [pc, #160]	; (400e84 <main+0x120>)
  400de4:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  400de6:	4628      	mov	r0, r5
  400de8:	4b27      	ldr	r3, [pc, #156]	; (400e88 <main+0x124>)
  400dea:	4798      	blx	r3
  400dec:	4606      	mov	r6, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  400dee:	4c26      	ldr	r4, [pc, #152]	; (400e88 <main+0x124>)
  400df0:	4628      	mov	r0, r5
  400df2:	47a0      	blx	r4
  400df4:	4286      	cmp	r6, r0
  400df6:	d0fb      	beq.n	400df0 <main+0x8c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400df8:	4b24      	ldr	r3, [pc, #144]	; (400e8c <main+0x128>)
  400dfa:	2208      	movs	r2, #8
  400dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400e00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e04:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400e0c:	2500      	movs	r5, #0
  400e0e:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e12:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  400e14:	4c19      	ldr	r4, [pc, #100]	; (400e7c <main+0x118>)
  400e16:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400e1a:	4620      	mov	r0, r4
  400e1c:	4b1c      	ldr	r3, [pc, #112]	; (400e90 <main+0x12c>)
  400e1e:	4798      	blx	r3

	/* Configure RTT */
	configure_rtt();

	/* Set initial alarm for 5 seconds */
	rtt_write_alarm_time(RTT, rtt_read_timer_value(RTT) + 5);
  400e20:	4620      	mov	r0, r4
  400e22:	4b19      	ldr	r3, [pc, #100]	; (400e88 <main+0x124>)
  400e24:	4798      	blx	r3
  400e26:	1d41      	adds	r1, r0, #5
  400e28:	4620      	mov	r0, r4
  400e2a:	4b1a      	ldr	r3, [pc, #104]	; (400e94 <main+0x130>)
  400e2c:	4798      	blx	r3

	/* Initialize alarm state */
	g_uc_alarmed = 0;
  400e2e:	4b1a      	ldr	r3, [pc, #104]	; (400e98 <main+0x134>)
  400e30:	701d      	strb	r5, [r3, #0]
	refresh_display();
  400e32:	4b1a      	ldr	r3, [pc, #104]	; (400e9c <main+0x138>)
  400e34:	4798      	blx	r3
  400e36:	e7fe      	b.n	400e36 <main+0xd2>
  400e38:	004001d5 	.word	0x004001d5
  400e3c:	004002d1 	.word	0x004002d1
  400e40:	00400649 	.word	0x00400649
  400e44:	40028000 	.word	0x40028000
  400e48:	20400a8c 	.word	0x20400a8c
  400e4c:	00400c3d 	.word	0x00400c3d
  400e50:	20400a88 	.word	0x20400a88
  400e54:	00400b61 	.word	0x00400b61
  400e58:	20400a84 	.word	0x20400a84
  400e5c:	08f0d180 	.word	0x08f0d180
  400e60:	004007d5 	.word	0x004007d5
  400e64:	00400829 	.word	0x00400829
  400e68:	0040082f 	.word	0x0040082f
  400e6c:	20400008 	.word	0x20400008
  400e70:	00401061 	.word	0x00401061
  400e74:	00403eb8 	.word	0x00403eb8
  400e78:	00401051 	.word	0x00401051
  400e7c:	400e1830 	.word	0x400e1830
  400e80:	0040067d 	.word	0x0040067d
  400e84:	00400669 	.word	0x00400669
  400e88:	004006d1 	.word	0x004006d1
  400e8c:	e000e100 	.word	0xe000e100
  400e90:	004006a9 	.word	0x004006a9
  400e94:	004006e9 	.word	0x004006e9
  400e98:	20400a90 	.word	0x20400a90
  400e9c:	00400b15 	.word	0x00400b15

00400ea0 <__libc_init_array>:
  400ea0:	b570      	push	{r4, r5, r6, lr}
  400ea2:	4e0f      	ldr	r6, [pc, #60]	; (400ee0 <__libc_init_array+0x40>)
  400ea4:	4d0f      	ldr	r5, [pc, #60]	; (400ee4 <__libc_init_array+0x44>)
  400ea6:	1b76      	subs	r6, r6, r5
  400ea8:	10b6      	asrs	r6, r6, #2
  400eaa:	bf18      	it	ne
  400eac:	2400      	movne	r4, #0
  400eae:	d005      	beq.n	400ebc <__libc_init_array+0x1c>
  400eb0:	3401      	adds	r4, #1
  400eb2:	f855 3b04 	ldr.w	r3, [r5], #4
  400eb6:	4798      	blx	r3
  400eb8:	42a6      	cmp	r6, r4
  400eba:	d1f9      	bne.n	400eb0 <__libc_init_array+0x10>
  400ebc:	4e0a      	ldr	r6, [pc, #40]	; (400ee8 <__libc_init_array+0x48>)
  400ebe:	4d0b      	ldr	r5, [pc, #44]	; (400eec <__libc_init_array+0x4c>)
  400ec0:	1b76      	subs	r6, r6, r5
  400ec2:	f003 f8ef 	bl	4040a4 <_init>
  400ec6:	10b6      	asrs	r6, r6, #2
  400ec8:	bf18      	it	ne
  400eca:	2400      	movne	r4, #0
  400ecc:	d006      	beq.n	400edc <__libc_init_array+0x3c>
  400ece:	3401      	adds	r4, #1
  400ed0:	f855 3b04 	ldr.w	r3, [r5], #4
  400ed4:	4798      	blx	r3
  400ed6:	42a6      	cmp	r6, r4
  400ed8:	d1f9      	bne.n	400ece <__libc_init_array+0x2e>
  400eda:	bd70      	pop	{r4, r5, r6, pc}
  400edc:	bd70      	pop	{r4, r5, r6, pc}
  400ede:	bf00      	nop
  400ee0:	004040b0 	.word	0x004040b0
  400ee4:	004040b0 	.word	0x004040b0
  400ee8:	004040b8 	.word	0x004040b8
  400eec:	004040b0 	.word	0x004040b0

00400ef0 <iprintf>:
  400ef0:	b40f      	push	{r0, r1, r2, r3}
  400ef2:	b500      	push	{lr}
  400ef4:	4907      	ldr	r1, [pc, #28]	; (400f14 <iprintf+0x24>)
  400ef6:	b083      	sub	sp, #12
  400ef8:	ab04      	add	r3, sp, #16
  400efa:	6808      	ldr	r0, [r1, #0]
  400efc:	f853 2b04 	ldr.w	r2, [r3], #4
  400f00:	6881      	ldr	r1, [r0, #8]
  400f02:	9301      	str	r3, [sp, #4]
  400f04:	f000 fa2a 	bl	40135c <_vfiprintf_r>
  400f08:	b003      	add	sp, #12
  400f0a:	f85d eb04 	ldr.w	lr, [sp], #4
  400f0e:	b004      	add	sp, #16
  400f10:	4770      	bx	lr
  400f12:	bf00      	nop
  400f14:	20400008 	.word	0x20400008

00400f18 <memset>:
  400f18:	b470      	push	{r4, r5, r6}
  400f1a:	0786      	lsls	r6, r0, #30
  400f1c:	d046      	beq.n	400fac <memset+0x94>
  400f1e:	1e54      	subs	r4, r2, #1
  400f20:	2a00      	cmp	r2, #0
  400f22:	d041      	beq.n	400fa8 <memset+0x90>
  400f24:	b2ca      	uxtb	r2, r1
  400f26:	4603      	mov	r3, r0
  400f28:	e002      	b.n	400f30 <memset+0x18>
  400f2a:	f114 34ff 	adds.w	r4, r4, #4294967295
  400f2e:	d33b      	bcc.n	400fa8 <memset+0x90>
  400f30:	f803 2b01 	strb.w	r2, [r3], #1
  400f34:	079d      	lsls	r5, r3, #30
  400f36:	d1f8      	bne.n	400f2a <memset+0x12>
  400f38:	2c03      	cmp	r4, #3
  400f3a:	d92e      	bls.n	400f9a <memset+0x82>
  400f3c:	b2cd      	uxtb	r5, r1
  400f3e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400f42:	2c0f      	cmp	r4, #15
  400f44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400f48:	d919      	bls.n	400f7e <memset+0x66>
  400f4a:	f103 0210 	add.w	r2, r3, #16
  400f4e:	4626      	mov	r6, r4
  400f50:	3e10      	subs	r6, #16
  400f52:	2e0f      	cmp	r6, #15
  400f54:	f842 5c10 	str.w	r5, [r2, #-16]
  400f58:	f842 5c0c 	str.w	r5, [r2, #-12]
  400f5c:	f842 5c08 	str.w	r5, [r2, #-8]
  400f60:	f842 5c04 	str.w	r5, [r2, #-4]
  400f64:	f102 0210 	add.w	r2, r2, #16
  400f68:	d8f2      	bhi.n	400f50 <memset+0x38>
  400f6a:	f1a4 0210 	sub.w	r2, r4, #16
  400f6e:	f022 020f 	bic.w	r2, r2, #15
  400f72:	f004 040f 	and.w	r4, r4, #15
  400f76:	3210      	adds	r2, #16
  400f78:	2c03      	cmp	r4, #3
  400f7a:	4413      	add	r3, r2
  400f7c:	d90d      	bls.n	400f9a <memset+0x82>
  400f7e:	461e      	mov	r6, r3
  400f80:	4622      	mov	r2, r4
  400f82:	3a04      	subs	r2, #4
  400f84:	2a03      	cmp	r2, #3
  400f86:	f846 5b04 	str.w	r5, [r6], #4
  400f8a:	d8fa      	bhi.n	400f82 <memset+0x6a>
  400f8c:	1f22      	subs	r2, r4, #4
  400f8e:	f022 0203 	bic.w	r2, r2, #3
  400f92:	3204      	adds	r2, #4
  400f94:	4413      	add	r3, r2
  400f96:	f004 0403 	and.w	r4, r4, #3
  400f9a:	b12c      	cbz	r4, 400fa8 <memset+0x90>
  400f9c:	b2c9      	uxtb	r1, r1
  400f9e:	441c      	add	r4, r3
  400fa0:	f803 1b01 	strb.w	r1, [r3], #1
  400fa4:	429c      	cmp	r4, r3
  400fa6:	d1fb      	bne.n	400fa0 <memset+0x88>
  400fa8:	bc70      	pop	{r4, r5, r6}
  400faa:	4770      	bx	lr
  400fac:	4614      	mov	r4, r2
  400fae:	4603      	mov	r3, r0
  400fb0:	e7c2      	b.n	400f38 <memset+0x20>
  400fb2:	bf00      	nop

00400fb4 <_puts_r>:
  400fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fb6:	4605      	mov	r5, r0
  400fb8:	b089      	sub	sp, #36	; 0x24
  400fba:	4608      	mov	r0, r1
  400fbc:	460c      	mov	r4, r1
  400fbe:	f000 f91f 	bl	401200 <strlen>
  400fc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400fc4:	4f21      	ldr	r7, [pc, #132]	; (40104c <_puts_r+0x98>)
  400fc6:	9404      	str	r4, [sp, #16]
  400fc8:	2601      	movs	r6, #1
  400fca:	1c44      	adds	r4, r0, #1
  400fcc:	a904      	add	r1, sp, #16
  400fce:	2202      	movs	r2, #2
  400fd0:	9403      	str	r4, [sp, #12]
  400fd2:	9005      	str	r0, [sp, #20]
  400fd4:	68ac      	ldr	r4, [r5, #8]
  400fd6:	9706      	str	r7, [sp, #24]
  400fd8:	9607      	str	r6, [sp, #28]
  400fda:	9101      	str	r1, [sp, #4]
  400fdc:	9202      	str	r2, [sp, #8]
  400fde:	b353      	cbz	r3, 401036 <_puts_r+0x82>
  400fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400fe2:	f013 0f01 	tst.w	r3, #1
  400fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400fea:	b29a      	uxth	r2, r3
  400fec:	d101      	bne.n	400ff2 <_puts_r+0x3e>
  400fee:	0590      	lsls	r0, r2, #22
  400ff0:	d525      	bpl.n	40103e <_puts_r+0x8a>
  400ff2:	0491      	lsls	r1, r2, #18
  400ff4:	d406      	bmi.n	401004 <_puts_r+0x50>
  400ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401000:	81a3      	strh	r3, [r4, #12]
  401002:	6662      	str	r2, [r4, #100]	; 0x64
  401004:	4628      	mov	r0, r5
  401006:	aa01      	add	r2, sp, #4
  401008:	4621      	mov	r1, r4
  40100a:	f001 fba9 	bl	402760 <__sfvwrite_r>
  40100e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401010:	2800      	cmp	r0, #0
  401012:	bf0c      	ite	eq
  401014:	250a      	moveq	r5, #10
  401016:	f04f 35ff 	movne.w	r5, #4294967295
  40101a:	07da      	lsls	r2, r3, #31
  40101c:	d402      	bmi.n	401024 <_puts_r+0x70>
  40101e:	89a3      	ldrh	r3, [r4, #12]
  401020:	059b      	lsls	r3, r3, #22
  401022:	d502      	bpl.n	40102a <_puts_r+0x76>
  401024:	4628      	mov	r0, r5
  401026:	b009      	add	sp, #36	; 0x24
  401028:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40102a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40102c:	f001 fd4e 	bl	402acc <__retarget_lock_release_recursive>
  401030:	4628      	mov	r0, r5
  401032:	b009      	add	sp, #36	; 0x24
  401034:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401036:	4628      	mov	r0, r5
  401038:	f001 f986 	bl	402348 <__sinit>
  40103c:	e7d0      	b.n	400fe0 <_puts_r+0x2c>
  40103e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401040:	f001 fd42 	bl	402ac8 <__retarget_lock_acquire_recursive>
  401044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401048:	b29a      	uxth	r2, r3
  40104a:	e7d2      	b.n	400ff2 <_puts_r+0x3e>
  40104c:	00403f3c 	.word	0x00403f3c

00401050 <puts>:
  401050:	4b02      	ldr	r3, [pc, #8]	; (40105c <puts+0xc>)
  401052:	4601      	mov	r1, r0
  401054:	6818      	ldr	r0, [r3, #0]
  401056:	f7ff bfad 	b.w	400fb4 <_puts_r>
  40105a:	bf00      	nop
  40105c:	20400008 	.word	0x20400008

00401060 <setbuf>:
  401060:	2900      	cmp	r1, #0
  401062:	bf0c      	ite	eq
  401064:	2202      	moveq	r2, #2
  401066:	2200      	movne	r2, #0
  401068:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40106c:	f000 b800 	b.w	401070 <setvbuf>

00401070 <setvbuf>:
  401070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401074:	4c61      	ldr	r4, [pc, #388]	; (4011fc <setvbuf+0x18c>)
  401076:	6825      	ldr	r5, [r4, #0]
  401078:	b083      	sub	sp, #12
  40107a:	4604      	mov	r4, r0
  40107c:	460f      	mov	r7, r1
  40107e:	4690      	mov	r8, r2
  401080:	461e      	mov	r6, r3
  401082:	b115      	cbz	r5, 40108a <setvbuf+0x1a>
  401084:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401086:	2b00      	cmp	r3, #0
  401088:	d064      	beq.n	401154 <setvbuf+0xe4>
  40108a:	f1b8 0f02 	cmp.w	r8, #2
  40108e:	d006      	beq.n	40109e <setvbuf+0x2e>
  401090:	f1b8 0f01 	cmp.w	r8, #1
  401094:	f200 809f 	bhi.w	4011d6 <setvbuf+0x166>
  401098:	2e00      	cmp	r6, #0
  40109a:	f2c0 809c 	blt.w	4011d6 <setvbuf+0x166>
  40109e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4010a0:	07d8      	lsls	r0, r3, #31
  4010a2:	d534      	bpl.n	40110e <setvbuf+0x9e>
  4010a4:	4621      	mov	r1, r4
  4010a6:	4628      	mov	r0, r5
  4010a8:	f001 f8f6 	bl	402298 <_fflush_r>
  4010ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010ae:	b141      	cbz	r1, 4010c2 <setvbuf+0x52>
  4010b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010b4:	4299      	cmp	r1, r3
  4010b6:	d002      	beq.n	4010be <setvbuf+0x4e>
  4010b8:	4628      	mov	r0, r5
  4010ba:	f001 fa6b 	bl	402594 <_free_r>
  4010be:	2300      	movs	r3, #0
  4010c0:	6323      	str	r3, [r4, #48]	; 0x30
  4010c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010c6:	2200      	movs	r2, #0
  4010c8:	61a2      	str	r2, [r4, #24]
  4010ca:	6062      	str	r2, [r4, #4]
  4010cc:	061a      	lsls	r2, r3, #24
  4010ce:	d43a      	bmi.n	401146 <setvbuf+0xd6>
  4010d0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4010d4:	f023 0303 	bic.w	r3, r3, #3
  4010d8:	f1b8 0f02 	cmp.w	r8, #2
  4010dc:	81a3      	strh	r3, [r4, #12]
  4010de:	d01d      	beq.n	40111c <setvbuf+0xac>
  4010e0:	ab01      	add	r3, sp, #4
  4010e2:	466a      	mov	r2, sp
  4010e4:	4621      	mov	r1, r4
  4010e6:	4628      	mov	r0, r5
  4010e8:	f001 fcf2 	bl	402ad0 <__swhatbuf_r>
  4010ec:	89a3      	ldrh	r3, [r4, #12]
  4010ee:	4318      	orrs	r0, r3
  4010f0:	81a0      	strh	r0, [r4, #12]
  4010f2:	2e00      	cmp	r6, #0
  4010f4:	d132      	bne.n	40115c <setvbuf+0xec>
  4010f6:	9e00      	ldr	r6, [sp, #0]
  4010f8:	4630      	mov	r0, r6
  4010fa:	f001 fd61 	bl	402bc0 <malloc>
  4010fe:	4607      	mov	r7, r0
  401100:	2800      	cmp	r0, #0
  401102:	d06b      	beq.n	4011dc <setvbuf+0x16c>
  401104:	89a3      	ldrh	r3, [r4, #12]
  401106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40110a:	81a3      	strh	r3, [r4, #12]
  40110c:	e028      	b.n	401160 <setvbuf+0xf0>
  40110e:	89a3      	ldrh	r3, [r4, #12]
  401110:	0599      	lsls	r1, r3, #22
  401112:	d4c7      	bmi.n	4010a4 <setvbuf+0x34>
  401114:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401116:	f001 fcd7 	bl	402ac8 <__retarget_lock_acquire_recursive>
  40111a:	e7c3      	b.n	4010a4 <setvbuf+0x34>
  40111c:	2500      	movs	r5, #0
  40111e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401120:	2600      	movs	r6, #0
  401122:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401126:	f043 0302 	orr.w	r3, r3, #2
  40112a:	2001      	movs	r0, #1
  40112c:	60a6      	str	r6, [r4, #8]
  40112e:	07ce      	lsls	r6, r1, #31
  401130:	81a3      	strh	r3, [r4, #12]
  401132:	6022      	str	r2, [r4, #0]
  401134:	6122      	str	r2, [r4, #16]
  401136:	6160      	str	r0, [r4, #20]
  401138:	d401      	bmi.n	40113e <setvbuf+0xce>
  40113a:	0598      	lsls	r0, r3, #22
  40113c:	d53e      	bpl.n	4011bc <setvbuf+0x14c>
  40113e:	4628      	mov	r0, r5
  401140:	b003      	add	sp, #12
  401142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401146:	6921      	ldr	r1, [r4, #16]
  401148:	4628      	mov	r0, r5
  40114a:	f001 fa23 	bl	402594 <_free_r>
  40114e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401152:	e7bd      	b.n	4010d0 <setvbuf+0x60>
  401154:	4628      	mov	r0, r5
  401156:	f001 f8f7 	bl	402348 <__sinit>
  40115a:	e796      	b.n	40108a <setvbuf+0x1a>
  40115c:	2f00      	cmp	r7, #0
  40115e:	d0cb      	beq.n	4010f8 <setvbuf+0x88>
  401160:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401162:	2b00      	cmp	r3, #0
  401164:	d033      	beq.n	4011ce <setvbuf+0x15e>
  401166:	9b00      	ldr	r3, [sp, #0]
  401168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40116c:	6027      	str	r7, [r4, #0]
  40116e:	429e      	cmp	r6, r3
  401170:	bf1c      	itt	ne
  401172:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401176:	81a2      	strhne	r2, [r4, #12]
  401178:	f1b8 0f01 	cmp.w	r8, #1
  40117c:	bf04      	itt	eq
  40117e:	f042 0201 	orreq.w	r2, r2, #1
  401182:	81a2      	strheq	r2, [r4, #12]
  401184:	b292      	uxth	r2, r2
  401186:	f012 0308 	ands.w	r3, r2, #8
  40118a:	6127      	str	r7, [r4, #16]
  40118c:	6166      	str	r6, [r4, #20]
  40118e:	d00e      	beq.n	4011ae <setvbuf+0x13e>
  401190:	07d1      	lsls	r1, r2, #31
  401192:	d51a      	bpl.n	4011ca <setvbuf+0x15a>
  401194:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401196:	4276      	negs	r6, r6
  401198:	2300      	movs	r3, #0
  40119a:	f015 0501 	ands.w	r5, r5, #1
  40119e:	61a6      	str	r6, [r4, #24]
  4011a0:	60a3      	str	r3, [r4, #8]
  4011a2:	d009      	beq.n	4011b8 <setvbuf+0x148>
  4011a4:	2500      	movs	r5, #0
  4011a6:	4628      	mov	r0, r5
  4011a8:	b003      	add	sp, #12
  4011aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011ae:	60a3      	str	r3, [r4, #8]
  4011b0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011b2:	f015 0501 	ands.w	r5, r5, #1
  4011b6:	d1f5      	bne.n	4011a4 <setvbuf+0x134>
  4011b8:	0593      	lsls	r3, r2, #22
  4011ba:	d4c0      	bmi.n	40113e <setvbuf+0xce>
  4011bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4011be:	f001 fc85 	bl	402acc <__retarget_lock_release_recursive>
  4011c2:	4628      	mov	r0, r5
  4011c4:	b003      	add	sp, #12
  4011c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011ca:	60a6      	str	r6, [r4, #8]
  4011cc:	e7f0      	b.n	4011b0 <setvbuf+0x140>
  4011ce:	4628      	mov	r0, r5
  4011d0:	f001 f8ba 	bl	402348 <__sinit>
  4011d4:	e7c7      	b.n	401166 <setvbuf+0xf6>
  4011d6:	f04f 35ff 	mov.w	r5, #4294967295
  4011da:	e7b0      	b.n	40113e <setvbuf+0xce>
  4011dc:	f8dd 9000 	ldr.w	r9, [sp]
  4011e0:	45b1      	cmp	r9, r6
  4011e2:	d004      	beq.n	4011ee <setvbuf+0x17e>
  4011e4:	4648      	mov	r0, r9
  4011e6:	f001 fceb 	bl	402bc0 <malloc>
  4011ea:	4607      	mov	r7, r0
  4011ec:	b920      	cbnz	r0, 4011f8 <setvbuf+0x188>
  4011ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011f2:	f04f 35ff 	mov.w	r5, #4294967295
  4011f6:	e792      	b.n	40111e <setvbuf+0xae>
  4011f8:	464e      	mov	r6, r9
  4011fa:	e783      	b.n	401104 <setvbuf+0x94>
  4011fc:	20400008 	.word	0x20400008

00401200 <strlen>:
  401200:	f890 f000 	pld	[r0]
  401204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401208:	f020 0107 	bic.w	r1, r0, #7
  40120c:	f06f 0c00 	mvn.w	ip, #0
  401210:	f010 0407 	ands.w	r4, r0, #7
  401214:	f891 f020 	pld	[r1, #32]
  401218:	f040 8049 	bne.w	4012ae <strlen+0xae>
  40121c:	f04f 0400 	mov.w	r4, #0
  401220:	f06f 0007 	mvn.w	r0, #7
  401224:	e9d1 2300 	ldrd	r2, r3, [r1]
  401228:	f891 f040 	pld	[r1, #64]	; 0x40
  40122c:	f100 0008 	add.w	r0, r0, #8
  401230:	fa82 f24c 	uadd8	r2, r2, ip
  401234:	faa4 f28c 	sel	r2, r4, ip
  401238:	fa83 f34c 	uadd8	r3, r3, ip
  40123c:	faa2 f38c 	sel	r3, r2, ip
  401240:	bb4b      	cbnz	r3, 401296 <strlen+0x96>
  401242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401246:	fa82 f24c 	uadd8	r2, r2, ip
  40124a:	f100 0008 	add.w	r0, r0, #8
  40124e:	faa4 f28c 	sel	r2, r4, ip
  401252:	fa83 f34c 	uadd8	r3, r3, ip
  401256:	faa2 f38c 	sel	r3, r2, ip
  40125a:	b9e3      	cbnz	r3, 401296 <strlen+0x96>
  40125c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401260:	fa82 f24c 	uadd8	r2, r2, ip
  401264:	f100 0008 	add.w	r0, r0, #8
  401268:	faa4 f28c 	sel	r2, r4, ip
  40126c:	fa83 f34c 	uadd8	r3, r3, ip
  401270:	faa2 f38c 	sel	r3, r2, ip
  401274:	b97b      	cbnz	r3, 401296 <strlen+0x96>
  401276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40127a:	f101 0120 	add.w	r1, r1, #32
  40127e:	fa82 f24c 	uadd8	r2, r2, ip
  401282:	f100 0008 	add.w	r0, r0, #8
  401286:	faa4 f28c 	sel	r2, r4, ip
  40128a:	fa83 f34c 	uadd8	r3, r3, ip
  40128e:	faa2 f38c 	sel	r3, r2, ip
  401292:	2b00      	cmp	r3, #0
  401294:	d0c6      	beq.n	401224 <strlen+0x24>
  401296:	2a00      	cmp	r2, #0
  401298:	bf04      	itt	eq
  40129a:	3004      	addeq	r0, #4
  40129c:	461a      	moveq	r2, r3
  40129e:	ba12      	rev	r2, r2
  4012a0:	fab2 f282 	clz	r2, r2
  4012a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4012a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4012ac:	4770      	bx	lr
  4012ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4012b2:	f004 0503 	and.w	r5, r4, #3
  4012b6:	f1c4 0000 	rsb	r0, r4, #0
  4012ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4012be:	f014 0f04 	tst.w	r4, #4
  4012c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4012c6:	fa0c f505 	lsl.w	r5, ip, r5
  4012ca:	ea62 0205 	orn	r2, r2, r5
  4012ce:	bf1c      	itt	ne
  4012d0:	ea63 0305 	ornne	r3, r3, r5
  4012d4:	4662      	movne	r2, ip
  4012d6:	f04f 0400 	mov.w	r4, #0
  4012da:	e7a9      	b.n	401230 <strlen+0x30>

004012dc <__sprint_r.part.0>:
  4012dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4012e2:	049c      	lsls	r4, r3, #18
  4012e4:	4693      	mov	fp, r2
  4012e6:	d52f      	bpl.n	401348 <__sprint_r.part.0+0x6c>
  4012e8:	6893      	ldr	r3, [r2, #8]
  4012ea:	6812      	ldr	r2, [r2, #0]
  4012ec:	b353      	cbz	r3, 401344 <__sprint_r.part.0+0x68>
  4012ee:	460e      	mov	r6, r1
  4012f0:	4607      	mov	r7, r0
  4012f2:	f102 0908 	add.w	r9, r2, #8
  4012f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4012fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4012fe:	d017      	beq.n	401330 <__sprint_r.part.0+0x54>
  401300:	3d04      	subs	r5, #4
  401302:	2400      	movs	r4, #0
  401304:	e001      	b.n	40130a <__sprint_r.part.0+0x2e>
  401306:	45a0      	cmp	r8, r4
  401308:	d010      	beq.n	40132c <__sprint_r.part.0+0x50>
  40130a:	4632      	mov	r2, r6
  40130c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401310:	4638      	mov	r0, r7
  401312:	f001 f8bb 	bl	40248c <_fputwc_r>
  401316:	1c43      	adds	r3, r0, #1
  401318:	f104 0401 	add.w	r4, r4, #1
  40131c:	d1f3      	bne.n	401306 <__sprint_r.part.0+0x2a>
  40131e:	2300      	movs	r3, #0
  401320:	f8cb 3008 	str.w	r3, [fp, #8]
  401324:	f8cb 3004 	str.w	r3, [fp, #4]
  401328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40132c:	f8db 3008 	ldr.w	r3, [fp, #8]
  401330:	f02a 0a03 	bic.w	sl, sl, #3
  401334:	eba3 030a 	sub.w	r3, r3, sl
  401338:	f8cb 3008 	str.w	r3, [fp, #8]
  40133c:	f109 0908 	add.w	r9, r9, #8
  401340:	2b00      	cmp	r3, #0
  401342:	d1d8      	bne.n	4012f6 <__sprint_r.part.0+0x1a>
  401344:	2000      	movs	r0, #0
  401346:	e7ea      	b.n	40131e <__sprint_r.part.0+0x42>
  401348:	f001 fa0a 	bl	402760 <__sfvwrite_r>
  40134c:	2300      	movs	r3, #0
  40134e:	f8cb 3008 	str.w	r3, [fp, #8]
  401352:	f8cb 3004 	str.w	r3, [fp, #4]
  401356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40135a:	bf00      	nop

0040135c <_vfiprintf_r>:
  40135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401360:	b0ad      	sub	sp, #180	; 0xb4
  401362:	461d      	mov	r5, r3
  401364:	468b      	mov	fp, r1
  401366:	4690      	mov	r8, r2
  401368:	9307      	str	r3, [sp, #28]
  40136a:	9006      	str	r0, [sp, #24]
  40136c:	b118      	cbz	r0, 401376 <_vfiprintf_r+0x1a>
  40136e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401370:	2b00      	cmp	r3, #0
  401372:	f000 80f3 	beq.w	40155c <_vfiprintf_r+0x200>
  401376:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40137a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40137e:	07df      	lsls	r7, r3, #31
  401380:	b281      	uxth	r1, r0
  401382:	d402      	bmi.n	40138a <_vfiprintf_r+0x2e>
  401384:	058e      	lsls	r6, r1, #22
  401386:	f140 80fc 	bpl.w	401582 <_vfiprintf_r+0x226>
  40138a:	048c      	lsls	r4, r1, #18
  40138c:	d40a      	bmi.n	4013a4 <_vfiprintf_r+0x48>
  40138e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401392:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40139a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40139e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4013a2:	b289      	uxth	r1, r1
  4013a4:	0708      	lsls	r0, r1, #28
  4013a6:	f140 80b3 	bpl.w	401510 <_vfiprintf_r+0x1b4>
  4013aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4013ae:	2b00      	cmp	r3, #0
  4013b0:	f000 80ae 	beq.w	401510 <_vfiprintf_r+0x1b4>
  4013b4:	f001 031a 	and.w	r3, r1, #26
  4013b8:	2b0a      	cmp	r3, #10
  4013ba:	f000 80b5 	beq.w	401528 <_vfiprintf_r+0x1cc>
  4013be:	2300      	movs	r3, #0
  4013c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4013c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4013c6:	9311      	str	r3, [sp, #68]	; 0x44
  4013c8:	9310      	str	r3, [sp, #64]	; 0x40
  4013ca:	9303      	str	r3, [sp, #12]
  4013cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4013d0:	46ca      	mov	sl, r9
  4013d2:	f8cd b010 	str.w	fp, [sp, #16]
  4013d6:	f898 3000 	ldrb.w	r3, [r8]
  4013da:	4644      	mov	r4, r8
  4013dc:	b1fb      	cbz	r3, 40141e <_vfiprintf_r+0xc2>
  4013de:	2b25      	cmp	r3, #37	; 0x25
  4013e0:	d102      	bne.n	4013e8 <_vfiprintf_r+0x8c>
  4013e2:	e01c      	b.n	40141e <_vfiprintf_r+0xc2>
  4013e4:	2b25      	cmp	r3, #37	; 0x25
  4013e6:	d003      	beq.n	4013f0 <_vfiprintf_r+0x94>
  4013e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	d1f9      	bne.n	4013e4 <_vfiprintf_r+0x88>
  4013f0:	eba4 0508 	sub.w	r5, r4, r8
  4013f4:	b19d      	cbz	r5, 40141e <_vfiprintf_r+0xc2>
  4013f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4013f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4013fa:	f8ca 8000 	str.w	r8, [sl]
  4013fe:	3301      	adds	r3, #1
  401400:	442a      	add	r2, r5
  401402:	2b07      	cmp	r3, #7
  401404:	f8ca 5004 	str.w	r5, [sl, #4]
  401408:	9211      	str	r2, [sp, #68]	; 0x44
  40140a:	9310      	str	r3, [sp, #64]	; 0x40
  40140c:	dd7a      	ble.n	401504 <_vfiprintf_r+0x1a8>
  40140e:	2a00      	cmp	r2, #0
  401410:	f040 84b0 	bne.w	401d74 <_vfiprintf_r+0xa18>
  401414:	9b03      	ldr	r3, [sp, #12]
  401416:	9210      	str	r2, [sp, #64]	; 0x40
  401418:	442b      	add	r3, r5
  40141a:	46ca      	mov	sl, r9
  40141c:	9303      	str	r3, [sp, #12]
  40141e:	7823      	ldrb	r3, [r4, #0]
  401420:	2b00      	cmp	r3, #0
  401422:	f000 83e0 	beq.w	401be6 <_vfiprintf_r+0x88a>
  401426:	2000      	movs	r0, #0
  401428:	f04f 0300 	mov.w	r3, #0
  40142c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401430:	f104 0801 	add.w	r8, r4, #1
  401434:	7862      	ldrb	r2, [r4, #1]
  401436:	4605      	mov	r5, r0
  401438:	4606      	mov	r6, r0
  40143a:	4603      	mov	r3, r0
  40143c:	f04f 34ff 	mov.w	r4, #4294967295
  401440:	f108 0801 	add.w	r8, r8, #1
  401444:	f1a2 0120 	sub.w	r1, r2, #32
  401448:	2958      	cmp	r1, #88	; 0x58
  40144a:	f200 82de 	bhi.w	401a0a <_vfiprintf_r+0x6ae>
  40144e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401452:	0221      	.short	0x0221
  401454:	02dc02dc 	.word	0x02dc02dc
  401458:	02dc0229 	.word	0x02dc0229
  40145c:	02dc02dc 	.word	0x02dc02dc
  401460:	02dc02dc 	.word	0x02dc02dc
  401464:	028902dc 	.word	0x028902dc
  401468:	02dc0295 	.word	0x02dc0295
  40146c:	02bd00a2 	.word	0x02bd00a2
  401470:	019f02dc 	.word	0x019f02dc
  401474:	01a401a4 	.word	0x01a401a4
  401478:	01a401a4 	.word	0x01a401a4
  40147c:	01a401a4 	.word	0x01a401a4
  401480:	01a401a4 	.word	0x01a401a4
  401484:	02dc01a4 	.word	0x02dc01a4
  401488:	02dc02dc 	.word	0x02dc02dc
  40148c:	02dc02dc 	.word	0x02dc02dc
  401490:	02dc02dc 	.word	0x02dc02dc
  401494:	02dc02dc 	.word	0x02dc02dc
  401498:	01b202dc 	.word	0x01b202dc
  40149c:	02dc02dc 	.word	0x02dc02dc
  4014a0:	02dc02dc 	.word	0x02dc02dc
  4014a4:	02dc02dc 	.word	0x02dc02dc
  4014a8:	02dc02dc 	.word	0x02dc02dc
  4014ac:	02dc02dc 	.word	0x02dc02dc
  4014b0:	02dc0197 	.word	0x02dc0197
  4014b4:	02dc02dc 	.word	0x02dc02dc
  4014b8:	02dc02dc 	.word	0x02dc02dc
  4014bc:	02dc019b 	.word	0x02dc019b
  4014c0:	025302dc 	.word	0x025302dc
  4014c4:	02dc02dc 	.word	0x02dc02dc
  4014c8:	02dc02dc 	.word	0x02dc02dc
  4014cc:	02dc02dc 	.word	0x02dc02dc
  4014d0:	02dc02dc 	.word	0x02dc02dc
  4014d4:	02dc02dc 	.word	0x02dc02dc
  4014d8:	021b025a 	.word	0x021b025a
  4014dc:	02dc02dc 	.word	0x02dc02dc
  4014e0:	026e02dc 	.word	0x026e02dc
  4014e4:	02dc021b 	.word	0x02dc021b
  4014e8:	027302dc 	.word	0x027302dc
  4014ec:	01f502dc 	.word	0x01f502dc
  4014f0:	02090182 	.word	0x02090182
  4014f4:	02dc02d7 	.word	0x02dc02d7
  4014f8:	02dc029a 	.word	0x02dc029a
  4014fc:	02dc00a7 	.word	0x02dc00a7
  401500:	022e02dc 	.word	0x022e02dc
  401504:	f10a 0a08 	add.w	sl, sl, #8
  401508:	9b03      	ldr	r3, [sp, #12]
  40150a:	442b      	add	r3, r5
  40150c:	9303      	str	r3, [sp, #12]
  40150e:	e786      	b.n	40141e <_vfiprintf_r+0xc2>
  401510:	4659      	mov	r1, fp
  401512:	9806      	ldr	r0, [sp, #24]
  401514:	f000 fdac 	bl	402070 <__swsetup_r>
  401518:	bb18      	cbnz	r0, 401562 <_vfiprintf_r+0x206>
  40151a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40151e:	f001 031a 	and.w	r3, r1, #26
  401522:	2b0a      	cmp	r3, #10
  401524:	f47f af4b 	bne.w	4013be <_vfiprintf_r+0x62>
  401528:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40152c:	2b00      	cmp	r3, #0
  40152e:	f6ff af46 	blt.w	4013be <_vfiprintf_r+0x62>
  401532:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401536:	07db      	lsls	r3, r3, #31
  401538:	d405      	bmi.n	401546 <_vfiprintf_r+0x1ea>
  40153a:	058f      	lsls	r7, r1, #22
  40153c:	d403      	bmi.n	401546 <_vfiprintf_r+0x1ea>
  40153e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401542:	f001 fac3 	bl	402acc <__retarget_lock_release_recursive>
  401546:	462b      	mov	r3, r5
  401548:	4642      	mov	r2, r8
  40154a:	4659      	mov	r1, fp
  40154c:	9806      	ldr	r0, [sp, #24]
  40154e:	f000 fd4d 	bl	401fec <__sbprintf>
  401552:	9003      	str	r0, [sp, #12]
  401554:	9803      	ldr	r0, [sp, #12]
  401556:	b02d      	add	sp, #180	; 0xb4
  401558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40155c:	f000 fef4 	bl	402348 <__sinit>
  401560:	e709      	b.n	401376 <_vfiprintf_r+0x1a>
  401562:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401566:	07d9      	lsls	r1, r3, #31
  401568:	d404      	bmi.n	401574 <_vfiprintf_r+0x218>
  40156a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40156e:	059a      	lsls	r2, r3, #22
  401570:	f140 84aa 	bpl.w	401ec8 <_vfiprintf_r+0xb6c>
  401574:	f04f 33ff 	mov.w	r3, #4294967295
  401578:	9303      	str	r3, [sp, #12]
  40157a:	9803      	ldr	r0, [sp, #12]
  40157c:	b02d      	add	sp, #180	; 0xb4
  40157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401582:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401586:	f001 fa9f 	bl	402ac8 <__retarget_lock_acquire_recursive>
  40158a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40158e:	b281      	uxth	r1, r0
  401590:	e6fb      	b.n	40138a <_vfiprintf_r+0x2e>
  401592:	4276      	negs	r6, r6
  401594:	9207      	str	r2, [sp, #28]
  401596:	f043 0304 	orr.w	r3, r3, #4
  40159a:	f898 2000 	ldrb.w	r2, [r8]
  40159e:	e74f      	b.n	401440 <_vfiprintf_r+0xe4>
  4015a0:	9608      	str	r6, [sp, #32]
  4015a2:	069e      	lsls	r6, r3, #26
  4015a4:	f100 8450 	bmi.w	401e48 <_vfiprintf_r+0xaec>
  4015a8:	9907      	ldr	r1, [sp, #28]
  4015aa:	06dd      	lsls	r5, r3, #27
  4015ac:	460a      	mov	r2, r1
  4015ae:	f100 83ef 	bmi.w	401d90 <_vfiprintf_r+0xa34>
  4015b2:	0658      	lsls	r0, r3, #25
  4015b4:	f140 83ec 	bpl.w	401d90 <_vfiprintf_r+0xa34>
  4015b8:	880e      	ldrh	r6, [r1, #0]
  4015ba:	3104      	adds	r1, #4
  4015bc:	2700      	movs	r7, #0
  4015be:	2201      	movs	r2, #1
  4015c0:	9107      	str	r1, [sp, #28]
  4015c2:	f04f 0100 	mov.w	r1, #0
  4015c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4015ca:	2500      	movs	r5, #0
  4015cc:	1c61      	adds	r1, r4, #1
  4015ce:	f000 8116 	beq.w	4017fe <_vfiprintf_r+0x4a2>
  4015d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4015d6:	9102      	str	r1, [sp, #8]
  4015d8:	ea56 0107 	orrs.w	r1, r6, r7
  4015dc:	f040 8114 	bne.w	401808 <_vfiprintf_r+0x4ac>
  4015e0:	2c00      	cmp	r4, #0
  4015e2:	f040 835c 	bne.w	401c9e <_vfiprintf_r+0x942>
  4015e6:	2a00      	cmp	r2, #0
  4015e8:	f040 83b7 	bne.w	401d5a <_vfiprintf_r+0x9fe>
  4015ec:	f013 0301 	ands.w	r3, r3, #1
  4015f0:	9305      	str	r3, [sp, #20]
  4015f2:	f000 8457 	beq.w	401ea4 <_vfiprintf_r+0xb48>
  4015f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4015fa:	2330      	movs	r3, #48	; 0x30
  4015fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401600:	9b05      	ldr	r3, [sp, #20]
  401602:	42a3      	cmp	r3, r4
  401604:	bfb8      	it	lt
  401606:	4623      	movlt	r3, r4
  401608:	9301      	str	r3, [sp, #4]
  40160a:	b10d      	cbz	r5, 401610 <_vfiprintf_r+0x2b4>
  40160c:	3301      	adds	r3, #1
  40160e:	9301      	str	r3, [sp, #4]
  401610:	9b02      	ldr	r3, [sp, #8]
  401612:	f013 0302 	ands.w	r3, r3, #2
  401616:	9309      	str	r3, [sp, #36]	; 0x24
  401618:	d002      	beq.n	401620 <_vfiprintf_r+0x2c4>
  40161a:	9b01      	ldr	r3, [sp, #4]
  40161c:	3302      	adds	r3, #2
  40161e:	9301      	str	r3, [sp, #4]
  401620:	9b02      	ldr	r3, [sp, #8]
  401622:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401626:	930a      	str	r3, [sp, #40]	; 0x28
  401628:	f040 8217 	bne.w	401a5a <_vfiprintf_r+0x6fe>
  40162c:	9b08      	ldr	r3, [sp, #32]
  40162e:	9a01      	ldr	r2, [sp, #4]
  401630:	1a9d      	subs	r5, r3, r2
  401632:	2d00      	cmp	r5, #0
  401634:	f340 8211 	ble.w	401a5a <_vfiprintf_r+0x6fe>
  401638:	2d10      	cmp	r5, #16
  40163a:	f340 8490 	ble.w	401f5e <_vfiprintf_r+0xc02>
  40163e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401640:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401642:	4ec4      	ldr	r6, [pc, #784]	; (401954 <_vfiprintf_r+0x5f8>)
  401644:	46d6      	mov	lr, sl
  401646:	2710      	movs	r7, #16
  401648:	46a2      	mov	sl, r4
  40164a:	4619      	mov	r1, r3
  40164c:	9c06      	ldr	r4, [sp, #24]
  40164e:	e007      	b.n	401660 <_vfiprintf_r+0x304>
  401650:	f101 0c02 	add.w	ip, r1, #2
  401654:	f10e 0e08 	add.w	lr, lr, #8
  401658:	4601      	mov	r1, r0
  40165a:	3d10      	subs	r5, #16
  40165c:	2d10      	cmp	r5, #16
  40165e:	dd11      	ble.n	401684 <_vfiprintf_r+0x328>
  401660:	1c48      	adds	r0, r1, #1
  401662:	3210      	adds	r2, #16
  401664:	2807      	cmp	r0, #7
  401666:	9211      	str	r2, [sp, #68]	; 0x44
  401668:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40166c:	9010      	str	r0, [sp, #64]	; 0x40
  40166e:	ddef      	ble.n	401650 <_vfiprintf_r+0x2f4>
  401670:	2a00      	cmp	r2, #0
  401672:	f040 81e4 	bne.w	401a3e <_vfiprintf_r+0x6e2>
  401676:	3d10      	subs	r5, #16
  401678:	2d10      	cmp	r5, #16
  40167a:	4611      	mov	r1, r2
  40167c:	f04f 0c01 	mov.w	ip, #1
  401680:	46ce      	mov	lr, r9
  401682:	dced      	bgt.n	401660 <_vfiprintf_r+0x304>
  401684:	4654      	mov	r4, sl
  401686:	4661      	mov	r1, ip
  401688:	46f2      	mov	sl, lr
  40168a:	442a      	add	r2, r5
  40168c:	2907      	cmp	r1, #7
  40168e:	9211      	str	r2, [sp, #68]	; 0x44
  401690:	f8ca 6000 	str.w	r6, [sl]
  401694:	f8ca 5004 	str.w	r5, [sl, #4]
  401698:	9110      	str	r1, [sp, #64]	; 0x40
  40169a:	f300 82ec 	bgt.w	401c76 <_vfiprintf_r+0x91a>
  40169e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4016a2:	f10a 0a08 	add.w	sl, sl, #8
  4016a6:	1c48      	adds	r0, r1, #1
  4016a8:	2d00      	cmp	r5, #0
  4016aa:	f040 81de 	bne.w	401a6a <_vfiprintf_r+0x70e>
  4016ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016b0:	2b00      	cmp	r3, #0
  4016b2:	f000 81f8 	beq.w	401aa6 <_vfiprintf_r+0x74a>
  4016b6:	3202      	adds	r2, #2
  4016b8:	a90e      	add	r1, sp, #56	; 0x38
  4016ba:	2302      	movs	r3, #2
  4016bc:	2807      	cmp	r0, #7
  4016be:	9211      	str	r2, [sp, #68]	; 0x44
  4016c0:	9010      	str	r0, [sp, #64]	; 0x40
  4016c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4016c6:	f340 81ea 	ble.w	401a9e <_vfiprintf_r+0x742>
  4016ca:	2a00      	cmp	r2, #0
  4016cc:	f040 838c 	bne.w	401de8 <_vfiprintf_r+0xa8c>
  4016d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4016d2:	2b80      	cmp	r3, #128	; 0x80
  4016d4:	f04f 0001 	mov.w	r0, #1
  4016d8:	4611      	mov	r1, r2
  4016da:	46ca      	mov	sl, r9
  4016dc:	f040 81e7 	bne.w	401aae <_vfiprintf_r+0x752>
  4016e0:	9b08      	ldr	r3, [sp, #32]
  4016e2:	9d01      	ldr	r5, [sp, #4]
  4016e4:	1b5e      	subs	r6, r3, r5
  4016e6:	2e00      	cmp	r6, #0
  4016e8:	f340 81e1 	ble.w	401aae <_vfiprintf_r+0x752>
  4016ec:	2e10      	cmp	r6, #16
  4016ee:	4d9a      	ldr	r5, [pc, #616]	; (401958 <_vfiprintf_r+0x5fc>)
  4016f0:	f340 8450 	ble.w	401f94 <_vfiprintf_r+0xc38>
  4016f4:	46d4      	mov	ip, sl
  4016f6:	2710      	movs	r7, #16
  4016f8:	46a2      	mov	sl, r4
  4016fa:	9c06      	ldr	r4, [sp, #24]
  4016fc:	e007      	b.n	40170e <_vfiprintf_r+0x3b2>
  4016fe:	f101 0e02 	add.w	lr, r1, #2
  401702:	f10c 0c08 	add.w	ip, ip, #8
  401706:	4601      	mov	r1, r0
  401708:	3e10      	subs	r6, #16
  40170a:	2e10      	cmp	r6, #16
  40170c:	dd11      	ble.n	401732 <_vfiprintf_r+0x3d6>
  40170e:	1c48      	adds	r0, r1, #1
  401710:	3210      	adds	r2, #16
  401712:	2807      	cmp	r0, #7
  401714:	9211      	str	r2, [sp, #68]	; 0x44
  401716:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40171a:	9010      	str	r0, [sp, #64]	; 0x40
  40171c:	ddef      	ble.n	4016fe <_vfiprintf_r+0x3a2>
  40171e:	2a00      	cmp	r2, #0
  401720:	f040 829d 	bne.w	401c5e <_vfiprintf_r+0x902>
  401724:	3e10      	subs	r6, #16
  401726:	2e10      	cmp	r6, #16
  401728:	f04f 0e01 	mov.w	lr, #1
  40172c:	4611      	mov	r1, r2
  40172e:	46cc      	mov	ip, r9
  401730:	dced      	bgt.n	40170e <_vfiprintf_r+0x3b2>
  401732:	4654      	mov	r4, sl
  401734:	46e2      	mov	sl, ip
  401736:	4432      	add	r2, r6
  401738:	f1be 0f07 	cmp.w	lr, #7
  40173c:	9211      	str	r2, [sp, #68]	; 0x44
  40173e:	e88a 0060 	stmia.w	sl, {r5, r6}
  401742:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401746:	f300 8369 	bgt.w	401e1c <_vfiprintf_r+0xac0>
  40174a:	f10a 0a08 	add.w	sl, sl, #8
  40174e:	f10e 0001 	add.w	r0, lr, #1
  401752:	4671      	mov	r1, lr
  401754:	e1ab      	b.n	401aae <_vfiprintf_r+0x752>
  401756:	9608      	str	r6, [sp, #32]
  401758:	f013 0220 	ands.w	r2, r3, #32
  40175c:	f040 838c 	bne.w	401e78 <_vfiprintf_r+0xb1c>
  401760:	f013 0110 	ands.w	r1, r3, #16
  401764:	f040 831a 	bne.w	401d9c <_vfiprintf_r+0xa40>
  401768:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40176c:	f000 8316 	beq.w	401d9c <_vfiprintf_r+0xa40>
  401770:	9807      	ldr	r0, [sp, #28]
  401772:	460a      	mov	r2, r1
  401774:	4601      	mov	r1, r0
  401776:	3104      	adds	r1, #4
  401778:	8806      	ldrh	r6, [r0, #0]
  40177a:	9107      	str	r1, [sp, #28]
  40177c:	2700      	movs	r7, #0
  40177e:	e720      	b.n	4015c2 <_vfiprintf_r+0x266>
  401780:	9608      	str	r6, [sp, #32]
  401782:	f043 0310 	orr.w	r3, r3, #16
  401786:	e7e7      	b.n	401758 <_vfiprintf_r+0x3fc>
  401788:	9608      	str	r6, [sp, #32]
  40178a:	f043 0310 	orr.w	r3, r3, #16
  40178e:	e708      	b.n	4015a2 <_vfiprintf_r+0x246>
  401790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401794:	f898 2000 	ldrb.w	r2, [r8]
  401798:	e652      	b.n	401440 <_vfiprintf_r+0xe4>
  40179a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40179e:	2600      	movs	r6, #0
  4017a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4017a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4017a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4017ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4017b0:	2909      	cmp	r1, #9
  4017b2:	d9f5      	bls.n	4017a0 <_vfiprintf_r+0x444>
  4017b4:	e646      	b.n	401444 <_vfiprintf_r+0xe8>
  4017b6:	9608      	str	r6, [sp, #32]
  4017b8:	2800      	cmp	r0, #0
  4017ba:	f040 8408 	bne.w	401fce <_vfiprintf_r+0xc72>
  4017be:	f043 0310 	orr.w	r3, r3, #16
  4017c2:	069e      	lsls	r6, r3, #26
  4017c4:	f100 834c 	bmi.w	401e60 <_vfiprintf_r+0xb04>
  4017c8:	06dd      	lsls	r5, r3, #27
  4017ca:	f100 82f3 	bmi.w	401db4 <_vfiprintf_r+0xa58>
  4017ce:	0658      	lsls	r0, r3, #25
  4017d0:	f140 82f0 	bpl.w	401db4 <_vfiprintf_r+0xa58>
  4017d4:	9d07      	ldr	r5, [sp, #28]
  4017d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4017da:	462a      	mov	r2, r5
  4017dc:	17f7      	asrs	r7, r6, #31
  4017de:	3204      	adds	r2, #4
  4017e0:	4630      	mov	r0, r6
  4017e2:	4639      	mov	r1, r7
  4017e4:	9207      	str	r2, [sp, #28]
  4017e6:	2800      	cmp	r0, #0
  4017e8:	f171 0200 	sbcs.w	r2, r1, #0
  4017ec:	f2c0 835d 	blt.w	401eaa <_vfiprintf_r+0xb4e>
  4017f0:	1c61      	adds	r1, r4, #1
  4017f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4017f6:	f04f 0201 	mov.w	r2, #1
  4017fa:	f47f aeea 	bne.w	4015d2 <_vfiprintf_r+0x276>
  4017fe:	ea56 0107 	orrs.w	r1, r6, r7
  401802:	f000 824d 	beq.w	401ca0 <_vfiprintf_r+0x944>
  401806:	9302      	str	r3, [sp, #8]
  401808:	2a01      	cmp	r2, #1
  40180a:	f000 828c 	beq.w	401d26 <_vfiprintf_r+0x9ca>
  40180e:	2a02      	cmp	r2, #2
  401810:	f040 825c 	bne.w	401ccc <_vfiprintf_r+0x970>
  401814:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401816:	46cb      	mov	fp, r9
  401818:	0933      	lsrs	r3, r6, #4
  40181a:	f006 010f 	and.w	r1, r6, #15
  40181e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401822:	093a      	lsrs	r2, r7, #4
  401824:	461e      	mov	r6, r3
  401826:	4617      	mov	r7, r2
  401828:	5c43      	ldrb	r3, [r0, r1]
  40182a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40182e:	ea56 0307 	orrs.w	r3, r6, r7
  401832:	d1f1      	bne.n	401818 <_vfiprintf_r+0x4bc>
  401834:	eba9 030b 	sub.w	r3, r9, fp
  401838:	9305      	str	r3, [sp, #20]
  40183a:	e6e1      	b.n	401600 <_vfiprintf_r+0x2a4>
  40183c:	2800      	cmp	r0, #0
  40183e:	f040 83c0 	bne.w	401fc2 <_vfiprintf_r+0xc66>
  401842:	0699      	lsls	r1, r3, #26
  401844:	f100 8367 	bmi.w	401f16 <_vfiprintf_r+0xbba>
  401848:	06da      	lsls	r2, r3, #27
  40184a:	f100 80f1 	bmi.w	401a30 <_vfiprintf_r+0x6d4>
  40184e:	065b      	lsls	r3, r3, #25
  401850:	f140 80ee 	bpl.w	401a30 <_vfiprintf_r+0x6d4>
  401854:	9a07      	ldr	r2, [sp, #28]
  401856:	6813      	ldr	r3, [r2, #0]
  401858:	3204      	adds	r2, #4
  40185a:	9207      	str	r2, [sp, #28]
  40185c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401860:	801a      	strh	r2, [r3, #0]
  401862:	e5b8      	b.n	4013d6 <_vfiprintf_r+0x7a>
  401864:	9807      	ldr	r0, [sp, #28]
  401866:	4a3d      	ldr	r2, [pc, #244]	; (40195c <_vfiprintf_r+0x600>)
  401868:	9608      	str	r6, [sp, #32]
  40186a:	920b      	str	r2, [sp, #44]	; 0x2c
  40186c:	6806      	ldr	r6, [r0, #0]
  40186e:	2278      	movs	r2, #120	; 0x78
  401870:	2130      	movs	r1, #48	; 0x30
  401872:	3004      	adds	r0, #4
  401874:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401878:	f043 0302 	orr.w	r3, r3, #2
  40187c:	9007      	str	r0, [sp, #28]
  40187e:	2700      	movs	r7, #0
  401880:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401884:	2202      	movs	r2, #2
  401886:	e69c      	b.n	4015c2 <_vfiprintf_r+0x266>
  401888:	9608      	str	r6, [sp, #32]
  40188a:	2800      	cmp	r0, #0
  40188c:	d099      	beq.n	4017c2 <_vfiprintf_r+0x466>
  40188e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401892:	e796      	b.n	4017c2 <_vfiprintf_r+0x466>
  401894:	f898 2000 	ldrb.w	r2, [r8]
  401898:	2d00      	cmp	r5, #0
  40189a:	f47f add1 	bne.w	401440 <_vfiprintf_r+0xe4>
  40189e:	2001      	movs	r0, #1
  4018a0:	2520      	movs	r5, #32
  4018a2:	e5cd      	b.n	401440 <_vfiprintf_r+0xe4>
  4018a4:	f043 0301 	orr.w	r3, r3, #1
  4018a8:	f898 2000 	ldrb.w	r2, [r8]
  4018ac:	e5c8      	b.n	401440 <_vfiprintf_r+0xe4>
  4018ae:	9608      	str	r6, [sp, #32]
  4018b0:	2800      	cmp	r0, #0
  4018b2:	f040 8393 	bne.w	401fdc <_vfiprintf_r+0xc80>
  4018b6:	4929      	ldr	r1, [pc, #164]	; (40195c <_vfiprintf_r+0x600>)
  4018b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4018ba:	069f      	lsls	r7, r3, #26
  4018bc:	f100 82e8 	bmi.w	401e90 <_vfiprintf_r+0xb34>
  4018c0:	9807      	ldr	r0, [sp, #28]
  4018c2:	06de      	lsls	r6, r3, #27
  4018c4:	4601      	mov	r1, r0
  4018c6:	f100 8270 	bmi.w	401daa <_vfiprintf_r+0xa4e>
  4018ca:	065d      	lsls	r5, r3, #25
  4018cc:	f140 826d 	bpl.w	401daa <_vfiprintf_r+0xa4e>
  4018d0:	3104      	adds	r1, #4
  4018d2:	8806      	ldrh	r6, [r0, #0]
  4018d4:	9107      	str	r1, [sp, #28]
  4018d6:	2700      	movs	r7, #0
  4018d8:	07d8      	lsls	r0, r3, #31
  4018da:	f140 8222 	bpl.w	401d22 <_vfiprintf_r+0x9c6>
  4018de:	ea56 0107 	orrs.w	r1, r6, r7
  4018e2:	f000 821e 	beq.w	401d22 <_vfiprintf_r+0x9c6>
  4018e6:	2130      	movs	r1, #48	; 0x30
  4018e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4018ec:	f043 0302 	orr.w	r3, r3, #2
  4018f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4018f4:	2202      	movs	r2, #2
  4018f6:	e664      	b.n	4015c2 <_vfiprintf_r+0x266>
  4018f8:	9608      	str	r6, [sp, #32]
  4018fa:	2800      	cmp	r0, #0
  4018fc:	f040 836b 	bne.w	401fd6 <_vfiprintf_r+0xc7a>
  401900:	4917      	ldr	r1, [pc, #92]	; (401960 <_vfiprintf_r+0x604>)
  401902:	910b      	str	r1, [sp, #44]	; 0x2c
  401904:	e7d9      	b.n	4018ba <_vfiprintf_r+0x55e>
  401906:	9907      	ldr	r1, [sp, #28]
  401908:	9608      	str	r6, [sp, #32]
  40190a:	680a      	ldr	r2, [r1, #0]
  40190c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401910:	f04f 0000 	mov.w	r0, #0
  401914:	460a      	mov	r2, r1
  401916:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40191a:	3204      	adds	r2, #4
  40191c:	2001      	movs	r0, #1
  40191e:	9001      	str	r0, [sp, #4]
  401920:	9207      	str	r2, [sp, #28]
  401922:	9005      	str	r0, [sp, #20]
  401924:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401928:	9302      	str	r3, [sp, #8]
  40192a:	2400      	movs	r4, #0
  40192c:	e670      	b.n	401610 <_vfiprintf_r+0x2b4>
  40192e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401932:	f898 2000 	ldrb.w	r2, [r8]
  401936:	e583      	b.n	401440 <_vfiprintf_r+0xe4>
  401938:	f898 2000 	ldrb.w	r2, [r8]
  40193c:	2a6c      	cmp	r2, #108	; 0x6c
  40193e:	bf03      	ittte	eq
  401940:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401944:	f043 0320 	orreq.w	r3, r3, #32
  401948:	f108 0801 	addeq.w	r8, r8, #1
  40194c:	f043 0310 	orrne.w	r3, r3, #16
  401950:	e576      	b.n	401440 <_vfiprintf_r+0xe4>
  401952:	bf00      	nop
  401954:	00403f70 	.word	0x00403f70
  401958:	00403f80 	.word	0x00403f80
  40195c:	00403f54 	.word	0x00403f54
  401960:	00403f40 	.word	0x00403f40
  401964:	9907      	ldr	r1, [sp, #28]
  401966:	680e      	ldr	r6, [r1, #0]
  401968:	460a      	mov	r2, r1
  40196a:	2e00      	cmp	r6, #0
  40196c:	f102 0204 	add.w	r2, r2, #4
  401970:	f6ff ae0f 	blt.w	401592 <_vfiprintf_r+0x236>
  401974:	9207      	str	r2, [sp, #28]
  401976:	f898 2000 	ldrb.w	r2, [r8]
  40197a:	e561      	b.n	401440 <_vfiprintf_r+0xe4>
  40197c:	f898 2000 	ldrb.w	r2, [r8]
  401980:	2001      	movs	r0, #1
  401982:	252b      	movs	r5, #43	; 0x2b
  401984:	e55c      	b.n	401440 <_vfiprintf_r+0xe4>
  401986:	9907      	ldr	r1, [sp, #28]
  401988:	9608      	str	r6, [sp, #32]
  40198a:	f8d1 b000 	ldr.w	fp, [r1]
  40198e:	f04f 0200 	mov.w	r2, #0
  401992:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401996:	1d0e      	adds	r6, r1, #4
  401998:	f1bb 0f00 	cmp.w	fp, #0
  40199c:	f000 82e5 	beq.w	401f6a <_vfiprintf_r+0xc0e>
  4019a0:	1c67      	adds	r7, r4, #1
  4019a2:	f000 82c4 	beq.w	401f2e <_vfiprintf_r+0xbd2>
  4019a6:	4622      	mov	r2, r4
  4019a8:	2100      	movs	r1, #0
  4019aa:	4658      	mov	r0, fp
  4019ac:	9301      	str	r3, [sp, #4]
  4019ae:	f001 fbd7 	bl	403160 <memchr>
  4019b2:	9b01      	ldr	r3, [sp, #4]
  4019b4:	2800      	cmp	r0, #0
  4019b6:	f000 82e5 	beq.w	401f84 <_vfiprintf_r+0xc28>
  4019ba:	eba0 020b 	sub.w	r2, r0, fp
  4019be:	9205      	str	r2, [sp, #20]
  4019c0:	9607      	str	r6, [sp, #28]
  4019c2:	9302      	str	r3, [sp, #8]
  4019c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4019c8:	2400      	movs	r4, #0
  4019ca:	e619      	b.n	401600 <_vfiprintf_r+0x2a4>
  4019cc:	f898 2000 	ldrb.w	r2, [r8]
  4019d0:	2a2a      	cmp	r2, #42	; 0x2a
  4019d2:	f108 0701 	add.w	r7, r8, #1
  4019d6:	f000 82e9 	beq.w	401fac <_vfiprintf_r+0xc50>
  4019da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4019de:	2909      	cmp	r1, #9
  4019e0:	46b8      	mov	r8, r7
  4019e2:	f04f 0400 	mov.w	r4, #0
  4019e6:	f63f ad2d 	bhi.w	401444 <_vfiprintf_r+0xe8>
  4019ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4019ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4019f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4019f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4019fa:	2909      	cmp	r1, #9
  4019fc:	d9f5      	bls.n	4019ea <_vfiprintf_r+0x68e>
  4019fe:	e521      	b.n	401444 <_vfiprintf_r+0xe8>
  401a00:	f043 0320 	orr.w	r3, r3, #32
  401a04:	f898 2000 	ldrb.w	r2, [r8]
  401a08:	e51a      	b.n	401440 <_vfiprintf_r+0xe4>
  401a0a:	9608      	str	r6, [sp, #32]
  401a0c:	2800      	cmp	r0, #0
  401a0e:	f040 82db 	bne.w	401fc8 <_vfiprintf_r+0xc6c>
  401a12:	2a00      	cmp	r2, #0
  401a14:	f000 80e7 	beq.w	401be6 <_vfiprintf_r+0x88a>
  401a18:	2101      	movs	r1, #1
  401a1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401a1e:	f04f 0200 	mov.w	r2, #0
  401a22:	9101      	str	r1, [sp, #4]
  401a24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401a28:	9105      	str	r1, [sp, #20]
  401a2a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401a2e:	e77b      	b.n	401928 <_vfiprintf_r+0x5cc>
  401a30:	9a07      	ldr	r2, [sp, #28]
  401a32:	6813      	ldr	r3, [r2, #0]
  401a34:	3204      	adds	r2, #4
  401a36:	9207      	str	r2, [sp, #28]
  401a38:	9a03      	ldr	r2, [sp, #12]
  401a3a:	601a      	str	r2, [r3, #0]
  401a3c:	e4cb      	b.n	4013d6 <_vfiprintf_r+0x7a>
  401a3e:	aa0f      	add	r2, sp, #60	; 0x3c
  401a40:	9904      	ldr	r1, [sp, #16]
  401a42:	4620      	mov	r0, r4
  401a44:	f7ff fc4a 	bl	4012dc <__sprint_r.part.0>
  401a48:	2800      	cmp	r0, #0
  401a4a:	f040 8139 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401a4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a52:	f101 0c01 	add.w	ip, r1, #1
  401a56:	46ce      	mov	lr, r9
  401a58:	e5ff      	b.n	40165a <_vfiprintf_r+0x2fe>
  401a5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a5e:	1c48      	adds	r0, r1, #1
  401a60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401a64:	2d00      	cmp	r5, #0
  401a66:	f43f ae22 	beq.w	4016ae <_vfiprintf_r+0x352>
  401a6a:	3201      	adds	r2, #1
  401a6c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401a70:	2101      	movs	r1, #1
  401a72:	2807      	cmp	r0, #7
  401a74:	9211      	str	r2, [sp, #68]	; 0x44
  401a76:	9010      	str	r0, [sp, #64]	; 0x40
  401a78:	f8ca 5000 	str.w	r5, [sl]
  401a7c:	f8ca 1004 	str.w	r1, [sl, #4]
  401a80:	f340 8108 	ble.w	401c94 <_vfiprintf_r+0x938>
  401a84:	2a00      	cmp	r2, #0
  401a86:	f040 81bc 	bne.w	401e02 <_vfiprintf_r+0xaa6>
  401a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a8c:	2b00      	cmp	r3, #0
  401a8e:	f43f ae1f 	beq.w	4016d0 <_vfiprintf_r+0x374>
  401a92:	ab0e      	add	r3, sp, #56	; 0x38
  401a94:	2202      	movs	r2, #2
  401a96:	4608      	mov	r0, r1
  401a98:	931c      	str	r3, [sp, #112]	; 0x70
  401a9a:	921d      	str	r2, [sp, #116]	; 0x74
  401a9c:	46ca      	mov	sl, r9
  401a9e:	4601      	mov	r1, r0
  401aa0:	f10a 0a08 	add.w	sl, sl, #8
  401aa4:	3001      	adds	r0, #1
  401aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401aa8:	2b80      	cmp	r3, #128	; 0x80
  401aaa:	f43f ae19 	beq.w	4016e0 <_vfiprintf_r+0x384>
  401aae:	9b05      	ldr	r3, [sp, #20]
  401ab0:	1ae4      	subs	r4, r4, r3
  401ab2:	2c00      	cmp	r4, #0
  401ab4:	dd2e      	ble.n	401b14 <_vfiprintf_r+0x7b8>
  401ab6:	2c10      	cmp	r4, #16
  401ab8:	4db3      	ldr	r5, [pc, #716]	; (401d88 <_vfiprintf_r+0xa2c>)
  401aba:	dd1e      	ble.n	401afa <_vfiprintf_r+0x79e>
  401abc:	46d6      	mov	lr, sl
  401abe:	2610      	movs	r6, #16
  401ac0:	9f06      	ldr	r7, [sp, #24]
  401ac2:	f8dd a010 	ldr.w	sl, [sp, #16]
  401ac6:	e006      	b.n	401ad6 <_vfiprintf_r+0x77a>
  401ac8:	1c88      	adds	r0, r1, #2
  401aca:	f10e 0e08 	add.w	lr, lr, #8
  401ace:	4619      	mov	r1, r3
  401ad0:	3c10      	subs	r4, #16
  401ad2:	2c10      	cmp	r4, #16
  401ad4:	dd10      	ble.n	401af8 <_vfiprintf_r+0x79c>
  401ad6:	1c4b      	adds	r3, r1, #1
  401ad8:	3210      	adds	r2, #16
  401ada:	2b07      	cmp	r3, #7
  401adc:	9211      	str	r2, [sp, #68]	; 0x44
  401ade:	e88e 0060 	stmia.w	lr, {r5, r6}
  401ae2:	9310      	str	r3, [sp, #64]	; 0x40
  401ae4:	ddf0      	ble.n	401ac8 <_vfiprintf_r+0x76c>
  401ae6:	2a00      	cmp	r2, #0
  401ae8:	d165      	bne.n	401bb6 <_vfiprintf_r+0x85a>
  401aea:	3c10      	subs	r4, #16
  401aec:	2c10      	cmp	r4, #16
  401aee:	f04f 0001 	mov.w	r0, #1
  401af2:	4611      	mov	r1, r2
  401af4:	46ce      	mov	lr, r9
  401af6:	dcee      	bgt.n	401ad6 <_vfiprintf_r+0x77a>
  401af8:	46f2      	mov	sl, lr
  401afa:	4422      	add	r2, r4
  401afc:	2807      	cmp	r0, #7
  401afe:	9211      	str	r2, [sp, #68]	; 0x44
  401b00:	f8ca 5000 	str.w	r5, [sl]
  401b04:	f8ca 4004 	str.w	r4, [sl, #4]
  401b08:	9010      	str	r0, [sp, #64]	; 0x40
  401b0a:	f300 8085 	bgt.w	401c18 <_vfiprintf_r+0x8bc>
  401b0e:	f10a 0a08 	add.w	sl, sl, #8
  401b12:	3001      	adds	r0, #1
  401b14:	9905      	ldr	r1, [sp, #20]
  401b16:	f8ca b000 	str.w	fp, [sl]
  401b1a:	440a      	add	r2, r1
  401b1c:	2807      	cmp	r0, #7
  401b1e:	9211      	str	r2, [sp, #68]	; 0x44
  401b20:	f8ca 1004 	str.w	r1, [sl, #4]
  401b24:	9010      	str	r0, [sp, #64]	; 0x40
  401b26:	f340 8082 	ble.w	401c2e <_vfiprintf_r+0x8d2>
  401b2a:	2a00      	cmp	r2, #0
  401b2c:	f040 8118 	bne.w	401d60 <_vfiprintf_r+0xa04>
  401b30:	9b02      	ldr	r3, [sp, #8]
  401b32:	9210      	str	r2, [sp, #64]	; 0x40
  401b34:	0758      	lsls	r0, r3, #29
  401b36:	d535      	bpl.n	401ba4 <_vfiprintf_r+0x848>
  401b38:	9b08      	ldr	r3, [sp, #32]
  401b3a:	9901      	ldr	r1, [sp, #4]
  401b3c:	1a5c      	subs	r4, r3, r1
  401b3e:	2c00      	cmp	r4, #0
  401b40:	f340 80e7 	ble.w	401d12 <_vfiprintf_r+0x9b6>
  401b44:	46ca      	mov	sl, r9
  401b46:	2c10      	cmp	r4, #16
  401b48:	f340 8218 	ble.w	401f7c <_vfiprintf_r+0xc20>
  401b4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b4e:	4e8f      	ldr	r6, [pc, #572]	; (401d8c <_vfiprintf_r+0xa30>)
  401b50:	9f06      	ldr	r7, [sp, #24]
  401b52:	f8dd b010 	ldr.w	fp, [sp, #16]
  401b56:	2510      	movs	r5, #16
  401b58:	e006      	b.n	401b68 <_vfiprintf_r+0x80c>
  401b5a:	1c88      	adds	r0, r1, #2
  401b5c:	f10a 0a08 	add.w	sl, sl, #8
  401b60:	4619      	mov	r1, r3
  401b62:	3c10      	subs	r4, #16
  401b64:	2c10      	cmp	r4, #16
  401b66:	dd11      	ble.n	401b8c <_vfiprintf_r+0x830>
  401b68:	1c4b      	adds	r3, r1, #1
  401b6a:	3210      	adds	r2, #16
  401b6c:	2b07      	cmp	r3, #7
  401b6e:	9211      	str	r2, [sp, #68]	; 0x44
  401b70:	f8ca 6000 	str.w	r6, [sl]
  401b74:	f8ca 5004 	str.w	r5, [sl, #4]
  401b78:	9310      	str	r3, [sp, #64]	; 0x40
  401b7a:	ddee      	ble.n	401b5a <_vfiprintf_r+0x7fe>
  401b7c:	bb42      	cbnz	r2, 401bd0 <_vfiprintf_r+0x874>
  401b7e:	3c10      	subs	r4, #16
  401b80:	2c10      	cmp	r4, #16
  401b82:	f04f 0001 	mov.w	r0, #1
  401b86:	4611      	mov	r1, r2
  401b88:	46ca      	mov	sl, r9
  401b8a:	dced      	bgt.n	401b68 <_vfiprintf_r+0x80c>
  401b8c:	4422      	add	r2, r4
  401b8e:	2807      	cmp	r0, #7
  401b90:	9211      	str	r2, [sp, #68]	; 0x44
  401b92:	f8ca 6000 	str.w	r6, [sl]
  401b96:	f8ca 4004 	str.w	r4, [sl, #4]
  401b9a:	9010      	str	r0, [sp, #64]	; 0x40
  401b9c:	dd51      	ble.n	401c42 <_vfiprintf_r+0x8e6>
  401b9e:	2a00      	cmp	r2, #0
  401ba0:	f040 819b 	bne.w	401eda <_vfiprintf_r+0xb7e>
  401ba4:	9b03      	ldr	r3, [sp, #12]
  401ba6:	9a08      	ldr	r2, [sp, #32]
  401ba8:	9901      	ldr	r1, [sp, #4]
  401baa:	428a      	cmp	r2, r1
  401bac:	bfac      	ite	ge
  401bae:	189b      	addge	r3, r3, r2
  401bb0:	185b      	addlt	r3, r3, r1
  401bb2:	9303      	str	r3, [sp, #12]
  401bb4:	e04e      	b.n	401c54 <_vfiprintf_r+0x8f8>
  401bb6:	aa0f      	add	r2, sp, #60	; 0x3c
  401bb8:	4651      	mov	r1, sl
  401bba:	4638      	mov	r0, r7
  401bbc:	f7ff fb8e 	bl	4012dc <__sprint_r.part.0>
  401bc0:	2800      	cmp	r0, #0
  401bc2:	f040 813f 	bne.w	401e44 <_vfiprintf_r+0xae8>
  401bc6:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bca:	1c48      	adds	r0, r1, #1
  401bcc:	46ce      	mov	lr, r9
  401bce:	e77f      	b.n	401ad0 <_vfiprintf_r+0x774>
  401bd0:	aa0f      	add	r2, sp, #60	; 0x3c
  401bd2:	4659      	mov	r1, fp
  401bd4:	4638      	mov	r0, r7
  401bd6:	f7ff fb81 	bl	4012dc <__sprint_r.part.0>
  401bda:	b960      	cbnz	r0, 401bf6 <_vfiprintf_r+0x89a>
  401bdc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bde:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401be0:	1c48      	adds	r0, r1, #1
  401be2:	46ca      	mov	sl, r9
  401be4:	e7bd      	b.n	401b62 <_vfiprintf_r+0x806>
  401be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401be8:	f8dd b010 	ldr.w	fp, [sp, #16]
  401bec:	2b00      	cmp	r3, #0
  401bee:	f040 81d4 	bne.w	401f9a <_vfiprintf_r+0xc3e>
  401bf2:	2300      	movs	r3, #0
  401bf4:	9310      	str	r3, [sp, #64]	; 0x40
  401bf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bfa:	f013 0f01 	tst.w	r3, #1
  401bfe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401c02:	d102      	bne.n	401c0a <_vfiprintf_r+0x8ae>
  401c04:	059a      	lsls	r2, r3, #22
  401c06:	f140 80de 	bpl.w	401dc6 <_vfiprintf_r+0xa6a>
  401c0a:	065b      	lsls	r3, r3, #25
  401c0c:	f53f acb2 	bmi.w	401574 <_vfiprintf_r+0x218>
  401c10:	9803      	ldr	r0, [sp, #12]
  401c12:	b02d      	add	sp, #180	; 0xb4
  401c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c18:	2a00      	cmp	r2, #0
  401c1a:	f040 8106 	bne.w	401e2a <_vfiprintf_r+0xace>
  401c1e:	9a05      	ldr	r2, [sp, #20]
  401c20:	921d      	str	r2, [sp, #116]	; 0x74
  401c22:	2301      	movs	r3, #1
  401c24:	9211      	str	r2, [sp, #68]	; 0x44
  401c26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401c2a:	9310      	str	r3, [sp, #64]	; 0x40
  401c2c:	46ca      	mov	sl, r9
  401c2e:	f10a 0a08 	add.w	sl, sl, #8
  401c32:	9b02      	ldr	r3, [sp, #8]
  401c34:	0759      	lsls	r1, r3, #29
  401c36:	d504      	bpl.n	401c42 <_vfiprintf_r+0x8e6>
  401c38:	9b08      	ldr	r3, [sp, #32]
  401c3a:	9901      	ldr	r1, [sp, #4]
  401c3c:	1a5c      	subs	r4, r3, r1
  401c3e:	2c00      	cmp	r4, #0
  401c40:	dc81      	bgt.n	401b46 <_vfiprintf_r+0x7ea>
  401c42:	9b03      	ldr	r3, [sp, #12]
  401c44:	9908      	ldr	r1, [sp, #32]
  401c46:	9801      	ldr	r0, [sp, #4]
  401c48:	4281      	cmp	r1, r0
  401c4a:	bfac      	ite	ge
  401c4c:	185b      	addge	r3, r3, r1
  401c4e:	181b      	addlt	r3, r3, r0
  401c50:	9303      	str	r3, [sp, #12]
  401c52:	bb72      	cbnz	r2, 401cb2 <_vfiprintf_r+0x956>
  401c54:	2300      	movs	r3, #0
  401c56:	9310      	str	r3, [sp, #64]	; 0x40
  401c58:	46ca      	mov	sl, r9
  401c5a:	f7ff bbbc 	b.w	4013d6 <_vfiprintf_r+0x7a>
  401c5e:	aa0f      	add	r2, sp, #60	; 0x3c
  401c60:	9904      	ldr	r1, [sp, #16]
  401c62:	4620      	mov	r0, r4
  401c64:	f7ff fb3a 	bl	4012dc <__sprint_r.part.0>
  401c68:	bb50      	cbnz	r0, 401cc0 <_vfiprintf_r+0x964>
  401c6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c6e:	f101 0e01 	add.w	lr, r1, #1
  401c72:	46cc      	mov	ip, r9
  401c74:	e548      	b.n	401708 <_vfiprintf_r+0x3ac>
  401c76:	2a00      	cmp	r2, #0
  401c78:	f040 8140 	bne.w	401efc <_vfiprintf_r+0xba0>
  401c7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401c80:	2900      	cmp	r1, #0
  401c82:	f000 811b 	beq.w	401ebc <_vfiprintf_r+0xb60>
  401c86:	2201      	movs	r2, #1
  401c88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401c8c:	4610      	mov	r0, r2
  401c8e:	921d      	str	r2, [sp, #116]	; 0x74
  401c90:	911c      	str	r1, [sp, #112]	; 0x70
  401c92:	46ca      	mov	sl, r9
  401c94:	4601      	mov	r1, r0
  401c96:	f10a 0a08 	add.w	sl, sl, #8
  401c9a:	3001      	adds	r0, #1
  401c9c:	e507      	b.n	4016ae <_vfiprintf_r+0x352>
  401c9e:	9b02      	ldr	r3, [sp, #8]
  401ca0:	2a01      	cmp	r2, #1
  401ca2:	f000 8098 	beq.w	401dd6 <_vfiprintf_r+0xa7a>
  401ca6:	2a02      	cmp	r2, #2
  401ca8:	d10d      	bne.n	401cc6 <_vfiprintf_r+0x96a>
  401caa:	9302      	str	r3, [sp, #8]
  401cac:	2600      	movs	r6, #0
  401cae:	2700      	movs	r7, #0
  401cb0:	e5b0      	b.n	401814 <_vfiprintf_r+0x4b8>
  401cb2:	aa0f      	add	r2, sp, #60	; 0x3c
  401cb4:	9904      	ldr	r1, [sp, #16]
  401cb6:	9806      	ldr	r0, [sp, #24]
  401cb8:	f7ff fb10 	bl	4012dc <__sprint_r.part.0>
  401cbc:	2800      	cmp	r0, #0
  401cbe:	d0c9      	beq.n	401c54 <_vfiprintf_r+0x8f8>
  401cc0:	f8dd b010 	ldr.w	fp, [sp, #16]
  401cc4:	e797      	b.n	401bf6 <_vfiprintf_r+0x89a>
  401cc6:	9302      	str	r3, [sp, #8]
  401cc8:	2600      	movs	r6, #0
  401cca:	2700      	movs	r7, #0
  401ccc:	4649      	mov	r1, r9
  401cce:	e000      	b.n	401cd2 <_vfiprintf_r+0x976>
  401cd0:	4659      	mov	r1, fp
  401cd2:	08f2      	lsrs	r2, r6, #3
  401cd4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401cd8:	08f8      	lsrs	r0, r7, #3
  401cda:	f006 0307 	and.w	r3, r6, #7
  401cde:	4607      	mov	r7, r0
  401ce0:	4616      	mov	r6, r2
  401ce2:	3330      	adds	r3, #48	; 0x30
  401ce4:	ea56 0207 	orrs.w	r2, r6, r7
  401ce8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401cec:	f101 3bff 	add.w	fp, r1, #4294967295
  401cf0:	d1ee      	bne.n	401cd0 <_vfiprintf_r+0x974>
  401cf2:	9a02      	ldr	r2, [sp, #8]
  401cf4:	07d6      	lsls	r6, r2, #31
  401cf6:	f57f ad9d 	bpl.w	401834 <_vfiprintf_r+0x4d8>
  401cfa:	2b30      	cmp	r3, #48	; 0x30
  401cfc:	f43f ad9a 	beq.w	401834 <_vfiprintf_r+0x4d8>
  401d00:	3902      	subs	r1, #2
  401d02:	2330      	movs	r3, #48	; 0x30
  401d04:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401d08:	eba9 0301 	sub.w	r3, r9, r1
  401d0c:	9305      	str	r3, [sp, #20]
  401d0e:	468b      	mov	fp, r1
  401d10:	e476      	b.n	401600 <_vfiprintf_r+0x2a4>
  401d12:	9b03      	ldr	r3, [sp, #12]
  401d14:	9a08      	ldr	r2, [sp, #32]
  401d16:	428a      	cmp	r2, r1
  401d18:	bfac      	ite	ge
  401d1a:	189b      	addge	r3, r3, r2
  401d1c:	185b      	addlt	r3, r3, r1
  401d1e:	9303      	str	r3, [sp, #12]
  401d20:	e798      	b.n	401c54 <_vfiprintf_r+0x8f8>
  401d22:	2202      	movs	r2, #2
  401d24:	e44d      	b.n	4015c2 <_vfiprintf_r+0x266>
  401d26:	2f00      	cmp	r7, #0
  401d28:	bf08      	it	eq
  401d2a:	2e0a      	cmpeq	r6, #10
  401d2c:	d352      	bcc.n	401dd4 <_vfiprintf_r+0xa78>
  401d2e:	46cb      	mov	fp, r9
  401d30:	4630      	mov	r0, r6
  401d32:	4639      	mov	r1, r7
  401d34:	220a      	movs	r2, #10
  401d36:	2300      	movs	r3, #0
  401d38:	f001 ff36 	bl	403ba8 <__aeabi_uldivmod>
  401d3c:	3230      	adds	r2, #48	; 0x30
  401d3e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401d42:	4630      	mov	r0, r6
  401d44:	4639      	mov	r1, r7
  401d46:	2300      	movs	r3, #0
  401d48:	220a      	movs	r2, #10
  401d4a:	f001 ff2d 	bl	403ba8 <__aeabi_uldivmod>
  401d4e:	4606      	mov	r6, r0
  401d50:	460f      	mov	r7, r1
  401d52:	ea56 0307 	orrs.w	r3, r6, r7
  401d56:	d1eb      	bne.n	401d30 <_vfiprintf_r+0x9d4>
  401d58:	e56c      	b.n	401834 <_vfiprintf_r+0x4d8>
  401d5a:	9405      	str	r4, [sp, #20]
  401d5c:	46cb      	mov	fp, r9
  401d5e:	e44f      	b.n	401600 <_vfiprintf_r+0x2a4>
  401d60:	aa0f      	add	r2, sp, #60	; 0x3c
  401d62:	9904      	ldr	r1, [sp, #16]
  401d64:	9806      	ldr	r0, [sp, #24]
  401d66:	f7ff fab9 	bl	4012dc <__sprint_r.part.0>
  401d6a:	2800      	cmp	r0, #0
  401d6c:	d1a8      	bne.n	401cc0 <_vfiprintf_r+0x964>
  401d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d70:	46ca      	mov	sl, r9
  401d72:	e75e      	b.n	401c32 <_vfiprintf_r+0x8d6>
  401d74:	aa0f      	add	r2, sp, #60	; 0x3c
  401d76:	9904      	ldr	r1, [sp, #16]
  401d78:	9806      	ldr	r0, [sp, #24]
  401d7a:	f7ff faaf 	bl	4012dc <__sprint_r.part.0>
  401d7e:	2800      	cmp	r0, #0
  401d80:	d19e      	bne.n	401cc0 <_vfiprintf_r+0x964>
  401d82:	46ca      	mov	sl, r9
  401d84:	f7ff bbc0 	b.w	401508 <_vfiprintf_r+0x1ac>
  401d88:	00403f80 	.word	0x00403f80
  401d8c:	00403f70 	.word	0x00403f70
  401d90:	3104      	adds	r1, #4
  401d92:	6816      	ldr	r6, [r2, #0]
  401d94:	9107      	str	r1, [sp, #28]
  401d96:	2201      	movs	r2, #1
  401d98:	2700      	movs	r7, #0
  401d9a:	e412      	b.n	4015c2 <_vfiprintf_r+0x266>
  401d9c:	9807      	ldr	r0, [sp, #28]
  401d9e:	4601      	mov	r1, r0
  401da0:	3104      	adds	r1, #4
  401da2:	6806      	ldr	r6, [r0, #0]
  401da4:	9107      	str	r1, [sp, #28]
  401da6:	2700      	movs	r7, #0
  401da8:	e40b      	b.n	4015c2 <_vfiprintf_r+0x266>
  401daa:	680e      	ldr	r6, [r1, #0]
  401dac:	3104      	adds	r1, #4
  401dae:	9107      	str	r1, [sp, #28]
  401db0:	2700      	movs	r7, #0
  401db2:	e591      	b.n	4018d8 <_vfiprintf_r+0x57c>
  401db4:	9907      	ldr	r1, [sp, #28]
  401db6:	680e      	ldr	r6, [r1, #0]
  401db8:	460a      	mov	r2, r1
  401dba:	17f7      	asrs	r7, r6, #31
  401dbc:	3204      	adds	r2, #4
  401dbe:	9207      	str	r2, [sp, #28]
  401dc0:	4630      	mov	r0, r6
  401dc2:	4639      	mov	r1, r7
  401dc4:	e50f      	b.n	4017e6 <_vfiprintf_r+0x48a>
  401dc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401dca:	f000 fe7f 	bl	402acc <__retarget_lock_release_recursive>
  401dce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401dd2:	e71a      	b.n	401c0a <_vfiprintf_r+0x8ae>
  401dd4:	9b02      	ldr	r3, [sp, #8]
  401dd6:	9302      	str	r3, [sp, #8]
  401dd8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401ddc:	3630      	adds	r6, #48	; 0x30
  401dde:	2301      	movs	r3, #1
  401de0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401de4:	9305      	str	r3, [sp, #20]
  401de6:	e40b      	b.n	401600 <_vfiprintf_r+0x2a4>
  401de8:	aa0f      	add	r2, sp, #60	; 0x3c
  401dea:	9904      	ldr	r1, [sp, #16]
  401dec:	9806      	ldr	r0, [sp, #24]
  401dee:	f7ff fa75 	bl	4012dc <__sprint_r.part.0>
  401df2:	2800      	cmp	r0, #0
  401df4:	f47f af64 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401df8:	9910      	ldr	r1, [sp, #64]	; 0x40
  401dfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dfc:	1c48      	adds	r0, r1, #1
  401dfe:	46ca      	mov	sl, r9
  401e00:	e651      	b.n	401aa6 <_vfiprintf_r+0x74a>
  401e02:	aa0f      	add	r2, sp, #60	; 0x3c
  401e04:	9904      	ldr	r1, [sp, #16]
  401e06:	9806      	ldr	r0, [sp, #24]
  401e08:	f7ff fa68 	bl	4012dc <__sprint_r.part.0>
  401e0c:	2800      	cmp	r0, #0
  401e0e:	f47f af57 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401e12:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e16:	1c48      	adds	r0, r1, #1
  401e18:	46ca      	mov	sl, r9
  401e1a:	e448      	b.n	4016ae <_vfiprintf_r+0x352>
  401e1c:	2a00      	cmp	r2, #0
  401e1e:	f040 8091 	bne.w	401f44 <_vfiprintf_r+0xbe8>
  401e22:	2001      	movs	r0, #1
  401e24:	4611      	mov	r1, r2
  401e26:	46ca      	mov	sl, r9
  401e28:	e641      	b.n	401aae <_vfiprintf_r+0x752>
  401e2a:	aa0f      	add	r2, sp, #60	; 0x3c
  401e2c:	9904      	ldr	r1, [sp, #16]
  401e2e:	9806      	ldr	r0, [sp, #24]
  401e30:	f7ff fa54 	bl	4012dc <__sprint_r.part.0>
  401e34:	2800      	cmp	r0, #0
  401e36:	f47f af43 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401e3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  401e3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e3e:	3001      	adds	r0, #1
  401e40:	46ca      	mov	sl, r9
  401e42:	e667      	b.n	401b14 <_vfiprintf_r+0x7b8>
  401e44:	46d3      	mov	fp, sl
  401e46:	e6d6      	b.n	401bf6 <_vfiprintf_r+0x89a>
  401e48:	9e07      	ldr	r6, [sp, #28]
  401e4a:	3607      	adds	r6, #7
  401e4c:	f026 0207 	bic.w	r2, r6, #7
  401e50:	f102 0108 	add.w	r1, r2, #8
  401e54:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e58:	9107      	str	r1, [sp, #28]
  401e5a:	2201      	movs	r2, #1
  401e5c:	f7ff bbb1 	b.w	4015c2 <_vfiprintf_r+0x266>
  401e60:	9e07      	ldr	r6, [sp, #28]
  401e62:	3607      	adds	r6, #7
  401e64:	f026 0607 	bic.w	r6, r6, #7
  401e68:	e9d6 0100 	ldrd	r0, r1, [r6]
  401e6c:	f106 0208 	add.w	r2, r6, #8
  401e70:	9207      	str	r2, [sp, #28]
  401e72:	4606      	mov	r6, r0
  401e74:	460f      	mov	r7, r1
  401e76:	e4b6      	b.n	4017e6 <_vfiprintf_r+0x48a>
  401e78:	9e07      	ldr	r6, [sp, #28]
  401e7a:	3607      	adds	r6, #7
  401e7c:	f026 0207 	bic.w	r2, r6, #7
  401e80:	f102 0108 	add.w	r1, r2, #8
  401e84:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e88:	9107      	str	r1, [sp, #28]
  401e8a:	2200      	movs	r2, #0
  401e8c:	f7ff bb99 	b.w	4015c2 <_vfiprintf_r+0x266>
  401e90:	9e07      	ldr	r6, [sp, #28]
  401e92:	3607      	adds	r6, #7
  401e94:	f026 0107 	bic.w	r1, r6, #7
  401e98:	f101 0008 	add.w	r0, r1, #8
  401e9c:	9007      	str	r0, [sp, #28]
  401e9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  401ea2:	e519      	b.n	4018d8 <_vfiprintf_r+0x57c>
  401ea4:	46cb      	mov	fp, r9
  401ea6:	f7ff bbab 	b.w	401600 <_vfiprintf_r+0x2a4>
  401eaa:	252d      	movs	r5, #45	; 0x2d
  401eac:	4276      	negs	r6, r6
  401eae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401eb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401eb6:	2201      	movs	r2, #1
  401eb8:	f7ff bb88 	b.w	4015cc <_vfiprintf_r+0x270>
  401ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ebe:	b9b3      	cbnz	r3, 401eee <_vfiprintf_r+0xb92>
  401ec0:	4611      	mov	r1, r2
  401ec2:	2001      	movs	r0, #1
  401ec4:	46ca      	mov	sl, r9
  401ec6:	e5f2      	b.n	401aae <_vfiprintf_r+0x752>
  401ec8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401ecc:	f000 fdfe 	bl	402acc <__retarget_lock_release_recursive>
  401ed0:	f04f 33ff 	mov.w	r3, #4294967295
  401ed4:	9303      	str	r3, [sp, #12]
  401ed6:	f7ff bb50 	b.w	40157a <_vfiprintf_r+0x21e>
  401eda:	aa0f      	add	r2, sp, #60	; 0x3c
  401edc:	9904      	ldr	r1, [sp, #16]
  401ede:	9806      	ldr	r0, [sp, #24]
  401ee0:	f7ff f9fc 	bl	4012dc <__sprint_r.part.0>
  401ee4:	2800      	cmp	r0, #0
  401ee6:	f47f aeeb 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401eec:	e6a9      	b.n	401c42 <_vfiprintf_r+0x8e6>
  401eee:	ab0e      	add	r3, sp, #56	; 0x38
  401ef0:	2202      	movs	r2, #2
  401ef2:	931c      	str	r3, [sp, #112]	; 0x70
  401ef4:	921d      	str	r2, [sp, #116]	; 0x74
  401ef6:	2001      	movs	r0, #1
  401ef8:	46ca      	mov	sl, r9
  401efa:	e5d0      	b.n	401a9e <_vfiprintf_r+0x742>
  401efc:	aa0f      	add	r2, sp, #60	; 0x3c
  401efe:	9904      	ldr	r1, [sp, #16]
  401f00:	9806      	ldr	r0, [sp, #24]
  401f02:	f7ff f9eb 	bl	4012dc <__sprint_r.part.0>
  401f06:	2800      	cmp	r0, #0
  401f08:	f47f aeda 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f10:	1c48      	adds	r0, r1, #1
  401f12:	46ca      	mov	sl, r9
  401f14:	e5a4      	b.n	401a60 <_vfiprintf_r+0x704>
  401f16:	9a07      	ldr	r2, [sp, #28]
  401f18:	9903      	ldr	r1, [sp, #12]
  401f1a:	6813      	ldr	r3, [r2, #0]
  401f1c:	17cd      	asrs	r5, r1, #31
  401f1e:	4608      	mov	r0, r1
  401f20:	3204      	adds	r2, #4
  401f22:	4629      	mov	r1, r5
  401f24:	9207      	str	r2, [sp, #28]
  401f26:	e9c3 0100 	strd	r0, r1, [r3]
  401f2a:	f7ff ba54 	b.w	4013d6 <_vfiprintf_r+0x7a>
  401f2e:	4658      	mov	r0, fp
  401f30:	9607      	str	r6, [sp, #28]
  401f32:	9302      	str	r3, [sp, #8]
  401f34:	f7ff f964 	bl	401200 <strlen>
  401f38:	2400      	movs	r4, #0
  401f3a:	9005      	str	r0, [sp, #20]
  401f3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f40:	f7ff bb5e 	b.w	401600 <_vfiprintf_r+0x2a4>
  401f44:	aa0f      	add	r2, sp, #60	; 0x3c
  401f46:	9904      	ldr	r1, [sp, #16]
  401f48:	9806      	ldr	r0, [sp, #24]
  401f4a:	f7ff f9c7 	bl	4012dc <__sprint_r.part.0>
  401f4e:	2800      	cmp	r0, #0
  401f50:	f47f aeb6 	bne.w	401cc0 <_vfiprintf_r+0x964>
  401f54:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f58:	1c48      	adds	r0, r1, #1
  401f5a:	46ca      	mov	sl, r9
  401f5c:	e5a7      	b.n	401aae <_vfiprintf_r+0x752>
  401f5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f62:	4e20      	ldr	r6, [pc, #128]	; (401fe4 <_vfiprintf_r+0xc88>)
  401f64:	3101      	adds	r1, #1
  401f66:	f7ff bb90 	b.w	40168a <_vfiprintf_r+0x32e>
  401f6a:	2c06      	cmp	r4, #6
  401f6c:	bf28      	it	cs
  401f6e:	2406      	movcs	r4, #6
  401f70:	9405      	str	r4, [sp, #20]
  401f72:	9607      	str	r6, [sp, #28]
  401f74:	9401      	str	r4, [sp, #4]
  401f76:	f8df b070 	ldr.w	fp, [pc, #112]	; 401fe8 <_vfiprintf_r+0xc8c>
  401f7a:	e4d5      	b.n	401928 <_vfiprintf_r+0x5cc>
  401f7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  401f7e:	4e19      	ldr	r6, [pc, #100]	; (401fe4 <_vfiprintf_r+0xc88>)
  401f80:	3001      	adds	r0, #1
  401f82:	e603      	b.n	401b8c <_vfiprintf_r+0x830>
  401f84:	9405      	str	r4, [sp, #20]
  401f86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f8a:	9607      	str	r6, [sp, #28]
  401f8c:	9302      	str	r3, [sp, #8]
  401f8e:	4604      	mov	r4, r0
  401f90:	f7ff bb36 	b.w	401600 <_vfiprintf_r+0x2a4>
  401f94:	4686      	mov	lr, r0
  401f96:	f7ff bbce 	b.w	401736 <_vfiprintf_r+0x3da>
  401f9a:	9806      	ldr	r0, [sp, #24]
  401f9c:	aa0f      	add	r2, sp, #60	; 0x3c
  401f9e:	4659      	mov	r1, fp
  401fa0:	f7ff f99c 	bl	4012dc <__sprint_r.part.0>
  401fa4:	2800      	cmp	r0, #0
  401fa6:	f43f ae24 	beq.w	401bf2 <_vfiprintf_r+0x896>
  401faa:	e624      	b.n	401bf6 <_vfiprintf_r+0x89a>
  401fac:	9907      	ldr	r1, [sp, #28]
  401fae:	f898 2001 	ldrb.w	r2, [r8, #1]
  401fb2:	680c      	ldr	r4, [r1, #0]
  401fb4:	3104      	adds	r1, #4
  401fb6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401fba:	46b8      	mov	r8, r7
  401fbc:	9107      	str	r1, [sp, #28]
  401fbe:	f7ff ba3f 	b.w	401440 <_vfiprintf_r+0xe4>
  401fc2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401fc6:	e43c      	b.n	401842 <_vfiprintf_r+0x4e6>
  401fc8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401fcc:	e521      	b.n	401a12 <_vfiprintf_r+0x6b6>
  401fce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401fd2:	f7ff bbf4 	b.w	4017be <_vfiprintf_r+0x462>
  401fd6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401fda:	e491      	b.n	401900 <_vfiprintf_r+0x5a4>
  401fdc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401fe0:	e469      	b.n	4018b6 <_vfiprintf_r+0x55a>
  401fe2:	bf00      	nop
  401fe4:	00403f70 	.word	0x00403f70
  401fe8:	00403f68 	.word	0x00403f68

00401fec <__sbprintf>:
  401fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ff0:	460c      	mov	r4, r1
  401ff2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401ff6:	8989      	ldrh	r1, [r1, #12]
  401ff8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401ffa:	89e5      	ldrh	r5, [r4, #14]
  401ffc:	9619      	str	r6, [sp, #100]	; 0x64
  401ffe:	f021 0102 	bic.w	r1, r1, #2
  402002:	4606      	mov	r6, r0
  402004:	69e0      	ldr	r0, [r4, #28]
  402006:	f8ad 100c 	strh.w	r1, [sp, #12]
  40200a:	4617      	mov	r7, r2
  40200c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402010:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402012:	f8ad 500e 	strh.w	r5, [sp, #14]
  402016:	4698      	mov	r8, r3
  402018:	ad1a      	add	r5, sp, #104	; 0x68
  40201a:	2300      	movs	r3, #0
  40201c:	9007      	str	r0, [sp, #28]
  40201e:	a816      	add	r0, sp, #88	; 0x58
  402020:	9209      	str	r2, [sp, #36]	; 0x24
  402022:	9306      	str	r3, [sp, #24]
  402024:	9500      	str	r5, [sp, #0]
  402026:	9504      	str	r5, [sp, #16]
  402028:	9102      	str	r1, [sp, #8]
  40202a:	9105      	str	r1, [sp, #20]
  40202c:	f000 fd48 	bl	402ac0 <__retarget_lock_init_recursive>
  402030:	4643      	mov	r3, r8
  402032:	463a      	mov	r2, r7
  402034:	4669      	mov	r1, sp
  402036:	4630      	mov	r0, r6
  402038:	f7ff f990 	bl	40135c <_vfiprintf_r>
  40203c:	1e05      	subs	r5, r0, #0
  40203e:	db07      	blt.n	402050 <__sbprintf+0x64>
  402040:	4630      	mov	r0, r6
  402042:	4669      	mov	r1, sp
  402044:	f000 f928 	bl	402298 <_fflush_r>
  402048:	2800      	cmp	r0, #0
  40204a:	bf18      	it	ne
  40204c:	f04f 35ff 	movne.w	r5, #4294967295
  402050:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402054:	065b      	lsls	r3, r3, #25
  402056:	d503      	bpl.n	402060 <__sbprintf+0x74>
  402058:	89a3      	ldrh	r3, [r4, #12]
  40205a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40205e:	81a3      	strh	r3, [r4, #12]
  402060:	9816      	ldr	r0, [sp, #88]	; 0x58
  402062:	f000 fd2f 	bl	402ac4 <__retarget_lock_close_recursive>
  402066:	4628      	mov	r0, r5
  402068:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402070 <__swsetup_r>:
  402070:	b538      	push	{r3, r4, r5, lr}
  402072:	4b30      	ldr	r3, [pc, #192]	; (402134 <__swsetup_r+0xc4>)
  402074:	681b      	ldr	r3, [r3, #0]
  402076:	4605      	mov	r5, r0
  402078:	460c      	mov	r4, r1
  40207a:	b113      	cbz	r3, 402082 <__swsetup_r+0x12>
  40207c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40207e:	2a00      	cmp	r2, #0
  402080:	d038      	beq.n	4020f4 <__swsetup_r+0x84>
  402082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402086:	b293      	uxth	r3, r2
  402088:	0718      	lsls	r0, r3, #28
  40208a:	d50c      	bpl.n	4020a6 <__swsetup_r+0x36>
  40208c:	6920      	ldr	r0, [r4, #16]
  40208e:	b1a8      	cbz	r0, 4020bc <__swsetup_r+0x4c>
  402090:	f013 0201 	ands.w	r2, r3, #1
  402094:	d01e      	beq.n	4020d4 <__swsetup_r+0x64>
  402096:	6963      	ldr	r3, [r4, #20]
  402098:	2200      	movs	r2, #0
  40209a:	425b      	negs	r3, r3
  40209c:	61a3      	str	r3, [r4, #24]
  40209e:	60a2      	str	r2, [r4, #8]
  4020a0:	b1f0      	cbz	r0, 4020e0 <__swsetup_r+0x70>
  4020a2:	2000      	movs	r0, #0
  4020a4:	bd38      	pop	{r3, r4, r5, pc}
  4020a6:	06d9      	lsls	r1, r3, #27
  4020a8:	d53c      	bpl.n	402124 <__swsetup_r+0xb4>
  4020aa:	0758      	lsls	r0, r3, #29
  4020ac:	d426      	bmi.n	4020fc <__swsetup_r+0x8c>
  4020ae:	6920      	ldr	r0, [r4, #16]
  4020b0:	f042 0308 	orr.w	r3, r2, #8
  4020b4:	81a3      	strh	r3, [r4, #12]
  4020b6:	b29b      	uxth	r3, r3
  4020b8:	2800      	cmp	r0, #0
  4020ba:	d1e9      	bne.n	402090 <__swsetup_r+0x20>
  4020bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4020c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4020c4:	d0e4      	beq.n	402090 <__swsetup_r+0x20>
  4020c6:	4628      	mov	r0, r5
  4020c8:	4621      	mov	r1, r4
  4020ca:	f000 fd2f 	bl	402b2c <__smakebuf_r>
  4020ce:	89a3      	ldrh	r3, [r4, #12]
  4020d0:	6920      	ldr	r0, [r4, #16]
  4020d2:	e7dd      	b.n	402090 <__swsetup_r+0x20>
  4020d4:	0799      	lsls	r1, r3, #30
  4020d6:	bf58      	it	pl
  4020d8:	6962      	ldrpl	r2, [r4, #20]
  4020da:	60a2      	str	r2, [r4, #8]
  4020dc:	2800      	cmp	r0, #0
  4020de:	d1e0      	bne.n	4020a2 <__swsetup_r+0x32>
  4020e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4020e4:	061a      	lsls	r2, r3, #24
  4020e6:	d5dd      	bpl.n	4020a4 <__swsetup_r+0x34>
  4020e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020ec:	81a3      	strh	r3, [r4, #12]
  4020ee:	f04f 30ff 	mov.w	r0, #4294967295
  4020f2:	bd38      	pop	{r3, r4, r5, pc}
  4020f4:	4618      	mov	r0, r3
  4020f6:	f000 f927 	bl	402348 <__sinit>
  4020fa:	e7c2      	b.n	402082 <__swsetup_r+0x12>
  4020fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4020fe:	b151      	cbz	r1, 402116 <__swsetup_r+0xa6>
  402100:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402104:	4299      	cmp	r1, r3
  402106:	d004      	beq.n	402112 <__swsetup_r+0xa2>
  402108:	4628      	mov	r0, r5
  40210a:	f000 fa43 	bl	402594 <_free_r>
  40210e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402112:	2300      	movs	r3, #0
  402114:	6323      	str	r3, [r4, #48]	; 0x30
  402116:	2300      	movs	r3, #0
  402118:	6920      	ldr	r0, [r4, #16]
  40211a:	6063      	str	r3, [r4, #4]
  40211c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402120:	6020      	str	r0, [r4, #0]
  402122:	e7c5      	b.n	4020b0 <__swsetup_r+0x40>
  402124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402128:	2309      	movs	r3, #9
  40212a:	602b      	str	r3, [r5, #0]
  40212c:	f04f 30ff 	mov.w	r0, #4294967295
  402130:	81a2      	strh	r2, [r4, #12]
  402132:	bd38      	pop	{r3, r4, r5, pc}
  402134:	20400008 	.word	0x20400008

00402138 <register_fini>:
  402138:	4b02      	ldr	r3, [pc, #8]	; (402144 <register_fini+0xc>)
  40213a:	b113      	cbz	r3, 402142 <register_fini+0xa>
  40213c:	4802      	ldr	r0, [pc, #8]	; (402148 <register_fini+0x10>)
  40213e:	f000 b805 	b.w	40214c <atexit>
  402142:	4770      	bx	lr
  402144:	00000000 	.word	0x00000000
  402148:	004023b9 	.word	0x004023b9

0040214c <atexit>:
  40214c:	2300      	movs	r3, #0
  40214e:	4601      	mov	r1, r0
  402150:	461a      	mov	r2, r3
  402152:	4618      	mov	r0, r3
  402154:	f001 bc00 	b.w	403958 <__register_exitproc>

00402158 <__sflush_r>:
  402158:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40215c:	b29a      	uxth	r2, r3
  40215e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402162:	460d      	mov	r5, r1
  402164:	0711      	lsls	r1, r2, #28
  402166:	4680      	mov	r8, r0
  402168:	d43a      	bmi.n	4021e0 <__sflush_r+0x88>
  40216a:	686a      	ldr	r2, [r5, #4]
  40216c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402170:	2a00      	cmp	r2, #0
  402172:	81ab      	strh	r3, [r5, #12]
  402174:	dd6f      	ble.n	402256 <__sflush_r+0xfe>
  402176:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402178:	2c00      	cmp	r4, #0
  40217a:	d049      	beq.n	402210 <__sflush_r+0xb8>
  40217c:	2200      	movs	r2, #0
  40217e:	b29b      	uxth	r3, r3
  402180:	f8d8 6000 	ldr.w	r6, [r8]
  402184:	f8c8 2000 	str.w	r2, [r8]
  402188:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40218c:	d067      	beq.n	40225e <__sflush_r+0x106>
  40218e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402190:	075f      	lsls	r7, r3, #29
  402192:	d505      	bpl.n	4021a0 <__sflush_r+0x48>
  402194:	6869      	ldr	r1, [r5, #4]
  402196:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402198:	1a52      	subs	r2, r2, r1
  40219a:	b10b      	cbz	r3, 4021a0 <__sflush_r+0x48>
  40219c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40219e:	1ad2      	subs	r2, r2, r3
  4021a0:	2300      	movs	r3, #0
  4021a2:	69e9      	ldr	r1, [r5, #28]
  4021a4:	4640      	mov	r0, r8
  4021a6:	47a0      	blx	r4
  4021a8:	1c44      	adds	r4, r0, #1
  4021aa:	d03c      	beq.n	402226 <__sflush_r+0xce>
  4021ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4021b0:	692a      	ldr	r2, [r5, #16]
  4021b2:	602a      	str	r2, [r5, #0]
  4021b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4021b8:	2200      	movs	r2, #0
  4021ba:	81ab      	strh	r3, [r5, #12]
  4021bc:	04db      	lsls	r3, r3, #19
  4021be:	606a      	str	r2, [r5, #4]
  4021c0:	d447      	bmi.n	402252 <__sflush_r+0xfa>
  4021c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4021c4:	f8c8 6000 	str.w	r6, [r8]
  4021c8:	b311      	cbz	r1, 402210 <__sflush_r+0xb8>
  4021ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4021ce:	4299      	cmp	r1, r3
  4021d0:	d002      	beq.n	4021d8 <__sflush_r+0x80>
  4021d2:	4640      	mov	r0, r8
  4021d4:	f000 f9de 	bl	402594 <_free_r>
  4021d8:	2000      	movs	r0, #0
  4021da:	6328      	str	r0, [r5, #48]	; 0x30
  4021dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021e0:	692e      	ldr	r6, [r5, #16]
  4021e2:	b1ae      	cbz	r6, 402210 <__sflush_r+0xb8>
  4021e4:	682c      	ldr	r4, [r5, #0]
  4021e6:	602e      	str	r6, [r5, #0]
  4021e8:	0791      	lsls	r1, r2, #30
  4021ea:	bf0c      	ite	eq
  4021ec:	696b      	ldreq	r3, [r5, #20]
  4021ee:	2300      	movne	r3, #0
  4021f0:	1ba4      	subs	r4, r4, r6
  4021f2:	60ab      	str	r3, [r5, #8]
  4021f4:	e00a      	b.n	40220c <__sflush_r+0xb4>
  4021f6:	4623      	mov	r3, r4
  4021f8:	4632      	mov	r2, r6
  4021fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4021fc:	69e9      	ldr	r1, [r5, #28]
  4021fe:	4640      	mov	r0, r8
  402200:	47b8      	blx	r7
  402202:	2800      	cmp	r0, #0
  402204:	eba4 0400 	sub.w	r4, r4, r0
  402208:	4406      	add	r6, r0
  40220a:	dd04      	ble.n	402216 <__sflush_r+0xbe>
  40220c:	2c00      	cmp	r4, #0
  40220e:	dcf2      	bgt.n	4021f6 <__sflush_r+0x9e>
  402210:	2000      	movs	r0, #0
  402212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402216:	89ab      	ldrh	r3, [r5, #12]
  402218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40221c:	81ab      	strh	r3, [r5, #12]
  40221e:	f04f 30ff 	mov.w	r0, #4294967295
  402222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402226:	f8d8 4000 	ldr.w	r4, [r8]
  40222a:	2c1d      	cmp	r4, #29
  40222c:	d8f3      	bhi.n	402216 <__sflush_r+0xbe>
  40222e:	4b19      	ldr	r3, [pc, #100]	; (402294 <__sflush_r+0x13c>)
  402230:	40e3      	lsrs	r3, r4
  402232:	43db      	mvns	r3, r3
  402234:	f013 0301 	ands.w	r3, r3, #1
  402238:	d1ed      	bne.n	402216 <__sflush_r+0xbe>
  40223a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40223e:	606b      	str	r3, [r5, #4]
  402240:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402244:	6929      	ldr	r1, [r5, #16]
  402246:	81ab      	strh	r3, [r5, #12]
  402248:	04da      	lsls	r2, r3, #19
  40224a:	6029      	str	r1, [r5, #0]
  40224c:	d5b9      	bpl.n	4021c2 <__sflush_r+0x6a>
  40224e:	2c00      	cmp	r4, #0
  402250:	d1b7      	bne.n	4021c2 <__sflush_r+0x6a>
  402252:	6528      	str	r0, [r5, #80]	; 0x50
  402254:	e7b5      	b.n	4021c2 <__sflush_r+0x6a>
  402256:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402258:	2a00      	cmp	r2, #0
  40225a:	dc8c      	bgt.n	402176 <__sflush_r+0x1e>
  40225c:	e7d8      	b.n	402210 <__sflush_r+0xb8>
  40225e:	2301      	movs	r3, #1
  402260:	69e9      	ldr	r1, [r5, #28]
  402262:	4640      	mov	r0, r8
  402264:	47a0      	blx	r4
  402266:	1c43      	adds	r3, r0, #1
  402268:	4602      	mov	r2, r0
  40226a:	d002      	beq.n	402272 <__sflush_r+0x11a>
  40226c:	89ab      	ldrh	r3, [r5, #12]
  40226e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402270:	e78e      	b.n	402190 <__sflush_r+0x38>
  402272:	f8d8 3000 	ldr.w	r3, [r8]
  402276:	2b00      	cmp	r3, #0
  402278:	d0f8      	beq.n	40226c <__sflush_r+0x114>
  40227a:	2b1d      	cmp	r3, #29
  40227c:	d001      	beq.n	402282 <__sflush_r+0x12a>
  40227e:	2b16      	cmp	r3, #22
  402280:	d102      	bne.n	402288 <__sflush_r+0x130>
  402282:	f8c8 6000 	str.w	r6, [r8]
  402286:	e7c3      	b.n	402210 <__sflush_r+0xb8>
  402288:	89ab      	ldrh	r3, [r5, #12]
  40228a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40228e:	81ab      	strh	r3, [r5, #12]
  402290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402294:	20400001 	.word	0x20400001

00402298 <_fflush_r>:
  402298:	b538      	push	{r3, r4, r5, lr}
  40229a:	460d      	mov	r5, r1
  40229c:	4604      	mov	r4, r0
  40229e:	b108      	cbz	r0, 4022a4 <_fflush_r+0xc>
  4022a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4022a2:	b1bb      	cbz	r3, 4022d4 <_fflush_r+0x3c>
  4022a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4022a8:	b188      	cbz	r0, 4022ce <_fflush_r+0x36>
  4022aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4022ac:	07db      	lsls	r3, r3, #31
  4022ae:	d401      	bmi.n	4022b4 <_fflush_r+0x1c>
  4022b0:	0581      	lsls	r1, r0, #22
  4022b2:	d517      	bpl.n	4022e4 <_fflush_r+0x4c>
  4022b4:	4620      	mov	r0, r4
  4022b6:	4629      	mov	r1, r5
  4022b8:	f7ff ff4e 	bl	402158 <__sflush_r>
  4022bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4022be:	07da      	lsls	r2, r3, #31
  4022c0:	4604      	mov	r4, r0
  4022c2:	d402      	bmi.n	4022ca <_fflush_r+0x32>
  4022c4:	89ab      	ldrh	r3, [r5, #12]
  4022c6:	059b      	lsls	r3, r3, #22
  4022c8:	d507      	bpl.n	4022da <_fflush_r+0x42>
  4022ca:	4620      	mov	r0, r4
  4022cc:	bd38      	pop	{r3, r4, r5, pc}
  4022ce:	4604      	mov	r4, r0
  4022d0:	4620      	mov	r0, r4
  4022d2:	bd38      	pop	{r3, r4, r5, pc}
  4022d4:	f000 f838 	bl	402348 <__sinit>
  4022d8:	e7e4      	b.n	4022a4 <_fflush_r+0xc>
  4022da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4022dc:	f000 fbf6 	bl	402acc <__retarget_lock_release_recursive>
  4022e0:	4620      	mov	r0, r4
  4022e2:	bd38      	pop	{r3, r4, r5, pc}
  4022e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4022e6:	f000 fbef 	bl	402ac8 <__retarget_lock_acquire_recursive>
  4022ea:	e7e3      	b.n	4022b4 <_fflush_r+0x1c>

004022ec <_cleanup_r>:
  4022ec:	4901      	ldr	r1, [pc, #4]	; (4022f4 <_cleanup_r+0x8>)
  4022ee:	f000 bbaf 	b.w	402a50 <_fwalk_reent>
  4022f2:	bf00      	nop
  4022f4:	00403a41 	.word	0x00403a41

004022f8 <std.isra.0>:
  4022f8:	b510      	push	{r4, lr}
  4022fa:	2300      	movs	r3, #0
  4022fc:	4604      	mov	r4, r0
  4022fe:	8181      	strh	r1, [r0, #12]
  402300:	81c2      	strh	r2, [r0, #14]
  402302:	6003      	str	r3, [r0, #0]
  402304:	6043      	str	r3, [r0, #4]
  402306:	6083      	str	r3, [r0, #8]
  402308:	6643      	str	r3, [r0, #100]	; 0x64
  40230a:	6103      	str	r3, [r0, #16]
  40230c:	6143      	str	r3, [r0, #20]
  40230e:	6183      	str	r3, [r0, #24]
  402310:	4619      	mov	r1, r3
  402312:	2208      	movs	r2, #8
  402314:	305c      	adds	r0, #92	; 0x5c
  402316:	f7fe fdff 	bl	400f18 <memset>
  40231a:	4807      	ldr	r0, [pc, #28]	; (402338 <std.isra.0+0x40>)
  40231c:	4907      	ldr	r1, [pc, #28]	; (40233c <std.isra.0+0x44>)
  40231e:	4a08      	ldr	r2, [pc, #32]	; (402340 <std.isra.0+0x48>)
  402320:	4b08      	ldr	r3, [pc, #32]	; (402344 <std.isra.0+0x4c>)
  402322:	6220      	str	r0, [r4, #32]
  402324:	61e4      	str	r4, [r4, #28]
  402326:	6261      	str	r1, [r4, #36]	; 0x24
  402328:	62a2      	str	r2, [r4, #40]	; 0x28
  40232a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40232c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  402330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402334:	f000 bbc4 	b.w	402ac0 <__retarget_lock_init_recursive>
  402338:	00403785 	.word	0x00403785
  40233c:	004037a9 	.word	0x004037a9
  402340:	004037e5 	.word	0x004037e5
  402344:	00403805 	.word	0x00403805

00402348 <__sinit>:
  402348:	b510      	push	{r4, lr}
  40234a:	4604      	mov	r4, r0
  40234c:	4812      	ldr	r0, [pc, #72]	; (402398 <__sinit+0x50>)
  40234e:	f000 fbbb 	bl	402ac8 <__retarget_lock_acquire_recursive>
  402352:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402354:	b9d2      	cbnz	r2, 40238c <__sinit+0x44>
  402356:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40235a:	4810      	ldr	r0, [pc, #64]	; (40239c <__sinit+0x54>)
  40235c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402360:	2103      	movs	r1, #3
  402362:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402366:	63e0      	str	r0, [r4, #60]	; 0x3c
  402368:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40236c:	6860      	ldr	r0, [r4, #4]
  40236e:	2104      	movs	r1, #4
  402370:	f7ff ffc2 	bl	4022f8 <std.isra.0>
  402374:	2201      	movs	r2, #1
  402376:	2109      	movs	r1, #9
  402378:	68a0      	ldr	r0, [r4, #8]
  40237a:	f7ff ffbd 	bl	4022f8 <std.isra.0>
  40237e:	2202      	movs	r2, #2
  402380:	2112      	movs	r1, #18
  402382:	68e0      	ldr	r0, [r4, #12]
  402384:	f7ff ffb8 	bl	4022f8 <std.isra.0>
  402388:	2301      	movs	r3, #1
  40238a:	63a3      	str	r3, [r4, #56]	; 0x38
  40238c:	4802      	ldr	r0, [pc, #8]	; (402398 <__sinit+0x50>)
  40238e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402392:	f000 bb9b 	b.w	402acc <__retarget_lock_release_recursive>
  402396:	bf00      	nop
  402398:	20400aa0 	.word	0x20400aa0
  40239c:	004022ed 	.word	0x004022ed

004023a0 <__sfp_lock_acquire>:
  4023a0:	4801      	ldr	r0, [pc, #4]	; (4023a8 <__sfp_lock_acquire+0x8>)
  4023a2:	f000 bb91 	b.w	402ac8 <__retarget_lock_acquire_recursive>
  4023a6:	bf00      	nop
  4023a8:	20400ab4 	.word	0x20400ab4

004023ac <__sfp_lock_release>:
  4023ac:	4801      	ldr	r0, [pc, #4]	; (4023b4 <__sfp_lock_release+0x8>)
  4023ae:	f000 bb8d 	b.w	402acc <__retarget_lock_release_recursive>
  4023b2:	bf00      	nop
  4023b4:	20400ab4 	.word	0x20400ab4

004023b8 <__libc_fini_array>:
  4023b8:	b538      	push	{r3, r4, r5, lr}
  4023ba:	4c0a      	ldr	r4, [pc, #40]	; (4023e4 <__libc_fini_array+0x2c>)
  4023bc:	4d0a      	ldr	r5, [pc, #40]	; (4023e8 <__libc_fini_array+0x30>)
  4023be:	1b64      	subs	r4, r4, r5
  4023c0:	10a4      	asrs	r4, r4, #2
  4023c2:	d00a      	beq.n	4023da <__libc_fini_array+0x22>
  4023c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4023c8:	3b01      	subs	r3, #1
  4023ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4023ce:	3c01      	subs	r4, #1
  4023d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4023d4:	4798      	blx	r3
  4023d6:	2c00      	cmp	r4, #0
  4023d8:	d1f9      	bne.n	4023ce <__libc_fini_array+0x16>
  4023da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4023de:	f001 be6b 	b.w	4040b8 <_fini>
  4023e2:	bf00      	nop
  4023e4:	004040c8 	.word	0x004040c8
  4023e8:	004040c4 	.word	0x004040c4

004023ec <__fputwc>:
  4023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023f0:	b082      	sub	sp, #8
  4023f2:	4680      	mov	r8, r0
  4023f4:	4689      	mov	r9, r1
  4023f6:	4614      	mov	r4, r2
  4023f8:	f000 fb54 	bl	402aa4 <__locale_mb_cur_max>
  4023fc:	2801      	cmp	r0, #1
  4023fe:	d036      	beq.n	40246e <__fputwc+0x82>
  402400:	464a      	mov	r2, r9
  402402:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402406:	a901      	add	r1, sp, #4
  402408:	4640      	mov	r0, r8
  40240a:	f001 fa57 	bl	4038bc <_wcrtomb_r>
  40240e:	1c42      	adds	r2, r0, #1
  402410:	4606      	mov	r6, r0
  402412:	d025      	beq.n	402460 <__fputwc+0x74>
  402414:	b3a8      	cbz	r0, 402482 <__fputwc+0x96>
  402416:	f89d e004 	ldrb.w	lr, [sp, #4]
  40241a:	2500      	movs	r5, #0
  40241c:	f10d 0a04 	add.w	sl, sp, #4
  402420:	e009      	b.n	402436 <__fputwc+0x4a>
  402422:	6823      	ldr	r3, [r4, #0]
  402424:	1c5a      	adds	r2, r3, #1
  402426:	6022      	str	r2, [r4, #0]
  402428:	f883 e000 	strb.w	lr, [r3]
  40242c:	3501      	adds	r5, #1
  40242e:	42b5      	cmp	r5, r6
  402430:	d227      	bcs.n	402482 <__fputwc+0x96>
  402432:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402436:	68a3      	ldr	r3, [r4, #8]
  402438:	3b01      	subs	r3, #1
  40243a:	2b00      	cmp	r3, #0
  40243c:	60a3      	str	r3, [r4, #8]
  40243e:	daf0      	bge.n	402422 <__fputwc+0x36>
  402440:	69a7      	ldr	r7, [r4, #24]
  402442:	42bb      	cmp	r3, r7
  402444:	4671      	mov	r1, lr
  402446:	4622      	mov	r2, r4
  402448:	4640      	mov	r0, r8
  40244a:	db02      	blt.n	402452 <__fputwc+0x66>
  40244c:	f1be 0f0a 	cmp.w	lr, #10
  402450:	d1e7      	bne.n	402422 <__fputwc+0x36>
  402452:	f001 f9db 	bl	40380c <__swbuf_r>
  402456:	1c43      	adds	r3, r0, #1
  402458:	d1e8      	bne.n	40242c <__fputwc+0x40>
  40245a:	b002      	add	sp, #8
  40245c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402460:	89a3      	ldrh	r3, [r4, #12]
  402462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402466:	81a3      	strh	r3, [r4, #12]
  402468:	b002      	add	sp, #8
  40246a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40246e:	f109 33ff 	add.w	r3, r9, #4294967295
  402472:	2bfe      	cmp	r3, #254	; 0xfe
  402474:	d8c4      	bhi.n	402400 <__fputwc+0x14>
  402476:	fa5f fe89 	uxtb.w	lr, r9
  40247a:	4606      	mov	r6, r0
  40247c:	f88d e004 	strb.w	lr, [sp, #4]
  402480:	e7cb      	b.n	40241a <__fputwc+0x2e>
  402482:	4648      	mov	r0, r9
  402484:	b002      	add	sp, #8
  402486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40248a:	bf00      	nop

0040248c <_fputwc_r>:
  40248c:	b530      	push	{r4, r5, lr}
  40248e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402490:	f013 0f01 	tst.w	r3, #1
  402494:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402498:	4614      	mov	r4, r2
  40249a:	b083      	sub	sp, #12
  40249c:	4605      	mov	r5, r0
  40249e:	b29a      	uxth	r2, r3
  4024a0:	d101      	bne.n	4024a6 <_fputwc_r+0x1a>
  4024a2:	0590      	lsls	r0, r2, #22
  4024a4:	d51c      	bpl.n	4024e0 <_fputwc_r+0x54>
  4024a6:	0490      	lsls	r0, r2, #18
  4024a8:	d406      	bmi.n	4024b8 <_fputwc_r+0x2c>
  4024aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4024ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4024b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4024b4:	81a3      	strh	r3, [r4, #12]
  4024b6:	6662      	str	r2, [r4, #100]	; 0x64
  4024b8:	4628      	mov	r0, r5
  4024ba:	4622      	mov	r2, r4
  4024bc:	f7ff ff96 	bl	4023ec <__fputwc>
  4024c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4024c2:	07da      	lsls	r2, r3, #31
  4024c4:	4605      	mov	r5, r0
  4024c6:	d402      	bmi.n	4024ce <_fputwc_r+0x42>
  4024c8:	89a3      	ldrh	r3, [r4, #12]
  4024ca:	059b      	lsls	r3, r3, #22
  4024cc:	d502      	bpl.n	4024d4 <_fputwc_r+0x48>
  4024ce:	4628      	mov	r0, r5
  4024d0:	b003      	add	sp, #12
  4024d2:	bd30      	pop	{r4, r5, pc}
  4024d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4024d6:	f000 faf9 	bl	402acc <__retarget_lock_release_recursive>
  4024da:	4628      	mov	r0, r5
  4024dc:	b003      	add	sp, #12
  4024de:	bd30      	pop	{r4, r5, pc}
  4024e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4024e2:	9101      	str	r1, [sp, #4]
  4024e4:	f000 faf0 	bl	402ac8 <__retarget_lock_acquire_recursive>
  4024e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024ec:	9901      	ldr	r1, [sp, #4]
  4024ee:	b29a      	uxth	r2, r3
  4024f0:	e7d9      	b.n	4024a6 <_fputwc_r+0x1a>
  4024f2:	bf00      	nop

004024f4 <_malloc_trim_r>:
  4024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024f6:	4f24      	ldr	r7, [pc, #144]	; (402588 <_malloc_trim_r+0x94>)
  4024f8:	460c      	mov	r4, r1
  4024fa:	4606      	mov	r6, r0
  4024fc:	f000 ff7e 	bl	4033fc <__malloc_lock>
  402500:	68bb      	ldr	r3, [r7, #8]
  402502:	685d      	ldr	r5, [r3, #4]
  402504:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402508:	310f      	adds	r1, #15
  40250a:	f025 0503 	bic.w	r5, r5, #3
  40250e:	4429      	add	r1, r5
  402510:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402514:	f021 010f 	bic.w	r1, r1, #15
  402518:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40251c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402520:	db07      	blt.n	402532 <_malloc_trim_r+0x3e>
  402522:	2100      	movs	r1, #0
  402524:	4630      	mov	r0, r6
  402526:	f001 f91b 	bl	403760 <_sbrk_r>
  40252a:	68bb      	ldr	r3, [r7, #8]
  40252c:	442b      	add	r3, r5
  40252e:	4298      	cmp	r0, r3
  402530:	d004      	beq.n	40253c <_malloc_trim_r+0x48>
  402532:	4630      	mov	r0, r6
  402534:	f000 ff68 	bl	403408 <__malloc_unlock>
  402538:	2000      	movs	r0, #0
  40253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40253c:	4261      	negs	r1, r4
  40253e:	4630      	mov	r0, r6
  402540:	f001 f90e 	bl	403760 <_sbrk_r>
  402544:	3001      	adds	r0, #1
  402546:	d00d      	beq.n	402564 <_malloc_trim_r+0x70>
  402548:	4b10      	ldr	r3, [pc, #64]	; (40258c <_malloc_trim_r+0x98>)
  40254a:	68ba      	ldr	r2, [r7, #8]
  40254c:	6819      	ldr	r1, [r3, #0]
  40254e:	1b2d      	subs	r5, r5, r4
  402550:	f045 0501 	orr.w	r5, r5, #1
  402554:	4630      	mov	r0, r6
  402556:	1b09      	subs	r1, r1, r4
  402558:	6055      	str	r5, [r2, #4]
  40255a:	6019      	str	r1, [r3, #0]
  40255c:	f000 ff54 	bl	403408 <__malloc_unlock>
  402560:	2001      	movs	r0, #1
  402562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402564:	2100      	movs	r1, #0
  402566:	4630      	mov	r0, r6
  402568:	f001 f8fa 	bl	403760 <_sbrk_r>
  40256c:	68ba      	ldr	r2, [r7, #8]
  40256e:	1a83      	subs	r3, r0, r2
  402570:	2b0f      	cmp	r3, #15
  402572:	ddde      	ble.n	402532 <_malloc_trim_r+0x3e>
  402574:	4c06      	ldr	r4, [pc, #24]	; (402590 <_malloc_trim_r+0x9c>)
  402576:	4905      	ldr	r1, [pc, #20]	; (40258c <_malloc_trim_r+0x98>)
  402578:	6824      	ldr	r4, [r4, #0]
  40257a:	f043 0301 	orr.w	r3, r3, #1
  40257e:	1b00      	subs	r0, r0, r4
  402580:	6053      	str	r3, [r2, #4]
  402582:	6008      	str	r0, [r1, #0]
  402584:	e7d5      	b.n	402532 <_malloc_trim_r+0x3e>
  402586:	bf00      	nop
  402588:	204005a8 	.word	0x204005a8
  40258c:	20400a50 	.word	0x20400a50
  402590:	204009b0 	.word	0x204009b0

00402594 <_free_r>:
  402594:	2900      	cmp	r1, #0
  402596:	d044      	beq.n	402622 <_free_r+0x8e>
  402598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40259c:	460d      	mov	r5, r1
  40259e:	4680      	mov	r8, r0
  4025a0:	f000 ff2c 	bl	4033fc <__malloc_lock>
  4025a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4025a8:	4969      	ldr	r1, [pc, #420]	; (402750 <_free_r+0x1bc>)
  4025aa:	f027 0301 	bic.w	r3, r7, #1
  4025ae:	f1a5 0408 	sub.w	r4, r5, #8
  4025b2:	18e2      	adds	r2, r4, r3
  4025b4:	688e      	ldr	r6, [r1, #8]
  4025b6:	6850      	ldr	r0, [r2, #4]
  4025b8:	42b2      	cmp	r2, r6
  4025ba:	f020 0003 	bic.w	r0, r0, #3
  4025be:	d05e      	beq.n	40267e <_free_r+0xea>
  4025c0:	07fe      	lsls	r6, r7, #31
  4025c2:	6050      	str	r0, [r2, #4]
  4025c4:	d40b      	bmi.n	4025de <_free_r+0x4a>
  4025c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4025ca:	1be4      	subs	r4, r4, r7
  4025cc:	f101 0e08 	add.w	lr, r1, #8
  4025d0:	68a5      	ldr	r5, [r4, #8]
  4025d2:	4575      	cmp	r5, lr
  4025d4:	443b      	add	r3, r7
  4025d6:	d06d      	beq.n	4026b4 <_free_r+0x120>
  4025d8:	68e7      	ldr	r7, [r4, #12]
  4025da:	60ef      	str	r7, [r5, #12]
  4025dc:	60bd      	str	r5, [r7, #8]
  4025de:	1815      	adds	r5, r2, r0
  4025e0:	686d      	ldr	r5, [r5, #4]
  4025e2:	07ed      	lsls	r5, r5, #31
  4025e4:	d53e      	bpl.n	402664 <_free_r+0xd0>
  4025e6:	f043 0201 	orr.w	r2, r3, #1
  4025ea:	6062      	str	r2, [r4, #4]
  4025ec:	50e3      	str	r3, [r4, r3]
  4025ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4025f2:	d217      	bcs.n	402624 <_free_r+0x90>
  4025f4:	08db      	lsrs	r3, r3, #3
  4025f6:	1c58      	adds	r0, r3, #1
  4025f8:	109a      	asrs	r2, r3, #2
  4025fa:	684d      	ldr	r5, [r1, #4]
  4025fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402600:	60a7      	str	r7, [r4, #8]
  402602:	2301      	movs	r3, #1
  402604:	4093      	lsls	r3, r2
  402606:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40260a:	432b      	orrs	r3, r5
  40260c:	3a08      	subs	r2, #8
  40260e:	60e2      	str	r2, [r4, #12]
  402610:	604b      	str	r3, [r1, #4]
  402612:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402616:	60fc      	str	r4, [r7, #12]
  402618:	4640      	mov	r0, r8
  40261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40261e:	f000 bef3 	b.w	403408 <__malloc_unlock>
  402622:	4770      	bx	lr
  402624:	0a5a      	lsrs	r2, r3, #9
  402626:	2a04      	cmp	r2, #4
  402628:	d852      	bhi.n	4026d0 <_free_r+0x13c>
  40262a:	099a      	lsrs	r2, r3, #6
  40262c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402630:	00ff      	lsls	r7, r7, #3
  402632:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402636:	19c8      	adds	r0, r1, r7
  402638:	59ca      	ldr	r2, [r1, r7]
  40263a:	3808      	subs	r0, #8
  40263c:	4290      	cmp	r0, r2
  40263e:	d04f      	beq.n	4026e0 <_free_r+0x14c>
  402640:	6851      	ldr	r1, [r2, #4]
  402642:	f021 0103 	bic.w	r1, r1, #3
  402646:	428b      	cmp	r3, r1
  402648:	d232      	bcs.n	4026b0 <_free_r+0x11c>
  40264a:	6892      	ldr	r2, [r2, #8]
  40264c:	4290      	cmp	r0, r2
  40264e:	d1f7      	bne.n	402640 <_free_r+0xac>
  402650:	68c3      	ldr	r3, [r0, #12]
  402652:	60a0      	str	r0, [r4, #8]
  402654:	60e3      	str	r3, [r4, #12]
  402656:	609c      	str	r4, [r3, #8]
  402658:	60c4      	str	r4, [r0, #12]
  40265a:	4640      	mov	r0, r8
  40265c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402660:	f000 bed2 	b.w	403408 <__malloc_unlock>
  402664:	6895      	ldr	r5, [r2, #8]
  402666:	4f3b      	ldr	r7, [pc, #236]	; (402754 <_free_r+0x1c0>)
  402668:	42bd      	cmp	r5, r7
  40266a:	4403      	add	r3, r0
  40266c:	d040      	beq.n	4026f0 <_free_r+0x15c>
  40266e:	68d0      	ldr	r0, [r2, #12]
  402670:	60e8      	str	r0, [r5, #12]
  402672:	f043 0201 	orr.w	r2, r3, #1
  402676:	6085      	str	r5, [r0, #8]
  402678:	6062      	str	r2, [r4, #4]
  40267a:	50e3      	str	r3, [r4, r3]
  40267c:	e7b7      	b.n	4025ee <_free_r+0x5a>
  40267e:	07ff      	lsls	r7, r7, #31
  402680:	4403      	add	r3, r0
  402682:	d407      	bmi.n	402694 <_free_r+0x100>
  402684:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402688:	1aa4      	subs	r4, r4, r2
  40268a:	4413      	add	r3, r2
  40268c:	68a0      	ldr	r0, [r4, #8]
  40268e:	68e2      	ldr	r2, [r4, #12]
  402690:	60c2      	str	r2, [r0, #12]
  402692:	6090      	str	r0, [r2, #8]
  402694:	4a30      	ldr	r2, [pc, #192]	; (402758 <_free_r+0x1c4>)
  402696:	6812      	ldr	r2, [r2, #0]
  402698:	f043 0001 	orr.w	r0, r3, #1
  40269c:	4293      	cmp	r3, r2
  40269e:	6060      	str	r0, [r4, #4]
  4026a0:	608c      	str	r4, [r1, #8]
  4026a2:	d3b9      	bcc.n	402618 <_free_r+0x84>
  4026a4:	4b2d      	ldr	r3, [pc, #180]	; (40275c <_free_r+0x1c8>)
  4026a6:	4640      	mov	r0, r8
  4026a8:	6819      	ldr	r1, [r3, #0]
  4026aa:	f7ff ff23 	bl	4024f4 <_malloc_trim_r>
  4026ae:	e7b3      	b.n	402618 <_free_r+0x84>
  4026b0:	4610      	mov	r0, r2
  4026b2:	e7cd      	b.n	402650 <_free_r+0xbc>
  4026b4:	1811      	adds	r1, r2, r0
  4026b6:	6849      	ldr	r1, [r1, #4]
  4026b8:	07c9      	lsls	r1, r1, #31
  4026ba:	d444      	bmi.n	402746 <_free_r+0x1b2>
  4026bc:	6891      	ldr	r1, [r2, #8]
  4026be:	68d2      	ldr	r2, [r2, #12]
  4026c0:	60ca      	str	r2, [r1, #12]
  4026c2:	4403      	add	r3, r0
  4026c4:	f043 0001 	orr.w	r0, r3, #1
  4026c8:	6091      	str	r1, [r2, #8]
  4026ca:	6060      	str	r0, [r4, #4]
  4026cc:	50e3      	str	r3, [r4, r3]
  4026ce:	e7a3      	b.n	402618 <_free_r+0x84>
  4026d0:	2a14      	cmp	r2, #20
  4026d2:	d816      	bhi.n	402702 <_free_r+0x16e>
  4026d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4026d8:	00ff      	lsls	r7, r7, #3
  4026da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4026de:	e7aa      	b.n	402636 <_free_r+0xa2>
  4026e0:	10aa      	asrs	r2, r5, #2
  4026e2:	2301      	movs	r3, #1
  4026e4:	684d      	ldr	r5, [r1, #4]
  4026e6:	4093      	lsls	r3, r2
  4026e8:	432b      	orrs	r3, r5
  4026ea:	604b      	str	r3, [r1, #4]
  4026ec:	4603      	mov	r3, r0
  4026ee:	e7b0      	b.n	402652 <_free_r+0xbe>
  4026f0:	f043 0201 	orr.w	r2, r3, #1
  4026f4:	614c      	str	r4, [r1, #20]
  4026f6:	610c      	str	r4, [r1, #16]
  4026f8:	60e5      	str	r5, [r4, #12]
  4026fa:	60a5      	str	r5, [r4, #8]
  4026fc:	6062      	str	r2, [r4, #4]
  4026fe:	50e3      	str	r3, [r4, r3]
  402700:	e78a      	b.n	402618 <_free_r+0x84>
  402702:	2a54      	cmp	r2, #84	; 0x54
  402704:	d806      	bhi.n	402714 <_free_r+0x180>
  402706:	0b1a      	lsrs	r2, r3, #12
  402708:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40270c:	00ff      	lsls	r7, r7, #3
  40270e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402712:	e790      	b.n	402636 <_free_r+0xa2>
  402714:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402718:	d806      	bhi.n	402728 <_free_r+0x194>
  40271a:	0bda      	lsrs	r2, r3, #15
  40271c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402720:	00ff      	lsls	r7, r7, #3
  402722:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402726:	e786      	b.n	402636 <_free_r+0xa2>
  402728:	f240 5054 	movw	r0, #1364	; 0x554
  40272c:	4282      	cmp	r2, r0
  40272e:	d806      	bhi.n	40273e <_free_r+0x1aa>
  402730:	0c9a      	lsrs	r2, r3, #18
  402732:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402736:	00ff      	lsls	r7, r7, #3
  402738:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40273c:	e77b      	b.n	402636 <_free_r+0xa2>
  40273e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402742:	257e      	movs	r5, #126	; 0x7e
  402744:	e777      	b.n	402636 <_free_r+0xa2>
  402746:	f043 0101 	orr.w	r1, r3, #1
  40274a:	6061      	str	r1, [r4, #4]
  40274c:	6013      	str	r3, [r2, #0]
  40274e:	e763      	b.n	402618 <_free_r+0x84>
  402750:	204005a8 	.word	0x204005a8
  402754:	204005b0 	.word	0x204005b0
  402758:	204009b4 	.word	0x204009b4
  40275c:	20400a80 	.word	0x20400a80

00402760 <__sfvwrite_r>:
  402760:	6893      	ldr	r3, [r2, #8]
  402762:	2b00      	cmp	r3, #0
  402764:	d073      	beq.n	40284e <__sfvwrite_r+0xee>
  402766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40276a:	898b      	ldrh	r3, [r1, #12]
  40276c:	b083      	sub	sp, #12
  40276e:	460c      	mov	r4, r1
  402770:	0719      	lsls	r1, r3, #28
  402772:	9000      	str	r0, [sp, #0]
  402774:	4616      	mov	r6, r2
  402776:	d526      	bpl.n	4027c6 <__sfvwrite_r+0x66>
  402778:	6922      	ldr	r2, [r4, #16]
  40277a:	b322      	cbz	r2, 4027c6 <__sfvwrite_r+0x66>
  40277c:	f013 0002 	ands.w	r0, r3, #2
  402780:	6835      	ldr	r5, [r6, #0]
  402782:	d02c      	beq.n	4027de <__sfvwrite_r+0x7e>
  402784:	f04f 0900 	mov.w	r9, #0
  402788:	4fb0      	ldr	r7, [pc, #704]	; (402a4c <__sfvwrite_r+0x2ec>)
  40278a:	46c8      	mov	r8, r9
  40278c:	46b2      	mov	sl, r6
  40278e:	45b8      	cmp	r8, r7
  402790:	4643      	mov	r3, r8
  402792:	464a      	mov	r2, r9
  402794:	bf28      	it	cs
  402796:	463b      	movcs	r3, r7
  402798:	9800      	ldr	r0, [sp, #0]
  40279a:	f1b8 0f00 	cmp.w	r8, #0
  40279e:	d050      	beq.n	402842 <__sfvwrite_r+0xe2>
  4027a0:	69e1      	ldr	r1, [r4, #28]
  4027a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4027a4:	47b0      	blx	r6
  4027a6:	2800      	cmp	r0, #0
  4027a8:	dd58      	ble.n	40285c <__sfvwrite_r+0xfc>
  4027aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4027ae:	1a1b      	subs	r3, r3, r0
  4027b0:	4481      	add	r9, r0
  4027b2:	eba8 0800 	sub.w	r8, r8, r0
  4027b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4027ba:	2b00      	cmp	r3, #0
  4027bc:	d1e7      	bne.n	40278e <__sfvwrite_r+0x2e>
  4027be:	2000      	movs	r0, #0
  4027c0:	b003      	add	sp, #12
  4027c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027c6:	4621      	mov	r1, r4
  4027c8:	9800      	ldr	r0, [sp, #0]
  4027ca:	f7ff fc51 	bl	402070 <__swsetup_r>
  4027ce:	2800      	cmp	r0, #0
  4027d0:	f040 8133 	bne.w	402a3a <__sfvwrite_r+0x2da>
  4027d4:	89a3      	ldrh	r3, [r4, #12]
  4027d6:	6835      	ldr	r5, [r6, #0]
  4027d8:	f013 0002 	ands.w	r0, r3, #2
  4027dc:	d1d2      	bne.n	402784 <__sfvwrite_r+0x24>
  4027de:	f013 0901 	ands.w	r9, r3, #1
  4027e2:	d145      	bne.n	402870 <__sfvwrite_r+0x110>
  4027e4:	464f      	mov	r7, r9
  4027e6:	9601      	str	r6, [sp, #4]
  4027e8:	b337      	cbz	r7, 402838 <__sfvwrite_r+0xd8>
  4027ea:	059a      	lsls	r2, r3, #22
  4027ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4027f0:	f140 8083 	bpl.w	4028fa <__sfvwrite_r+0x19a>
  4027f4:	4547      	cmp	r7, r8
  4027f6:	46c3      	mov	fp, r8
  4027f8:	f0c0 80ab 	bcc.w	402952 <__sfvwrite_r+0x1f2>
  4027fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402800:	f040 80ac 	bne.w	40295c <__sfvwrite_r+0x1fc>
  402804:	6820      	ldr	r0, [r4, #0]
  402806:	46ba      	mov	sl, r7
  402808:	465a      	mov	r2, fp
  40280a:	4649      	mov	r1, r9
  40280c:	f000 fd92 	bl	403334 <memmove>
  402810:	68a2      	ldr	r2, [r4, #8]
  402812:	6823      	ldr	r3, [r4, #0]
  402814:	eba2 0208 	sub.w	r2, r2, r8
  402818:	445b      	add	r3, fp
  40281a:	60a2      	str	r2, [r4, #8]
  40281c:	6023      	str	r3, [r4, #0]
  40281e:	9a01      	ldr	r2, [sp, #4]
  402820:	6893      	ldr	r3, [r2, #8]
  402822:	eba3 030a 	sub.w	r3, r3, sl
  402826:	44d1      	add	r9, sl
  402828:	eba7 070a 	sub.w	r7, r7, sl
  40282c:	6093      	str	r3, [r2, #8]
  40282e:	2b00      	cmp	r3, #0
  402830:	d0c5      	beq.n	4027be <__sfvwrite_r+0x5e>
  402832:	89a3      	ldrh	r3, [r4, #12]
  402834:	2f00      	cmp	r7, #0
  402836:	d1d8      	bne.n	4027ea <__sfvwrite_r+0x8a>
  402838:	f8d5 9000 	ldr.w	r9, [r5]
  40283c:	686f      	ldr	r7, [r5, #4]
  40283e:	3508      	adds	r5, #8
  402840:	e7d2      	b.n	4027e8 <__sfvwrite_r+0x88>
  402842:	f8d5 9000 	ldr.w	r9, [r5]
  402846:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40284a:	3508      	adds	r5, #8
  40284c:	e79f      	b.n	40278e <__sfvwrite_r+0x2e>
  40284e:	2000      	movs	r0, #0
  402850:	4770      	bx	lr
  402852:	4621      	mov	r1, r4
  402854:	9800      	ldr	r0, [sp, #0]
  402856:	f7ff fd1f 	bl	402298 <_fflush_r>
  40285a:	b370      	cbz	r0, 4028ba <__sfvwrite_r+0x15a>
  40285c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402864:	f04f 30ff 	mov.w	r0, #4294967295
  402868:	81a3      	strh	r3, [r4, #12]
  40286a:	b003      	add	sp, #12
  40286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402870:	4681      	mov	r9, r0
  402872:	4633      	mov	r3, r6
  402874:	464e      	mov	r6, r9
  402876:	46a8      	mov	r8, r5
  402878:	469a      	mov	sl, r3
  40287a:	464d      	mov	r5, r9
  40287c:	b34e      	cbz	r6, 4028d2 <__sfvwrite_r+0x172>
  40287e:	b380      	cbz	r0, 4028e2 <__sfvwrite_r+0x182>
  402880:	6820      	ldr	r0, [r4, #0]
  402882:	6923      	ldr	r3, [r4, #16]
  402884:	6962      	ldr	r2, [r4, #20]
  402886:	45b1      	cmp	r9, r6
  402888:	46cb      	mov	fp, r9
  40288a:	bf28      	it	cs
  40288c:	46b3      	movcs	fp, r6
  40288e:	4298      	cmp	r0, r3
  402890:	465f      	mov	r7, fp
  402892:	d904      	bls.n	40289e <__sfvwrite_r+0x13e>
  402894:	68a3      	ldr	r3, [r4, #8]
  402896:	4413      	add	r3, r2
  402898:	459b      	cmp	fp, r3
  40289a:	f300 80a6 	bgt.w	4029ea <__sfvwrite_r+0x28a>
  40289e:	4593      	cmp	fp, r2
  4028a0:	db4b      	blt.n	40293a <__sfvwrite_r+0x1da>
  4028a2:	4613      	mov	r3, r2
  4028a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4028a6:	69e1      	ldr	r1, [r4, #28]
  4028a8:	9800      	ldr	r0, [sp, #0]
  4028aa:	462a      	mov	r2, r5
  4028ac:	47b8      	blx	r7
  4028ae:	1e07      	subs	r7, r0, #0
  4028b0:	ddd4      	ble.n	40285c <__sfvwrite_r+0xfc>
  4028b2:	ebb9 0907 	subs.w	r9, r9, r7
  4028b6:	d0cc      	beq.n	402852 <__sfvwrite_r+0xf2>
  4028b8:	2001      	movs	r0, #1
  4028ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4028be:	1bdb      	subs	r3, r3, r7
  4028c0:	443d      	add	r5, r7
  4028c2:	1bf6      	subs	r6, r6, r7
  4028c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4028c8:	2b00      	cmp	r3, #0
  4028ca:	f43f af78 	beq.w	4027be <__sfvwrite_r+0x5e>
  4028ce:	2e00      	cmp	r6, #0
  4028d0:	d1d5      	bne.n	40287e <__sfvwrite_r+0x11e>
  4028d2:	f108 0308 	add.w	r3, r8, #8
  4028d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4028da:	4698      	mov	r8, r3
  4028dc:	3308      	adds	r3, #8
  4028de:	2e00      	cmp	r6, #0
  4028e0:	d0f9      	beq.n	4028d6 <__sfvwrite_r+0x176>
  4028e2:	4632      	mov	r2, r6
  4028e4:	210a      	movs	r1, #10
  4028e6:	4628      	mov	r0, r5
  4028e8:	f000 fc3a 	bl	403160 <memchr>
  4028ec:	2800      	cmp	r0, #0
  4028ee:	f000 80a1 	beq.w	402a34 <__sfvwrite_r+0x2d4>
  4028f2:	3001      	adds	r0, #1
  4028f4:	eba0 0905 	sub.w	r9, r0, r5
  4028f8:	e7c2      	b.n	402880 <__sfvwrite_r+0x120>
  4028fa:	6820      	ldr	r0, [r4, #0]
  4028fc:	6923      	ldr	r3, [r4, #16]
  4028fe:	4298      	cmp	r0, r3
  402900:	d802      	bhi.n	402908 <__sfvwrite_r+0x1a8>
  402902:	6963      	ldr	r3, [r4, #20]
  402904:	429f      	cmp	r7, r3
  402906:	d25d      	bcs.n	4029c4 <__sfvwrite_r+0x264>
  402908:	45b8      	cmp	r8, r7
  40290a:	bf28      	it	cs
  40290c:	46b8      	movcs	r8, r7
  40290e:	4642      	mov	r2, r8
  402910:	4649      	mov	r1, r9
  402912:	f000 fd0f 	bl	403334 <memmove>
  402916:	68a3      	ldr	r3, [r4, #8]
  402918:	6822      	ldr	r2, [r4, #0]
  40291a:	eba3 0308 	sub.w	r3, r3, r8
  40291e:	4442      	add	r2, r8
  402920:	60a3      	str	r3, [r4, #8]
  402922:	6022      	str	r2, [r4, #0]
  402924:	b10b      	cbz	r3, 40292a <__sfvwrite_r+0x1ca>
  402926:	46c2      	mov	sl, r8
  402928:	e779      	b.n	40281e <__sfvwrite_r+0xbe>
  40292a:	4621      	mov	r1, r4
  40292c:	9800      	ldr	r0, [sp, #0]
  40292e:	f7ff fcb3 	bl	402298 <_fflush_r>
  402932:	2800      	cmp	r0, #0
  402934:	d192      	bne.n	40285c <__sfvwrite_r+0xfc>
  402936:	46c2      	mov	sl, r8
  402938:	e771      	b.n	40281e <__sfvwrite_r+0xbe>
  40293a:	465a      	mov	r2, fp
  40293c:	4629      	mov	r1, r5
  40293e:	f000 fcf9 	bl	403334 <memmove>
  402942:	68a2      	ldr	r2, [r4, #8]
  402944:	6823      	ldr	r3, [r4, #0]
  402946:	eba2 020b 	sub.w	r2, r2, fp
  40294a:	445b      	add	r3, fp
  40294c:	60a2      	str	r2, [r4, #8]
  40294e:	6023      	str	r3, [r4, #0]
  402950:	e7af      	b.n	4028b2 <__sfvwrite_r+0x152>
  402952:	6820      	ldr	r0, [r4, #0]
  402954:	46b8      	mov	r8, r7
  402956:	46ba      	mov	sl, r7
  402958:	46bb      	mov	fp, r7
  40295a:	e755      	b.n	402808 <__sfvwrite_r+0xa8>
  40295c:	6962      	ldr	r2, [r4, #20]
  40295e:	6820      	ldr	r0, [r4, #0]
  402960:	6921      	ldr	r1, [r4, #16]
  402962:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402966:	eba0 0a01 	sub.w	sl, r0, r1
  40296a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40296e:	f10a 0001 	add.w	r0, sl, #1
  402972:	ea4f 0868 	mov.w	r8, r8, asr #1
  402976:	4438      	add	r0, r7
  402978:	4540      	cmp	r0, r8
  40297a:	4642      	mov	r2, r8
  40297c:	bf84      	itt	hi
  40297e:	4680      	movhi	r8, r0
  402980:	4642      	movhi	r2, r8
  402982:	055b      	lsls	r3, r3, #21
  402984:	d544      	bpl.n	402a10 <__sfvwrite_r+0x2b0>
  402986:	4611      	mov	r1, r2
  402988:	9800      	ldr	r0, [sp, #0]
  40298a:	f000 f921 	bl	402bd0 <_malloc_r>
  40298e:	4683      	mov	fp, r0
  402990:	2800      	cmp	r0, #0
  402992:	d055      	beq.n	402a40 <__sfvwrite_r+0x2e0>
  402994:	4652      	mov	r2, sl
  402996:	6921      	ldr	r1, [r4, #16]
  402998:	f000 fc32 	bl	403200 <memcpy>
  40299c:	89a3      	ldrh	r3, [r4, #12]
  40299e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4029a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4029a6:	81a3      	strh	r3, [r4, #12]
  4029a8:	eb0b 000a 	add.w	r0, fp, sl
  4029ac:	eba8 030a 	sub.w	r3, r8, sl
  4029b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4029b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4029b8:	6020      	str	r0, [r4, #0]
  4029ba:	60a3      	str	r3, [r4, #8]
  4029bc:	46b8      	mov	r8, r7
  4029be:	46ba      	mov	sl, r7
  4029c0:	46bb      	mov	fp, r7
  4029c2:	e721      	b.n	402808 <__sfvwrite_r+0xa8>
  4029c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4029c8:	42b9      	cmp	r1, r7
  4029ca:	bf28      	it	cs
  4029cc:	4639      	movcs	r1, r7
  4029ce:	464a      	mov	r2, r9
  4029d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4029d4:	9800      	ldr	r0, [sp, #0]
  4029d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4029d8:	fb03 f301 	mul.w	r3, r3, r1
  4029dc:	69e1      	ldr	r1, [r4, #28]
  4029de:	47b0      	blx	r6
  4029e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4029e4:	f73f af1b 	bgt.w	40281e <__sfvwrite_r+0xbe>
  4029e8:	e738      	b.n	40285c <__sfvwrite_r+0xfc>
  4029ea:	461a      	mov	r2, r3
  4029ec:	4629      	mov	r1, r5
  4029ee:	9301      	str	r3, [sp, #4]
  4029f0:	f000 fca0 	bl	403334 <memmove>
  4029f4:	6822      	ldr	r2, [r4, #0]
  4029f6:	9b01      	ldr	r3, [sp, #4]
  4029f8:	9800      	ldr	r0, [sp, #0]
  4029fa:	441a      	add	r2, r3
  4029fc:	6022      	str	r2, [r4, #0]
  4029fe:	4621      	mov	r1, r4
  402a00:	f7ff fc4a 	bl	402298 <_fflush_r>
  402a04:	9b01      	ldr	r3, [sp, #4]
  402a06:	2800      	cmp	r0, #0
  402a08:	f47f af28 	bne.w	40285c <__sfvwrite_r+0xfc>
  402a0c:	461f      	mov	r7, r3
  402a0e:	e750      	b.n	4028b2 <__sfvwrite_r+0x152>
  402a10:	9800      	ldr	r0, [sp, #0]
  402a12:	f000 fcff 	bl	403414 <_realloc_r>
  402a16:	4683      	mov	fp, r0
  402a18:	2800      	cmp	r0, #0
  402a1a:	d1c5      	bne.n	4029a8 <__sfvwrite_r+0x248>
  402a1c:	9d00      	ldr	r5, [sp, #0]
  402a1e:	6921      	ldr	r1, [r4, #16]
  402a20:	4628      	mov	r0, r5
  402a22:	f7ff fdb7 	bl	402594 <_free_r>
  402a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a2a:	220c      	movs	r2, #12
  402a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402a30:	602a      	str	r2, [r5, #0]
  402a32:	e715      	b.n	402860 <__sfvwrite_r+0x100>
  402a34:	f106 0901 	add.w	r9, r6, #1
  402a38:	e722      	b.n	402880 <__sfvwrite_r+0x120>
  402a3a:	f04f 30ff 	mov.w	r0, #4294967295
  402a3e:	e6bf      	b.n	4027c0 <__sfvwrite_r+0x60>
  402a40:	9a00      	ldr	r2, [sp, #0]
  402a42:	230c      	movs	r3, #12
  402a44:	6013      	str	r3, [r2, #0]
  402a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a4a:	e709      	b.n	402860 <__sfvwrite_r+0x100>
  402a4c:	7ffffc00 	.word	0x7ffffc00

00402a50 <_fwalk_reent>:
  402a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402a58:	d01f      	beq.n	402a9a <_fwalk_reent+0x4a>
  402a5a:	4688      	mov	r8, r1
  402a5c:	4606      	mov	r6, r0
  402a5e:	f04f 0900 	mov.w	r9, #0
  402a62:	687d      	ldr	r5, [r7, #4]
  402a64:	68bc      	ldr	r4, [r7, #8]
  402a66:	3d01      	subs	r5, #1
  402a68:	d411      	bmi.n	402a8e <_fwalk_reent+0x3e>
  402a6a:	89a3      	ldrh	r3, [r4, #12]
  402a6c:	2b01      	cmp	r3, #1
  402a6e:	f105 35ff 	add.w	r5, r5, #4294967295
  402a72:	d908      	bls.n	402a86 <_fwalk_reent+0x36>
  402a74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402a78:	3301      	adds	r3, #1
  402a7a:	4621      	mov	r1, r4
  402a7c:	4630      	mov	r0, r6
  402a7e:	d002      	beq.n	402a86 <_fwalk_reent+0x36>
  402a80:	47c0      	blx	r8
  402a82:	ea49 0900 	orr.w	r9, r9, r0
  402a86:	1c6b      	adds	r3, r5, #1
  402a88:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402a8c:	d1ed      	bne.n	402a6a <_fwalk_reent+0x1a>
  402a8e:	683f      	ldr	r7, [r7, #0]
  402a90:	2f00      	cmp	r7, #0
  402a92:	d1e6      	bne.n	402a62 <_fwalk_reent+0x12>
  402a94:	4648      	mov	r0, r9
  402a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a9a:	46b9      	mov	r9, r7
  402a9c:	4648      	mov	r0, r9
  402a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402aa2:	bf00      	nop

00402aa4 <__locale_mb_cur_max>:
  402aa4:	4b04      	ldr	r3, [pc, #16]	; (402ab8 <__locale_mb_cur_max+0x14>)
  402aa6:	4a05      	ldr	r2, [pc, #20]	; (402abc <__locale_mb_cur_max+0x18>)
  402aa8:	681b      	ldr	r3, [r3, #0]
  402aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402aac:	2b00      	cmp	r3, #0
  402aae:	bf08      	it	eq
  402ab0:	4613      	moveq	r3, r2
  402ab2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402ab6:	4770      	bx	lr
  402ab8:	20400008 	.word	0x20400008
  402abc:	2040043c 	.word	0x2040043c

00402ac0 <__retarget_lock_init_recursive>:
  402ac0:	4770      	bx	lr
  402ac2:	bf00      	nop

00402ac4 <__retarget_lock_close_recursive>:
  402ac4:	4770      	bx	lr
  402ac6:	bf00      	nop

00402ac8 <__retarget_lock_acquire_recursive>:
  402ac8:	4770      	bx	lr
  402aca:	bf00      	nop

00402acc <__retarget_lock_release_recursive>:
  402acc:	4770      	bx	lr
  402ace:	bf00      	nop

00402ad0 <__swhatbuf_r>:
  402ad0:	b570      	push	{r4, r5, r6, lr}
  402ad2:	460c      	mov	r4, r1
  402ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ad8:	2900      	cmp	r1, #0
  402ada:	b090      	sub	sp, #64	; 0x40
  402adc:	4615      	mov	r5, r2
  402ade:	461e      	mov	r6, r3
  402ae0:	db14      	blt.n	402b0c <__swhatbuf_r+0x3c>
  402ae2:	aa01      	add	r2, sp, #4
  402ae4:	f001 f80e 	bl	403b04 <_fstat_r>
  402ae8:	2800      	cmp	r0, #0
  402aea:	db0f      	blt.n	402b0c <__swhatbuf_r+0x3c>
  402aec:	9a02      	ldr	r2, [sp, #8]
  402aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402af2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402af6:	fab2 f282 	clz	r2, r2
  402afa:	0952      	lsrs	r2, r2, #5
  402afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b00:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402b04:	6032      	str	r2, [r6, #0]
  402b06:	602b      	str	r3, [r5, #0]
  402b08:	b010      	add	sp, #64	; 0x40
  402b0a:	bd70      	pop	{r4, r5, r6, pc}
  402b0c:	89a2      	ldrh	r2, [r4, #12]
  402b0e:	2300      	movs	r3, #0
  402b10:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402b14:	6033      	str	r3, [r6, #0]
  402b16:	d004      	beq.n	402b22 <__swhatbuf_r+0x52>
  402b18:	2240      	movs	r2, #64	; 0x40
  402b1a:	4618      	mov	r0, r3
  402b1c:	602a      	str	r2, [r5, #0]
  402b1e:	b010      	add	sp, #64	; 0x40
  402b20:	bd70      	pop	{r4, r5, r6, pc}
  402b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b26:	602b      	str	r3, [r5, #0]
  402b28:	b010      	add	sp, #64	; 0x40
  402b2a:	bd70      	pop	{r4, r5, r6, pc}

00402b2c <__smakebuf_r>:
  402b2c:	898a      	ldrh	r2, [r1, #12]
  402b2e:	0792      	lsls	r2, r2, #30
  402b30:	460b      	mov	r3, r1
  402b32:	d506      	bpl.n	402b42 <__smakebuf_r+0x16>
  402b34:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402b38:	2101      	movs	r1, #1
  402b3a:	601a      	str	r2, [r3, #0]
  402b3c:	611a      	str	r2, [r3, #16]
  402b3e:	6159      	str	r1, [r3, #20]
  402b40:	4770      	bx	lr
  402b42:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b44:	b083      	sub	sp, #12
  402b46:	ab01      	add	r3, sp, #4
  402b48:	466a      	mov	r2, sp
  402b4a:	460c      	mov	r4, r1
  402b4c:	4606      	mov	r6, r0
  402b4e:	f7ff ffbf 	bl	402ad0 <__swhatbuf_r>
  402b52:	9900      	ldr	r1, [sp, #0]
  402b54:	4605      	mov	r5, r0
  402b56:	4630      	mov	r0, r6
  402b58:	f000 f83a 	bl	402bd0 <_malloc_r>
  402b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b60:	b1d8      	cbz	r0, 402b9a <__smakebuf_r+0x6e>
  402b62:	9a01      	ldr	r2, [sp, #4]
  402b64:	4f15      	ldr	r7, [pc, #84]	; (402bbc <__smakebuf_r+0x90>)
  402b66:	9900      	ldr	r1, [sp, #0]
  402b68:	63f7      	str	r7, [r6, #60]	; 0x3c
  402b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b6e:	81a3      	strh	r3, [r4, #12]
  402b70:	6020      	str	r0, [r4, #0]
  402b72:	6120      	str	r0, [r4, #16]
  402b74:	6161      	str	r1, [r4, #20]
  402b76:	b91a      	cbnz	r2, 402b80 <__smakebuf_r+0x54>
  402b78:	432b      	orrs	r3, r5
  402b7a:	81a3      	strh	r3, [r4, #12]
  402b7c:	b003      	add	sp, #12
  402b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b80:	4630      	mov	r0, r6
  402b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402b86:	f000 ffd1 	bl	403b2c <_isatty_r>
  402b8a:	b1a0      	cbz	r0, 402bb6 <__smakebuf_r+0x8a>
  402b8c:	89a3      	ldrh	r3, [r4, #12]
  402b8e:	f023 0303 	bic.w	r3, r3, #3
  402b92:	f043 0301 	orr.w	r3, r3, #1
  402b96:	b21b      	sxth	r3, r3
  402b98:	e7ee      	b.n	402b78 <__smakebuf_r+0x4c>
  402b9a:	059a      	lsls	r2, r3, #22
  402b9c:	d4ee      	bmi.n	402b7c <__smakebuf_r+0x50>
  402b9e:	f023 0303 	bic.w	r3, r3, #3
  402ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402ba6:	f043 0302 	orr.w	r3, r3, #2
  402baa:	2101      	movs	r1, #1
  402bac:	81a3      	strh	r3, [r4, #12]
  402bae:	6022      	str	r2, [r4, #0]
  402bb0:	6122      	str	r2, [r4, #16]
  402bb2:	6161      	str	r1, [r4, #20]
  402bb4:	e7e2      	b.n	402b7c <__smakebuf_r+0x50>
  402bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bba:	e7dd      	b.n	402b78 <__smakebuf_r+0x4c>
  402bbc:	004022ed 	.word	0x004022ed

00402bc0 <malloc>:
  402bc0:	4b02      	ldr	r3, [pc, #8]	; (402bcc <malloc+0xc>)
  402bc2:	4601      	mov	r1, r0
  402bc4:	6818      	ldr	r0, [r3, #0]
  402bc6:	f000 b803 	b.w	402bd0 <_malloc_r>
  402bca:	bf00      	nop
  402bcc:	20400008 	.word	0x20400008

00402bd0 <_malloc_r>:
  402bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bd4:	f101 060b 	add.w	r6, r1, #11
  402bd8:	2e16      	cmp	r6, #22
  402bda:	b083      	sub	sp, #12
  402bdc:	4605      	mov	r5, r0
  402bde:	f240 809e 	bls.w	402d1e <_malloc_r+0x14e>
  402be2:	f036 0607 	bics.w	r6, r6, #7
  402be6:	f100 80bd 	bmi.w	402d64 <_malloc_r+0x194>
  402bea:	42b1      	cmp	r1, r6
  402bec:	f200 80ba 	bhi.w	402d64 <_malloc_r+0x194>
  402bf0:	f000 fc04 	bl	4033fc <__malloc_lock>
  402bf4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402bf8:	f0c0 8293 	bcc.w	403122 <_malloc_r+0x552>
  402bfc:	0a73      	lsrs	r3, r6, #9
  402bfe:	f000 80b8 	beq.w	402d72 <_malloc_r+0x1a2>
  402c02:	2b04      	cmp	r3, #4
  402c04:	f200 8179 	bhi.w	402efa <_malloc_r+0x32a>
  402c08:	09b3      	lsrs	r3, r6, #6
  402c0a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402c0e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402c12:	00c3      	lsls	r3, r0, #3
  402c14:	4fbf      	ldr	r7, [pc, #764]	; (402f14 <_malloc_r+0x344>)
  402c16:	443b      	add	r3, r7
  402c18:	f1a3 0108 	sub.w	r1, r3, #8
  402c1c:	685c      	ldr	r4, [r3, #4]
  402c1e:	42a1      	cmp	r1, r4
  402c20:	d106      	bne.n	402c30 <_malloc_r+0x60>
  402c22:	e00c      	b.n	402c3e <_malloc_r+0x6e>
  402c24:	2a00      	cmp	r2, #0
  402c26:	f280 80aa 	bge.w	402d7e <_malloc_r+0x1ae>
  402c2a:	68e4      	ldr	r4, [r4, #12]
  402c2c:	42a1      	cmp	r1, r4
  402c2e:	d006      	beq.n	402c3e <_malloc_r+0x6e>
  402c30:	6863      	ldr	r3, [r4, #4]
  402c32:	f023 0303 	bic.w	r3, r3, #3
  402c36:	1b9a      	subs	r2, r3, r6
  402c38:	2a0f      	cmp	r2, #15
  402c3a:	ddf3      	ble.n	402c24 <_malloc_r+0x54>
  402c3c:	4670      	mov	r0, lr
  402c3e:	693c      	ldr	r4, [r7, #16]
  402c40:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402f28 <_malloc_r+0x358>
  402c44:	4574      	cmp	r4, lr
  402c46:	f000 81ab 	beq.w	402fa0 <_malloc_r+0x3d0>
  402c4a:	6863      	ldr	r3, [r4, #4]
  402c4c:	f023 0303 	bic.w	r3, r3, #3
  402c50:	1b9a      	subs	r2, r3, r6
  402c52:	2a0f      	cmp	r2, #15
  402c54:	f300 8190 	bgt.w	402f78 <_malloc_r+0x3a8>
  402c58:	2a00      	cmp	r2, #0
  402c5a:	f8c7 e014 	str.w	lr, [r7, #20]
  402c5e:	f8c7 e010 	str.w	lr, [r7, #16]
  402c62:	f280 809d 	bge.w	402da0 <_malloc_r+0x1d0>
  402c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c6a:	f080 8161 	bcs.w	402f30 <_malloc_r+0x360>
  402c6e:	08db      	lsrs	r3, r3, #3
  402c70:	f103 0c01 	add.w	ip, r3, #1
  402c74:	1099      	asrs	r1, r3, #2
  402c76:	687a      	ldr	r2, [r7, #4]
  402c78:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402c7c:	f8c4 8008 	str.w	r8, [r4, #8]
  402c80:	2301      	movs	r3, #1
  402c82:	408b      	lsls	r3, r1
  402c84:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402c88:	4313      	orrs	r3, r2
  402c8a:	3908      	subs	r1, #8
  402c8c:	60e1      	str	r1, [r4, #12]
  402c8e:	607b      	str	r3, [r7, #4]
  402c90:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402c94:	f8c8 400c 	str.w	r4, [r8, #12]
  402c98:	1082      	asrs	r2, r0, #2
  402c9a:	2401      	movs	r4, #1
  402c9c:	4094      	lsls	r4, r2
  402c9e:	429c      	cmp	r4, r3
  402ca0:	f200 808b 	bhi.w	402dba <_malloc_r+0x1ea>
  402ca4:	421c      	tst	r4, r3
  402ca6:	d106      	bne.n	402cb6 <_malloc_r+0xe6>
  402ca8:	f020 0003 	bic.w	r0, r0, #3
  402cac:	0064      	lsls	r4, r4, #1
  402cae:	421c      	tst	r4, r3
  402cb0:	f100 0004 	add.w	r0, r0, #4
  402cb4:	d0fa      	beq.n	402cac <_malloc_r+0xdc>
  402cb6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402cba:	46cc      	mov	ip, r9
  402cbc:	4680      	mov	r8, r0
  402cbe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402cc2:	459c      	cmp	ip, r3
  402cc4:	d107      	bne.n	402cd6 <_malloc_r+0x106>
  402cc6:	e16d      	b.n	402fa4 <_malloc_r+0x3d4>
  402cc8:	2a00      	cmp	r2, #0
  402cca:	f280 817b 	bge.w	402fc4 <_malloc_r+0x3f4>
  402cce:	68db      	ldr	r3, [r3, #12]
  402cd0:	459c      	cmp	ip, r3
  402cd2:	f000 8167 	beq.w	402fa4 <_malloc_r+0x3d4>
  402cd6:	6859      	ldr	r1, [r3, #4]
  402cd8:	f021 0103 	bic.w	r1, r1, #3
  402cdc:	1b8a      	subs	r2, r1, r6
  402cde:	2a0f      	cmp	r2, #15
  402ce0:	ddf2      	ble.n	402cc8 <_malloc_r+0xf8>
  402ce2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402ce6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402cea:	9300      	str	r3, [sp, #0]
  402cec:	199c      	adds	r4, r3, r6
  402cee:	4628      	mov	r0, r5
  402cf0:	f046 0601 	orr.w	r6, r6, #1
  402cf4:	f042 0501 	orr.w	r5, r2, #1
  402cf8:	605e      	str	r6, [r3, #4]
  402cfa:	f8c8 c00c 	str.w	ip, [r8, #12]
  402cfe:	f8cc 8008 	str.w	r8, [ip, #8]
  402d02:	617c      	str	r4, [r7, #20]
  402d04:	613c      	str	r4, [r7, #16]
  402d06:	f8c4 e00c 	str.w	lr, [r4, #12]
  402d0a:	f8c4 e008 	str.w	lr, [r4, #8]
  402d0e:	6065      	str	r5, [r4, #4]
  402d10:	505a      	str	r2, [r3, r1]
  402d12:	f000 fb79 	bl	403408 <__malloc_unlock>
  402d16:	9b00      	ldr	r3, [sp, #0]
  402d18:	f103 0408 	add.w	r4, r3, #8
  402d1c:	e01e      	b.n	402d5c <_malloc_r+0x18c>
  402d1e:	2910      	cmp	r1, #16
  402d20:	d820      	bhi.n	402d64 <_malloc_r+0x194>
  402d22:	f000 fb6b 	bl	4033fc <__malloc_lock>
  402d26:	2610      	movs	r6, #16
  402d28:	2318      	movs	r3, #24
  402d2a:	2002      	movs	r0, #2
  402d2c:	4f79      	ldr	r7, [pc, #484]	; (402f14 <_malloc_r+0x344>)
  402d2e:	443b      	add	r3, r7
  402d30:	f1a3 0208 	sub.w	r2, r3, #8
  402d34:	685c      	ldr	r4, [r3, #4]
  402d36:	4294      	cmp	r4, r2
  402d38:	f000 813d 	beq.w	402fb6 <_malloc_r+0x3e6>
  402d3c:	6863      	ldr	r3, [r4, #4]
  402d3e:	68e1      	ldr	r1, [r4, #12]
  402d40:	68a6      	ldr	r6, [r4, #8]
  402d42:	f023 0303 	bic.w	r3, r3, #3
  402d46:	4423      	add	r3, r4
  402d48:	4628      	mov	r0, r5
  402d4a:	685a      	ldr	r2, [r3, #4]
  402d4c:	60f1      	str	r1, [r6, #12]
  402d4e:	f042 0201 	orr.w	r2, r2, #1
  402d52:	608e      	str	r6, [r1, #8]
  402d54:	605a      	str	r2, [r3, #4]
  402d56:	f000 fb57 	bl	403408 <__malloc_unlock>
  402d5a:	3408      	adds	r4, #8
  402d5c:	4620      	mov	r0, r4
  402d5e:	b003      	add	sp, #12
  402d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d64:	2400      	movs	r4, #0
  402d66:	230c      	movs	r3, #12
  402d68:	4620      	mov	r0, r4
  402d6a:	602b      	str	r3, [r5, #0]
  402d6c:	b003      	add	sp, #12
  402d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d72:	2040      	movs	r0, #64	; 0x40
  402d74:	f44f 7300 	mov.w	r3, #512	; 0x200
  402d78:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402d7c:	e74a      	b.n	402c14 <_malloc_r+0x44>
  402d7e:	4423      	add	r3, r4
  402d80:	68e1      	ldr	r1, [r4, #12]
  402d82:	685a      	ldr	r2, [r3, #4]
  402d84:	68a6      	ldr	r6, [r4, #8]
  402d86:	f042 0201 	orr.w	r2, r2, #1
  402d8a:	60f1      	str	r1, [r6, #12]
  402d8c:	4628      	mov	r0, r5
  402d8e:	608e      	str	r6, [r1, #8]
  402d90:	605a      	str	r2, [r3, #4]
  402d92:	f000 fb39 	bl	403408 <__malloc_unlock>
  402d96:	3408      	adds	r4, #8
  402d98:	4620      	mov	r0, r4
  402d9a:	b003      	add	sp, #12
  402d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402da0:	4423      	add	r3, r4
  402da2:	4628      	mov	r0, r5
  402da4:	685a      	ldr	r2, [r3, #4]
  402da6:	f042 0201 	orr.w	r2, r2, #1
  402daa:	605a      	str	r2, [r3, #4]
  402dac:	f000 fb2c 	bl	403408 <__malloc_unlock>
  402db0:	3408      	adds	r4, #8
  402db2:	4620      	mov	r0, r4
  402db4:	b003      	add	sp, #12
  402db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dba:	68bc      	ldr	r4, [r7, #8]
  402dbc:	6863      	ldr	r3, [r4, #4]
  402dbe:	f023 0803 	bic.w	r8, r3, #3
  402dc2:	45b0      	cmp	r8, r6
  402dc4:	d304      	bcc.n	402dd0 <_malloc_r+0x200>
  402dc6:	eba8 0306 	sub.w	r3, r8, r6
  402dca:	2b0f      	cmp	r3, #15
  402dcc:	f300 8085 	bgt.w	402eda <_malloc_r+0x30a>
  402dd0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402f2c <_malloc_r+0x35c>
  402dd4:	4b50      	ldr	r3, [pc, #320]	; (402f18 <_malloc_r+0x348>)
  402dd6:	f8d9 2000 	ldr.w	r2, [r9]
  402dda:	681b      	ldr	r3, [r3, #0]
  402ddc:	3201      	adds	r2, #1
  402dde:	4433      	add	r3, r6
  402de0:	eb04 0a08 	add.w	sl, r4, r8
  402de4:	f000 8155 	beq.w	403092 <_malloc_r+0x4c2>
  402de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402dec:	330f      	adds	r3, #15
  402dee:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402df2:	f02b 0b0f 	bic.w	fp, fp, #15
  402df6:	4659      	mov	r1, fp
  402df8:	4628      	mov	r0, r5
  402dfa:	f000 fcb1 	bl	403760 <_sbrk_r>
  402dfe:	1c41      	adds	r1, r0, #1
  402e00:	4602      	mov	r2, r0
  402e02:	f000 80fc 	beq.w	402ffe <_malloc_r+0x42e>
  402e06:	4582      	cmp	sl, r0
  402e08:	f200 80f7 	bhi.w	402ffa <_malloc_r+0x42a>
  402e0c:	4b43      	ldr	r3, [pc, #268]	; (402f1c <_malloc_r+0x34c>)
  402e0e:	6819      	ldr	r1, [r3, #0]
  402e10:	4459      	add	r1, fp
  402e12:	6019      	str	r1, [r3, #0]
  402e14:	f000 814d 	beq.w	4030b2 <_malloc_r+0x4e2>
  402e18:	f8d9 0000 	ldr.w	r0, [r9]
  402e1c:	3001      	adds	r0, #1
  402e1e:	bf1b      	ittet	ne
  402e20:	eba2 0a0a 	subne.w	sl, r2, sl
  402e24:	4451      	addne	r1, sl
  402e26:	f8c9 2000 	streq.w	r2, [r9]
  402e2a:	6019      	strne	r1, [r3, #0]
  402e2c:	f012 0107 	ands.w	r1, r2, #7
  402e30:	f000 8115 	beq.w	40305e <_malloc_r+0x48e>
  402e34:	f1c1 0008 	rsb	r0, r1, #8
  402e38:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402e3c:	4402      	add	r2, r0
  402e3e:	3108      	adds	r1, #8
  402e40:	eb02 090b 	add.w	r9, r2, fp
  402e44:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402e48:	eba1 0909 	sub.w	r9, r1, r9
  402e4c:	4649      	mov	r1, r9
  402e4e:	4628      	mov	r0, r5
  402e50:	9301      	str	r3, [sp, #4]
  402e52:	9200      	str	r2, [sp, #0]
  402e54:	f000 fc84 	bl	403760 <_sbrk_r>
  402e58:	1c43      	adds	r3, r0, #1
  402e5a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402e5e:	f000 8143 	beq.w	4030e8 <_malloc_r+0x518>
  402e62:	1a80      	subs	r0, r0, r2
  402e64:	4448      	add	r0, r9
  402e66:	f040 0001 	orr.w	r0, r0, #1
  402e6a:	6819      	ldr	r1, [r3, #0]
  402e6c:	60ba      	str	r2, [r7, #8]
  402e6e:	4449      	add	r1, r9
  402e70:	42bc      	cmp	r4, r7
  402e72:	6050      	str	r0, [r2, #4]
  402e74:	6019      	str	r1, [r3, #0]
  402e76:	d017      	beq.n	402ea8 <_malloc_r+0x2d8>
  402e78:	f1b8 0f0f 	cmp.w	r8, #15
  402e7c:	f240 80fb 	bls.w	403076 <_malloc_r+0x4a6>
  402e80:	6860      	ldr	r0, [r4, #4]
  402e82:	f1a8 020c 	sub.w	r2, r8, #12
  402e86:	f022 0207 	bic.w	r2, r2, #7
  402e8a:	eb04 0e02 	add.w	lr, r4, r2
  402e8e:	f000 0001 	and.w	r0, r0, #1
  402e92:	f04f 0c05 	mov.w	ip, #5
  402e96:	4310      	orrs	r0, r2
  402e98:	2a0f      	cmp	r2, #15
  402e9a:	6060      	str	r0, [r4, #4]
  402e9c:	f8ce c004 	str.w	ip, [lr, #4]
  402ea0:	f8ce c008 	str.w	ip, [lr, #8]
  402ea4:	f200 8117 	bhi.w	4030d6 <_malloc_r+0x506>
  402ea8:	4b1d      	ldr	r3, [pc, #116]	; (402f20 <_malloc_r+0x350>)
  402eaa:	68bc      	ldr	r4, [r7, #8]
  402eac:	681a      	ldr	r2, [r3, #0]
  402eae:	4291      	cmp	r1, r2
  402eb0:	bf88      	it	hi
  402eb2:	6019      	strhi	r1, [r3, #0]
  402eb4:	4b1b      	ldr	r3, [pc, #108]	; (402f24 <_malloc_r+0x354>)
  402eb6:	681a      	ldr	r2, [r3, #0]
  402eb8:	4291      	cmp	r1, r2
  402eba:	6862      	ldr	r2, [r4, #4]
  402ebc:	bf88      	it	hi
  402ebe:	6019      	strhi	r1, [r3, #0]
  402ec0:	f022 0203 	bic.w	r2, r2, #3
  402ec4:	4296      	cmp	r6, r2
  402ec6:	eba2 0306 	sub.w	r3, r2, r6
  402eca:	d801      	bhi.n	402ed0 <_malloc_r+0x300>
  402ecc:	2b0f      	cmp	r3, #15
  402ece:	dc04      	bgt.n	402eda <_malloc_r+0x30a>
  402ed0:	4628      	mov	r0, r5
  402ed2:	f000 fa99 	bl	403408 <__malloc_unlock>
  402ed6:	2400      	movs	r4, #0
  402ed8:	e740      	b.n	402d5c <_malloc_r+0x18c>
  402eda:	19a2      	adds	r2, r4, r6
  402edc:	f043 0301 	orr.w	r3, r3, #1
  402ee0:	f046 0601 	orr.w	r6, r6, #1
  402ee4:	6066      	str	r6, [r4, #4]
  402ee6:	4628      	mov	r0, r5
  402ee8:	60ba      	str	r2, [r7, #8]
  402eea:	6053      	str	r3, [r2, #4]
  402eec:	f000 fa8c 	bl	403408 <__malloc_unlock>
  402ef0:	3408      	adds	r4, #8
  402ef2:	4620      	mov	r0, r4
  402ef4:	b003      	add	sp, #12
  402ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402efa:	2b14      	cmp	r3, #20
  402efc:	d971      	bls.n	402fe2 <_malloc_r+0x412>
  402efe:	2b54      	cmp	r3, #84	; 0x54
  402f00:	f200 80a3 	bhi.w	40304a <_malloc_r+0x47a>
  402f04:	0b33      	lsrs	r3, r6, #12
  402f06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402f0a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402f0e:	00c3      	lsls	r3, r0, #3
  402f10:	e680      	b.n	402c14 <_malloc_r+0x44>
  402f12:	bf00      	nop
  402f14:	204005a8 	.word	0x204005a8
  402f18:	20400a80 	.word	0x20400a80
  402f1c:	20400a50 	.word	0x20400a50
  402f20:	20400a78 	.word	0x20400a78
  402f24:	20400a7c 	.word	0x20400a7c
  402f28:	204005b0 	.word	0x204005b0
  402f2c:	204009b0 	.word	0x204009b0
  402f30:	0a5a      	lsrs	r2, r3, #9
  402f32:	2a04      	cmp	r2, #4
  402f34:	d95b      	bls.n	402fee <_malloc_r+0x41e>
  402f36:	2a14      	cmp	r2, #20
  402f38:	f200 80ae 	bhi.w	403098 <_malloc_r+0x4c8>
  402f3c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402f40:	00c9      	lsls	r1, r1, #3
  402f42:	325b      	adds	r2, #91	; 0x5b
  402f44:	eb07 0c01 	add.w	ip, r7, r1
  402f48:	5879      	ldr	r1, [r7, r1]
  402f4a:	f1ac 0c08 	sub.w	ip, ip, #8
  402f4e:	458c      	cmp	ip, r1
  402f50:	f000 8088 	beq.w	403064 <_malloc_r+0x494>
  402f54:	684a      	ldr	r2, [r1, #4]
  402f56:	f022 0203 	bic.w	r2, r2, #3
  402f5a:	4293      	cmp	r3, r2
  402f5c:	d273      	bcs.n	403046 <_malloc_r+0x476>
  402f5e:	6889      	ldr	r1, [r1, #8]
  402f60:	458c      	cmp	ip, r1
  402f62:	d1f7      	bne.n	402f54 <_malloc_r+0x384>
  402f64:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402f68:	687b      	ldr	r3, [r7, #4]
  402f6a:	60e2      	str	r2, [r4, #12]
  402f6c:	f8c4 c008 	str.w	ip, [r4, #8]
  402f70:	6094      	str	r4, [r2, #8]
  402f72:	f8cc 400c 	str.w	r4, [ip, #12]
  402f76:	e68f      	b.n	402c98 <_malloc_r+0xc8>
  402f78:	19a1      	adds	r1, r4, r6
  402f7a:	f046 0c01 	orr.w	ip, r6, #1
  402f7e:	f042 0601 	orr.w	r6, r2, #1
  402f82:	f8c4 c004 	str.w	ip, [r4, #4]
  402f86:	4628      	mov	r0, r5
  402f88:	6179      	str	r1, [r7, #20]
  402f8a:	6139      	str	r1, [r7, #16]
  402f8c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402f90:	f8c1 e008 	str.w	lr, [r1, #8]
  402f94:	604e      	str	r6, [r1, #4]
  402f96:	50e2      	str	r2, [r4, r3]
  402f98:	f000 fa36 	bl	403408 <__malloc_unlock>
  402f9c:	3408      	adds	r4, #8
  402f9e:	e6dd      	b.n	402d5c <_malloc_r+0x18c>
  402fa0:	687b      	ldr	r3, [r7, #4]
  402fa2:	e679      	b.n	402c98 <_malloc_r+0xc8>
  402fa4:	f108 0801 	add.w	r8, r8, #1
  402fa8:	f018 0f03 	tst.w	r8, #3
  402fac:	f10c 0c08 	add.w	ip, ip, #8
  402fb0:	f47f ae85 	bne.w	402cbe <_malloc_r+0xee>
  402fb4:	e02d      	b.n	403012 <_malloc_r+0x442>
  402fb6:	68dc      	ldr	r4, [r3, #12]
  402fb8:	42a3      	cmp	r3, r4
  402fba:	bf08      	it	eq
  402fbc:	3002      	addeq	r0, #2
  402fbe:	f43f ae3e 	beq.w	402c3e <_malloc_r+0x6e>
  402fc2:	e6bb      	b.n	402d3c <_malloc_r+0x16c>
  402fc4:	4419      	add	r1, r3
  402fc6:	461c      	mov	r4, r3
  402fc8:	684a      	ldr	r2, [r1, #4]
  402fca:	68db      	ldr	r3, [r3, #12]
  402fcc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402fd0:	f042 0201 	orr.w	r2, r2, #1
  402fd4:	604a      	str	r2, [r1, #4]
  402fd6:	4628      	mov	r0, r5
  402fd8:	60f3      	str	r3, [r6, #12]
  402fda:	609e      	str	r6, [r3, #8]
  402fdc:	f000 fa14 	bl	403408 <__malloc_unlock>
  402fe0:	e6bc      	b.n	402d5c <_malloc_r+0x18c>
  402fe2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402fe6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402fea:	00c3      	lsls	r3, r0, #3
  402fec:	e612      	b.n	402c14 <_malloc_r+0x44>
  402fee:	099a      	lsrs	r2, r3, #6
  402ff0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402ff4:	00c9      	lsls	r1, r1, #3
  402ff6:	3238      	adds	r2, #56	; 0x38
  402ff8:	e7a4      	b.n	402f44 <_malloc_r+0x374>
  402ffa:	42bc      	cmp	r4, r7
  402ffc:	d054      	beq.n	4030a8 <_malloc_r+0x4d8>
  402ffe:	68bc      	ldr	r4, [r7, #8]
  403000:	6862      	ldr	r2, [r4, #4]
  403002:	f022 0203 	bic.w	r2, r2, #3
  403006:	e75d      	b.n	402ec4 <_malloc_r+0x2f4>
  403008:	f859 3908 	ldr.w	r3, [r9], #-8
  40300c:	4599      	cmp	r9, r3
  40300e:	f040 8086 	bne.w	40311e <_malloc_r+0x54e>
  403012:	f010 0f03 	tst.w	r0, #3
  403016:	f100 30ff 	add.w	r0, r0, #4294967295
  40301a:	d1f5      	bne.n	403008 <_malloc_r+0x438>
  40301c:	687b      	ldr	r3, [r7, #4]
  40301e:	ea23 0304 	bic.w	r3, r3, r4
  403022:	607b      	str	r3, [r7, #4]
  403024:	0064      	lsls	r4, r4, #1
  403026:	429c      	cmp	r4, r3
  403028:	f63f aec7 	bhi.w	402dba <_malloc_r+0x1ea>
  40302c:	2c00      	cmp	r4, #0
  40302e:	f43f aec4 	beq.w	402dba <_malloc_r+0x1ea>
  403032:	421c      	tst	r4, r3
  403034:	4640      	mov	r0, r8
  403036:	f47f ae3e 	bne.w	402cb6 <_malloc_r+0xe6>
  40303a:	0064      	lsls	r4, r4, #1
  40303c:	421c      	tst	r4, r3
  40303e:	f100 0004 	add.w	r0, r0, #4
  403042:	d0fa      	beq.n	40303a <_malloc_r+0x46a>
  403044:	e637      	b.n	402cb6 <_malloc_r+0xe6>
  403046:	468c      	mov	ip, r1
  403048:	e78c      	b.n	402f64 <_malloc_r+0x394>
  40304a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40304e:	d815      	bhi.n	40307c <_malloc_r+0x4ac>
  403050:	0bf3      	lsrs	r3, r6, #15
  403052:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403056:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40305a:	00c3      	lsls	r3, r0, #3
  40305c:	e5da      	b.n	402c14 <_malloc_r+0x44>
  40305e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403062:	e6ed      	b.n	402e40 <_malloc_r+0x270>
  403064:	687b      	ldr	r3, [r7, #4]
  403066:	1092      	asrs	r2, r2, #2
  403068:	2101      	movs	r1, #1
  40306a:	fa01 f202 	lsl.w	r2, r1, r2
  40306e:	4313      	orrs	r3, r2
  403070:	607b      	str	r3, [r7, #4]
  403072:	4662      	mov	r2, ip
  403074:	e779      	b.n	402f6a <_malloc_r+0x39a>
  403076:	2301      	movs	r3, #1
  403078:	6053      	str	r3, [r2, #4]
  40307a:	e729      	b.n	402ed0 <_malloc_r+0x300>
  40307c:	f240 5254 	movw	r2, #1364	; 0x554
  403080:	4293      	cmp	r3, r2
  403082:	d822      	bhi.n	4030ca <_malloc_r+0x4fa>
  403084:	0cb3      	lsrs	r3, r6, #18
  403086:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40308a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40308e:	00c3      	lsls	r3, r0, #3
  403090:	e5c0      	b.n	402c14 <_malloc_r+0x44>
  403092:	f103 0b10 	add.w	fp, r3, #16
  403096:	e6ae      	b.n	402df6 <_malloc_r+0x226>
  403098:	2a54      	cmp	r2, #84	; 0x54
  40309a:	d829      	bhi.n	4030f0 <_malloc_r+0x520>
  40309c:	0b1a      	lsrs	r2, r3, #12
  40309e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4030a2:	00c9      	lsls	r1, r1, #3
  4030a4:	326e      	adds	r2, #110	; 0x6e
  4030a6:	e74d      	b.n	402f44 <_malloc_r+0x374>
  4030a8:	4b20      	ldr	r3, [pc, #128]	; (40312c <_malloc_r+0x55c>)
  4030aa:	6819      	ldr	r1, [r3, #0]
  4030ac:	4459      	add	r1, fp
  4030ae:	6019      	str	r1, [r3, #0]
  4030b0:	e6b2      	b.n	402e18 <_malloc_r+0x248>
  4030b2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4030b6:	2800      	cmp	r0, #0
  4030b8:	f47f aeae 	bne.w	402e18 <_malloc_r+0x248>
  4030bc:	eb08 030b 	add.w	r3, r8, fp
  4030c0:	68ba      	ldr	r2, [r7, #8]
  4030c2:	f043 0301 	orr.w	r3, r3, #1
  4030c6:	6053      	str	r3, [r2, #4]
  4030c8:	e6ee      	b.n	402ea8 <_malloc_r+0x2d8>
  4030ca:	207f      	movs	r0, #127	; 0x7f
  4030cc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4030d0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4030d4:	e59e      	b.n	402c14 <_malloc_r+0x44>
  4030d6:	f104 0108 	add.w	r1, r4, #8
  4030da:	4628      	mov	r0, r5
  4030dc:	9300      	str	r3, [sp, #0]
  4030de:	f7ff fa59 	bl	402594 <_free_r>
  4030e2:	9b00      	ldr	r3, [sp, #0]
  4030e4:	6819      	ldr	r1, [r3, #0]
  4030e6:	e6df      	b.n	402ea8 <_malloc_r+0x2d8>
  4030e8:	2001      	movs	r0, #1
  4030ea:	f04f 0900 	mov.w	r9, #0
  4030ee:	e6bc      	b.n	402e6a <_malloc_r+0x29a>
  4030f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4030f4:	d805      	bhi.n	403102 <_malloc_r+0x532>
  4030f6:	0bda      	lsrs	r2, r3, #15
  4030f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4030fc:	00c9      	lsls	r1, r1, #3
  4030fe:	3277      	adds	r2, #119	; 0x77
  403100:	e720      	b.n	402f44 <_malloc_r+0x374>
  403102:	f240 5154 	movw	r1, #1364	; 0x554
  403106:	428a      	cmp	r2, r1
  403108:	d805      	bhi.n	403116 <_malloc_r+0x546>
  40310a:	0c9a      	lsrs	r2, r3, #18
  40310c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403110:	00c9      	lsls	r1, r1, #3
  403112:	327c      	adds	r2, #124	; 0x7c
  403114:	e716      	b.n	402f44 <_malloc_r+0x374>
  403116:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40311a:	227e      	movs	r2, #126	; 0x7e
  40311c:	e712      	b.n	402f44 <_malloc_r+0x374>
  40311e:	687b      	ldr	r3, [r7, #4]
  403120:	e780      	b.n	403024 <_malloc_r+0x454>
  403122:	08f0      	lsrs	r0, r6, #3
  403124:	f106 0308 	add.w	r3, r6, #8
  403128:	e600      	b.n	402d2c <_malloc_r+0x15c>
  40312a:	bf00      	nop
  40312c:	20400a50 	.word	0x20400a50

00403130 <__ascii_mbtowc>:
  403130:	b082      	sub	sp, #8
  403132:	b149      	cbz	r1, 403148 <__ascii_mbtowc+0x18>
  403134:	b15a      	cbz	r2, 40314e <__ascii_mbtowc+0x1e>
  403136:	b16b      	cbz	r3, 403154 <__ascii_mbtowc+0x24>
  403138:	7813      	ldrb	r3, [r2, #0]
  40313a:	600b      	str	r3, [r1, #0]
  40313c:	7812      	ldrb	r2, [r2, #0]
  40313e:	1c10      	adds	r0, r2, #0
  403140:	bf18      	it	ne
  403142:	2001      	movne	r0, #1
  403144:	b002      	add	sp, #8
  403146:	4770      	bx	lr
  403148:	a901      	add	r1, sp, #4
  40314a:	2a00      	cmp	r2, #0
  40314c:	d1f3      	bne.n	403136 <__ascii_mbtowc+0x6>
  40314e:	4610      	mov	r0, r2
  403150:	b002      	add	sp, #8
  403152:	4770      	bx	lr
  403154:	f06f 0001 	mvn.w	r0, #1
  403158:	e7f4      	b.n	403144 <__ascii_mbtowc+0x14>
  40315a:	bf00      	nop
  40315c:	0000      	movs	r0, r0
	...

00403160 <memchr>:
  403160:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403164:	2a10      	cmp	r2, #16
  403166:	db2b      	blt.n	4031c0 <memchr+0x60>
  403168:	f010 0f07 	tst.w	r0, #7
  40316c:	d008      	beq.n	403180 <memchr+0x20>
  40316e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403172:	3a01      	subs	r2, #1
  403174:	428b      	cmp	r3, r1
  403176:	d02d      	beq.n	4031d4 <memchr+0x74>
  403178:	f010 0f07 	tst.w	r0, #7
  40317c:	b342      	cbz	r2, 4031d0 <memchr+0x70>
  40317e:	d1f6      	bne.n	40316e <memchr+0xe>
  403180:	b4f0      	push	{r4, r5, r6, r7}
  403182:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403186:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40318a:	f022 0407 	bic.w	r4, r2, #7
  40318e:	f07f 0700 	mvns.w	r7, #0
  403192:	2300      	movs	r3, #0
  403194:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403198:	3c08      	subs	r4, #8
  40319a:	ea85 0501 	eor.w	r5, r5, r1
  40319e:	ea86 0601 	eor.w	r6, r6, r1
  4031a2:	fa85 f547 	uadd8	r5, r5, r7
  4031a6:	faa3 f587 	sel	r5, r3, r7
  4031aa:	fa86 f647 	uadd8	r6, r6, r7
  4031ae:	faa5 f687 	sel	r6, r5, r7
  4031b2:	b98e      	cbnz	r6, 4031d8 <memchr+0x78>
  4031b4:	d1ee      	bne.n	403194 <memchr+0x34>
  4031b6:	bcf0      	pop	{r4, r5, r6, r7}
  4031b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4031bc:	f002 0207 	and.w	r2, r2, #7
  4031c0:	b132      	cbz	r2, 4031d0 <memchr+0x70>
  4031c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4031c6:	3a01      	subs	r2, #1
  4031c8:	ea83 0301 	eor.w	r3, r3, r1
  4031cc:	b113      	cbz	r3, 4031d4 <memchr+0x74>
  4031ce:	d1f8      	bne.n	4031c2 <memchr+0x62>
  4031d0:	2000      	movs	r0, #0
  4031d2:	4770      	bx	lr
  4031d4:	3801      	subs	r0, #1
  4031d6:	4770      	bx	lr
  4031d8:	2d00      	cmp	r5, #0
  4031da:	bf06      	itte	eq
  4031dc:	4635      	moveq	r5, r6
  4031de:	3803      	subeq	r0, #3
  4031e0:	3807      	subne	r0, #7
  4031e2:	f015 0f01 	tst.w	r5, #1
  4031e6:	d107      	bne.n	4031f8 <memchr+0x98>
  4031e8:	3001      	adds	r0, #1
  4031ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4031ee:	bf02      	ittt	eq
  4031f0:	3001      	addeq	r0, #1
  4031f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4031f6:	3001      	addeq	r0, #1
  4031f8:	bcf0      	pop	{r4, r5, r6, r7}
  4031fa:	3801      	subs	r0, #1
  4031fc:	4770      	bx	lr
  4031fe:	bf00      	nop

00403200 <memcpy>:
  403200:	4684      	mov	ip, r0
  403202:	ea41 0300 	orr.w	r3, r1, r0
  403206:	f013 0303 	ands.w	r3, r3, #3
  40320a:	d16d      	bne.n	4032e8 <memcpy+0xe8>
  40320c:	3a40      	subs	r2, #64	; 0x40
  40320e:	d341      	bcc.n	403294 <memcpy+0x94>
  403210:	f851 3b04 	ldr.w	r3, [r1], #4
  403214:	f840 3b04 	str.w	r3, [r0], #4
  403218:	f851 3b04 	ldr.w	r3, [r1], #4
  40321c:	f840 3b04 	str.w	r3, [r0], #4
  403220:	f851 3b04 	ldr.w	r3, [r1], #4
  403224:	f840 3b04 	str.w	r3, [r0], #4
  403228:	f851 3b04 	ldr.w	r3, [r1], #4
  40322c:	f840 3b04 	str.w	r3, [r0], #4
  403230:	f851 3b04 	ldr.w	r3, [r1], #4
  403234:	f840 3b04 	str.w	r3, [r0], #4
  403238:	f851 3b04 	ldr.w	r3, [r1], #4
  40323c:	f840 3b04 	str.w	r3, [r0], #4
  403240:	f851 3b04 	ldr.w	r3, [r1], #4
  403244:	f840 3b04 	str.w	r3, [r0], #4
  403248:	f851 3b04 	ldr.w	r3, [r1], #4
  40324c:	f840 3b04 	str.w	r3, [r0], #4
  403250:	f851 3b04 	ldr.w	r3, [r1], #4
  403254:	f840 3b04 	str.w	r3, [r0], #4
  403258:	f851 3b04 	ldr.w	r3, [r1], #4
  40325c:	f840 3b04 	str.w	r3, [r0], #4
  403260:	f851 3b04 	ldr.w	r3, [r1], #4
  403264:	f840 3b04 	str.w	r3, [r0], #4
  403268:	f851 3b04 	ldr.w	r3, [r1], #4
  40326c:	f840 3b04 	str.w	r3, [r0], #4
  403270:	f851 3b04 	ldr.w	r3, [r1], #4
  403274:	f840 3b04 	str.w	r3, [r0], #4
  403278:	f851 3b04 	ldr.w	r3, [r1], #4
  40327c:	f840 3b04 	str.w	r3, [r0], #4
  403280:	f851 3b04 	ldr.w	r3, [r1], #4
  403284:	f840 3b04 	str.w	r3, [r0], #4
  403288:	f851 3b04 	ldr.w	r3, [r1], #4
  40328c:	f840 3b04 	str.w	r3, [r0], #4
  403290:	3a40      	subs	r2, #64	; 0x40
  403292:	d2bd      	bcs.n	403210 <memcpy+0x10>
  403294:	3230      	adds	r2, #48	; 0x30
  403296:	d311      	bcc.n	4032bc <memcpy+0xbc>
  403298:	f851 3b04 	ldr.w	r3, [r1], #4
  40329c:	f840 3b04 	str.w	r3, [r0], #4
  4032a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032a4:	f840 3b04 	str.w	r3, [r0], #4
  4032a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032ac:	f840 3b04 	str.w	r3, [r0], #4
  4032b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032b4:	f840 3b04 	str.w	r3, [r0], #4
  4032b8:	3a10      	subs	r2, #16
  4032ba:	d2ed      	bcs.n	403298 <memcpy+0x98>
  4032bc:	320c      	adds	r2, #12
  4032be:	d305      	bcc.n	4032cc <memcpy+0xcc>
  4032c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032c4:	f840 3b04 	str.w	r3, [r0], #4
  4032c8:	3a04      	subs	r2, #4
  4032ca:	d2f9      	bcs.n	4032c0 <memcpy+0xc0>
  4032cc:	3204      	adds	r2, #4
  4032ce:	d008      	beq.n	4032e2 <memcpy+0xe2>
  4032d0:	07d2      	lsls	r2, r2, #31
  4032d2:	bf1c      	itt	ne
  4032d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4032d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4032dc:	d301      	bcc.n	4032e2 <memcpy+0xe2>
  4032de:	880b      	ldrh	r3, [r1, #0]
  4032e0:	8003      	strh	r3, [r0, #0]
  4032e2:	4660      	mov	r0, ip
  4032e4:	4770      	bx	lr
  4032e6:	bf00      	nop
  4032e8:	2a08      	cmp	r2, #8
  4032ea:	d313      	bcc.n	403314 <memcpy+0x114>
  4032ec:	078b      	lsls	r3, r1, #30
  4032ee:	d08d      	beq.n	40320c <memcpy+0xc>
  4032f0:	f010 0303 	ands.w	r3, r0, #3
  4032f4:	d08a      	beq.n	40320c <memcpy+0xc>
  4032f6:	f1c3 0304 	rsb	r3, r3, #4
  4032fa:	1ad2      	subs	r2, r2, r3
  4032fc:	07db      	lsls	r3, r3, #31
  4032fe:	bf1c      	itt	ne
  403300:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403304:	f800 3b01 	strbne.w	r3, [r0], #1
  403308:	d380      	bcc.n	40320c <memcpy+0xc>
  40330a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40330e:	f820 3b02 	strh.w	r3, [r0], #2
  403312:	e77b      	b.n	40320c <memcpy+0xc>
  403314:	3a04      	subs	r2, #4
  403316:	d3d9      	bcc.n	4032cc <memcpy+0xcc>
  403318:	3a01      	subs	r2, #1
  40331a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40331e:	f800 3b01 	strb.w	r3, [r0], #1
  403322:	d2f9      	bcs.n	403318 <memcpy+0x118>
  403324:	780b      	ldrb	r3, [r1, #0]
  403326:	7003      	strb	r3, [r0, #0]
  403328:	784b      	ldrb	r3, [r1, #1]
  40332a:	7043      	strb	r3, [r0, #1]
  40332c:	788b      	ldrb	r3, [r1, #2]
  40332e:	7083      	strb	r3, [r0, #2]
  403330:	4660      	mov	r0, ip
  403332:	4770      	bx	lr

00403334 <memmove>:
  403334:	4288      	cmp	r0, r1
  403336:	b5f0      	push	{r4, r5, r6, r7, lr}
  403338:	d90d      	bls.n	403356 <memmove+0x22>
  40333a:	188b      	adds	r3, r1, r2
  40333c:	4298      	cmp	r0, r3
  40333e:	d20a      	bcs.n	403356 <memmove+0x22>
  403340:	1884      	adds	r4, r0, r2
  403342:	2a00      	cmp	r2, #0
  403344:	d051      	beq.n	4033ea <memmove+0xb6>
  403346:	4622      	mov	r2, r4
  403348:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40334c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403350:	4299      	cmp	r1, r3
  403352:	d1f9      	bne.n	403348 <memmove+0x14>
  403354:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403356:	2a0f      	cmp	r2, #15
  403358:	d948      	bls.n	4033ec <memmove+0xb8>
  40335a:	ea41 0300 	orr.w	r3, r1, r0
  40335e:	079b      	lsls	r3, r3, #30
  403360:	d146      	bne.n	4033f0 <memmove+0xbc>
  403362:	f100 0410 	add.w	r4, r0, #16
  403366:	f101 0310 	add.w	r3, r1, #16
  40336a:	4615      	mov	r5, r2
  40336c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403370:	f844 6c10 	str.w	r6, [r4, #-16]
  403374:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403378:	f844 6c0c 	str.w	r6, [r4, #-12]
  40337c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403380:	f844 6c08 	str.w	r6, [r4, #-8]
  403384:	3d10      	subs	r5, #16
  403386:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40338a:	f844 6c04 	str.w	r6, [r4, #-4]
  40338e:	2d0f      	cmp	r5, #15
  403390:	f103 0310 	add.w	r3, r3, #16
  403394:	f104 0410 	add.w	r4, r4, #16
  403398:	d8e8      	bhi.n	40336c <memmove+0x38>
  40339a:	f1a2 0310 	sub.w	r3, r2, #16
  40339e:	f023 030f 	bic.w	r3, r3, #15
  4033a2:	f002 0e0f 	and.w	lr, r2, #15
  4033a6:	3310      	adds	r3, #16
  4033a8:	f1be 0f03 	cmp.w	lr, #3
  4033ac:	4419      	add	r1, r3
  4033ae:	4403      	add	r3, r0
  4033b0:	d921      	bls.n	4033f6 <memmove+0xc2>
  4033b2:	1f1e      	subs	r6, r3, #4
  4033b4:	460d      	mov	r5, r1
  4033b6:	4674      	mov	r4, lr
  4033b8:	3c04      	subs	r4, #4
  4033ba:	f855 7b04 	ldr.w	r7, [r5], #4
  4033be:	f846 7f04 	str.w	r7, [r6, #4]!
  4033c2:	2c03      	cmp	r4, #3
  4033c4:	d8f8      	bhi.n	4033b8 <memmove+0x84>
  4033c6:	f1ae 0404 	sub.w	r4, lr, #4
  4033ca:	f024 0403 	bic.w	r4, r4, #3
  4033ce:	3404      	adds	r4, #4
  4033d0:	4421      	add	r1, r4
  4033d2:	4423      	add	r3, r4
  4033d4:	f002 0203 	and.w	r2, r2, #3
  4033d8:	b162      	cbz	r2, 4033f4 <memmove+0xc0>
  4033da:	3b01      	subs	r3, #1
  4033dc:	440a      	add	r2, r1
  4033de:	f811 4b01 	ldrb.w	r4, [r1], #1
  4033e2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4033e6:	428a      	cmp	r2, r1
  4033e8:	d1f9      	bne.n	4033de <memmove+0xaa>
  4033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033ec:	4603      	mov	r3, r0
  4033ee:	e7f3      	b.n	4033d8 <memmove+0xa4>
  4033f0:	4603      	mov	r3, r0
  4033f2:	e7f2      	b.n	4033da <memmove+0xa6>
  4033f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033f6:	4672      	mov	r2, lr
  4033f8:	e7ee      	b.n	4033d8 <memmove+0xa4>
  4033fa:	bf00      	nop

004033fc <__malloc_lock>:
  4033fc:	4801      	ldr	r0, [pc, #4]	; (403404 <__malloc_lock+0x8>)
  4033fe:	f7ff bb63 	b.w	402ac8 <__retarget_lock_acquire_recursive>
  403402:	bf00      	nop
  403404:	20400aa4 	.word	0x20400aa4

00403408 <__malloc_unlock>:
  403408:	4801      	ldr	r0, [pc, #4]	; (403410 <__malloc_unlock+0x8>)
  40340a:	f7ff bb5f 	b.w	402acc <__retarget_lock_release_recursive>
  40340e:	bf00      	nop
  403410:	20400aa4 	.word	0x20400aa4

00403414 <_realloc_r>:
  403414:	2900      	cmp	r1, #0
  403416:	f000 8095 	beq.w	403544 <_realloc_r+0x130>
  40341a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40341e:	460d      	mov	r5, r1
  403420:	4616      	mov	r6, r2
  403422:	b083      	sub	sp, #12
  403424:	4680      	mov	r8, r0
  403426:	f106 070b 	add.w	r7, r6, #11
  40342a:	f7ff ffe7 	bl	4033fc <__malloc_lock>
  40342e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403432:	2f16      	cmp	r7, #22
  403434:	f02e 0403 	bic.w	r4, lr, #3
  403438:	f1a5 0908 	sub.w	r9, r5, #8
  40343c:	d83c      	bhi.n	4034b8 <_realloc_r+0xa4>
  40343e:	2210      	movs	r2, #16
  403440:	4617      	mov	r7, r2
  403442:	42be      	cmp	r6, r7
  403444:	d83d      	bhi.n	4034c2 <_realloc_r+0xae>
  403446:	4294      	cmp	r4, r2
  403448:	da43      	bge.n	4034d2 <_realloc_r+0xbe>
  40344a:	4bc4      	ldr	r3, [pc, #784]	; (40375c <_realloc_r+0x348>)
  40344c:	6899      	ldr	r1, [r3, #8]
  40344e:	eb09 0004 	add.w	r0, r9, r4
  403452:	4288      	cmp	r0, r1
  403454:	f000 80b4 	beq.w	4035c0 <_realloc_r+0x1ac>
  403458:	6843      	ldr	r3, [r0, #4]
  40345a:	f023 0101 	bic.w	r1, r3, #1
  40345e:	4401      	add	r1, r0
  403460:	6849      	ldr	r1, [r1, #4]
  403462:	07c9      	lsls	r1, r1, #31
  403464:	d54c      	bpl.n	403500 <_realloc_r+0xec>
  403466:	f01e 0f01 	tst.w	lr, #1
  40346a:	f000 809b 	beq.w	4035a4 <_realloc_r+0x190>
  40346e:	4631      	mov	r1, r6
  403470:	4640      	mov	r0, r8
  403472:	f7ff fbad 	bl	402bd0 <_malloc_r>
  403476:	4606      	mov	r6, r0
  403478:	2800      	cmp	r0, #0
  40347a:	d03a      	beq.n	4034f2 <_realloc_r+0xde>
  40347c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403480:	f023 0301 	bic.w	r3, r3, #1
  403484:	444b      	add	r3, r9
  403486:	f1a0 0208 	sub.w	r2, r0, #8
  40348a:	429a      	cmp	r2, r3
  40348c:	f000 8121 	beq.w	4036d2 <_realloc_r+0x2be>
  403490:	1f22      	subs	r2, r4, #4
  403492:	2a24      	cmp	r2, #36	; 0x24
  403494:	f200 8107 	bhi.w	4036a6 <_realloc_r+0x292>
  403498:	2a13      	cmp	r2, #19
  40349a:	f200 80db 	bhi.w	403654 <_realloc_r+0x240>
  40349e:	4603      	mov	r3, r0
  4034a0:	462a      	mov	r2, r5
  4034a2:	6811      	ldr	r1, [r2, #0]
  4034a4:	6019      	str	r1, [r3, #0]
  4034a6:	6851      	ldr	r1, [r2, #4]
  4034a8:	6059      	str	r1, [r3, #4]
  4034aa:	6892      	ldr	r2, [r2, #8]
  4034ac:	609a      	str	r2, [r3, #8]
  4034ae:	4629      	mov	r1, r5
  4034b0:	4640      	mov	r0, r8
  4034b2:	f7ff f86f 	bl	402594 <_free_r>
  4034b6:	e01c      	b.n	4034f2 <_realloc_r+0xde>
  4034b8:	f027 0707 	bic.w	r7, r7, #7
  4034bc:	2f00      	cmp	r7, #0
  4034be:	463a      	mov	r2, r7
  4034c0:	dabf      	bge.n	403442 <_realloc_r+0x2e>
  4034c2:	2600      	movs	r6, #0
  4034c4:	230c      	movs	r3, #12
  4034c6:	4630      	mov	r0, r6
  4034c8:	f8c8 3000 	str.w	r3, [r8]
  4034cc:	b003      	add	sp, #12
  4034ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034d2:	462e      	mov	r6, r5
  4034d4:	1be3      	subs	r3, r4, r7
  4034d6:	2b0f      	cmp	r3, #15
  4034d8:	d81e      	bhi.n	403518 <_realloc_r+0x104>
  4034da:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4034de:	f003 0301 	and.w	r3, r3, #1
  4034e2:	4323      	orrs	r3, r4
  4034e4:	444c      	add	r4, r9
  4034e6:	f8c9 3004 	str.w	r3, [r9, #4]
  4034ea:	6863      	ldr	r3, [r4, #4]
  4034ec:	f043 0301 	orr.w	r3, r3, #1
  4034f0:	6063      	str	r3, [r4, #4]
  4034f2:	4640      	mov	r0, r8
  4034f4:	f7ff ff88 	bl	403408 <__malloc_unlock>
  4034f8:	4630      	mov	r0, r6
  4034fa:	b003      	add	sp, #12
  4034fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403500:	f023 0303 	bic.w	r3, r3, #3
  403504:	18e1      	adds	r1, r4, r3
  403506:	4291      	cmp	r1, r2
  403508:	db1f      	blt.n	40354a <_realloc_r+0x136>
  40350a:	68c3      	ldr	r3, [r0, #12]
  40350c:	6882      	ldr	r2, [r0, #8]
  40350e:	462e      	mov	r6, r5
  403510:	60d3      	str	r3, [r2, #12]
  403512:	460c      	mov	r4, r1
  403514:	609a      	str	r2, [r3, #8]
  403516:	e7dd      	b.n	4034d4 <_realloc_r+0xc0>
  403518:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40351c:	eb09 0107 	add.w	r1, r9, r7
  403520:	f002 0201 	and.w	r2, r2, #1
  403524:	444c      	add	r4, r9
  403526:	f043 0301 	orr.w	r3, r3, #1
  40352a:	4317      	orrs	r7, r2
  40352c:	f8c9 7004 	str.w	r7, [r9, #4]
  403530:	604b      	str	r3, [r1, #4]
  403532:	6863      	ldr	r3, [r4, #4]
  403534:	f043 0301 	orr.w	r3, r3, #1
  403538:	3108      	adds	r1, #8
  40353a:	6063      	str	r3, [r4, #4]
  40353c:	4640      	mov	r0, r8
  40353e:	f7ff f829 	bl	402594 <_free_r>
  403542:	e7d6      	b.n	4034f2 <_realloc_r+0xde>
  403544:	4611      	mov	r1, r2
  403546:	f7ff bb43 	b.w	402bd0 <_malloc_r>
  40354a:	f01e 0f01 	tst.w	lr, #1
  40354e:	d18e      	bne.n	40346e <_realloc_r+0x5a>
  403550:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403554:	eba9 0a01 	sub.w	sl, r9, r1
  403558:	f8da 1004 	ldr.w	r1, [sl, #4]
  40355c:	f021 0103 	bic.w	r1, r1, #3
  403560:	440b      	add	r3, r1
  403562:	4423      	add	r3, r4
  403564:	4293      	cmp	r3, r2
  403566:	db25      	blt.n	4035b4 <_realloc_r+0x1a0>
  403568:	68c2      	ldr	r2, [r0, #12]
  40356a:	6881      	ldr	r1, [r0, #8]
  40356c:	4656      	mov	r6, sl
  40356e:	60ca      	str	r2, [r1, #12]
  403570:	6091      	str	r1, [r2, #8]
  403572:	f8da 100c 	ldr.w	r1, [sl, #12]
  403576:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40357a:	1f22      	subs	r2, r4, #4
  40357c:	2a24      	cmp	r2, #36	; 0x24
  40357e:	60c1      	str	r1, [r0, #12]
  403580:	6088      	str	r0, [r1, #8]
  403582:	f200 8094 	bhi.w	4036ae <_realloc_r+0x29a>
  403586:	2a13      	cmp	r2, #19
  403588:	d96f      	bls.n	40366a <_realloc_r+0x256>
  40358a:	6829      	ldr	r1, [r5, #0]
  40358c:	f8ca 1008 	str.w	r1, [sl, #8]
  403590:	6869      	ldr	r1, [r5, #4]
  403592:	f8ca 100c 	str.w	r1, [sl, #12]
  403596:	2a1b      	cmp	r2, #27
  403598:	f200 80a2 	bhi.w	4036e0 <_realloc_r+0x2cc>
  40359c:	3508      	adds	r5, #8
  40359e:	f10a 0210 	add.w	r2, sl, #16
  4035a2:	e063      	b.n	40366c <_realloc_r+0x258>
  4035a4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4035a8:	eba9 0a03 	sub.w	sl, r9, r3
  4035ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  4035b0:	f021 0103 	bic.w	r1, r1, #3
  4035b4:	1863      	adds	r3, r4, r1
  4035b6:	4293      	cmp	r3, r2
  4035b8:	f6ff af59 	blt.w	40346e <_realloc_r+0x5a>
  4035bc:	4656      	mov	r6, sl
  4035be:	e7d8      	b.n	403572 <_realloc_r+0x15e>
  4035c0:	6841      	ldr	r1, [r0, #4]
  4035c2:	f021 0b03 	bic.w	fp, r1, #3
  4035c6:	44a3      	add	fp, r4
  4035c8:	f107 0010 	add.w	r0, r7, #16
  4035cc:	4583      	cmp	fp, r0
  4035ce:	da56      	bge.n	40367e <_realloc_r+0x26a>
  4035d0:	f01e 0f01 	tst.w	lr, #1
  4035d4:	f47f af4b 	bne.w	40346e <_realloc_r+0x5a>
  4035d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4035dc:	eba9 0a01 	sub.w	sl, r9, r1
  4035e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4035e4:	f021 0103 	bic.w	r1, r1, #3
  4035e8:	448b      	add	fp, r1
  4035ea:	4558      	cmp	r0, fp
  4035ec:	dce2      	bgt.n	4035b4 <_realloc_r+0x1a0>
  4035ee:	4656      	mov	r6, sl
  4035f0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4035f4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4035f8:	1f22      	subs	r2, r4, #4
  4035fa:	2a24      	cmp	r2, #36	; 0x24
  4035fc:	60c1      	str	r1, [r0, #12]
  4035fe:	6088      	str	r0, [r1, #8]
  403600:	f200 808f 	bhi.w	403722 <_realloc_r+0x30e>
  403604:	2a13      	cmp	r2, #19
  403606:	f240 808a 	bls.w	40371e <_realloc_r+0x30a>
  40360a:	6829      	ldr	r1, [r5, #0]
  40360c:	f8ca 1008 	str.w	r1, [sl, #8]
  403610:	6869      	ldr	r1, [r5, #4]
  403612:	f8ca 100c 	str.w	r1, [sl, #12]
  403616:	2a1b      	cmp	r2, #27
  403618:	f200 808a 	bhi.w	403730 <_realloc_r+0x31c>
  40361c:	3508      	adds	r5, #8
  40361e:	f10a 0210 	add.w	r2, sl, #16
  403622:	6829      	ldr	r1, [r5, #0]
  403624:	6011      	str	r1, [r2, #0]
  403626:	6869      	ldr	r1, [r5, #4]
  403628:	6051      	str	r1, [r2, #4]
  40362a:	68a9      	ldr	r1, [r5, #8]
  40362c:	6091      	str	r1, [r2, #8]
  40362e:	eb0a 0107 	add.w	r1, sl, r7
  403632:	ebab 0207 	sub.w	r2, fp, r7
  403636:	f042 0201 	orr.w	r2, r2, #1
  40363a:	6099      	str	r1, [r3, #8]
  40363c:	604a      	str	r2, [r1, #4]
  40363e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403642:	f003 0301 	and.w	r3, r3, #1
  403646:	431f      	orrs	r7, r3
  403648:	4640      	mov	r0, r8
  40364a:	f8ca 7004 	str.w	r7, [sl, #4]
  40364e:	f7ff fedb 	bl	403408 <__malloc_unlock>
  403652:	e751      	b.n	4034f8 <_realloc_r+0xe4>
  403654:	682b      	ldr	r3, [r5, #0]
  403656:	6003      	str	r3, [r0, #0]
  403658:	686b      	ldr	r3, [r5, #4]
  40365a:	6043      	str	r3, [r0, #4]
  40365c:	2a1b      	cmp	r2, #27
  40365e:	d82d      	bhi.n	4036bc <_realloc_r+0x2a8>
  403660:	f100 0308 	add.w	r3, r0, #8
  403664:	f105 0208 	add.w	r2, r5, #8
  403668:	e71b      	b.n	4034a2 <_realloc_r+0x8e>
  40366a:	4632      	mov	r2, r6
  40366c:	6829      	ldr	r1, [r5, #0]
  40366e:	6011      	str	r1, [r2, #0]
  403670:	6869      	ldr	r1, [r5, #4]
  403672:	6051      	str	r1, [r2, #4]
  403674:	68a9      	ldr	r1, [r5, #8]
  403676:	6091      	str	r1, [r2, #8]
  403678:	461c      	mov	r4, r3
  40367a:	46d1      	mov	r9, sl
  40367c:	e72a      	b.n	4034d4 <_realloc_r+0xc0>
  40367e:	eb09 0107 	add.w	r1, r9, r7
  403682:	ebab 0b07 	sub.w	fp, fp, r7
  403686:	f04b 0201 	orr.w	r2, fp, #1
  40368a:	6099      	str	r1, [r3, #8]
  40368c:	604a      	str	r2, [r1, #4]
  40368e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403692:	f003 0301 	and.w	r3, r3, #1
  403696:	431f      	orrs	r7, r3
  403698:	4640      	mov	r0, r8
  40369a:	f845 7c04 	str.w	r7, [r5, #-4]
  40369e:	f7ff feb3 	bl	403408 <__malloc_unlock>
  4036a2:	462e      	mov	r6, r5
  4036a4:	e728      	b.n	4034f8 <_realloc_r+0xe4>
  4036a6:	4629      	mov	r1, r5
  4036a8:	f7ff fe44 	bl	403334 <memmove>
  4036ac:	e6ff      	b.n	4034ae <_realloc_r+0x9a>
  4036ae:	4629      	mov	r1, r5
  4036b0:	4630      	mov	r0, r6
  4036b2:	461c      	mov	r4, r3
  4036b4:	46d1      	mov	r9, sl
  4036b6:	f7ff fe3d 	bl	403334 <memmove>
  4036ba:	e70b      	b.n	4034d4 <_realloc_r+0xc0>
  4036bc:	68ab      	ldr	r3, [r5, #8]
  4036be:	6083      	str	r3, [r0, #8]
  4036c0:	68eb      	ldr	r3, [r5, #12]
  4036c2:	60c3      	str	r3, [r0, #12]
  4036c4:	2a24      	cmp	r2, #36	; 0x24
  4036c6:	d017      	beq.n	4036f8 <_realloc_r+0x2e4>
  4036c8:	f100 0310 	add.w	r3, r0, #16
  4036cc:	f105 0210 	add.w	r2, r5, #16
  4036d0:	e6e7      	b.n	4034a2 <_realloc_r+0x8e>
  4036d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4036d6:	f023 0303 	bic.w	r3, r3, #3
  4036da:	441c      	add	r4, r3
  4036dc:	462e      	mov	r6, r5
  4036de:	e6f9      	b.n	4034d4 <_realloc_r+0xc0>
  4036e0:	68a9      	ldr	r1, [r5, #8]
  4036e2:	f8ca 1010 	str.w	r1, [sl, #16]
  4036e6:	68e9      	ldr	r1, [r5, #12]
  4036e8:	f8ca 1014 	str.w	r1, [sl, #20]
  4036ec:	2a24      	cmp	r2, #36	; 0x24
  4036ee:	d00c      	beq.n	40370a <_realloc_r+0x2f6>
  4036f0:	3510      	adds	r5, #16
  4036f2:	f10a 0218 	add.w	r2, sl, #24
  4036f6:	e7b9      	b.n	40366c <_realloc_r+0x258>
  4036f8:	692b      	ldr	r3, [r5, #16]
  4036fa:	6103      	str	r3, [r0, #16]
  4036fc:	696b      	ldr	r3, [r5, #20]
  4036fe:	6143      	str	r3, [r0, #20]
  403700:	f105 0218 	add.w	r2, r5, #24
  403704:	f100 0318 	add.w	r3, r0, #24
  403708:	e6cb      	b.n	4034a2 <_realloc_r+0x8e>
  40370a:	692a      	ldr	r2, [r5, #16]
  40370c:	f8ca 2018 	str.w	r2, [sl, #24]
  403710:	696a      	ldr	r2, [r5, #20]
  403712:	f8ca 201c 	str.w	r2, [sl, #28]
  403716:	3518      	adds	r5, #24
  403718:	f10a 0220 	add.w	r2, sl, #32
  40371c:	e7a6      	b.n	40366c <_realloc_r+0x258>
  40371e:	4632      	mov	r2, r6
  403720:	e77f      	b.n	403622 <_realloc_r+0x20e>
  403722:	4629      	mov	r1, r5
  403724:	4630      	mov	r0, r6
  403726:	9301      	str	r3, [sp, #4]
  403728:	f7ff fe04 	bl	403334 <memmove>
  40372c:	9b01      	ldr	r3, [sp, #4]
  40372e:	e77e      	b.n	40362e <_realloc_r+0x21a>
  403730:	68a9      	ldr	r1, [r5, #8]
  403732:	f8ca 1010 	str.w	r1, [sl, #16]
  403736:	68e9      	ldr	r1, [r5, #12]
  403738:	f8ca 1014 	str.w	r1, [sl, #20]
  40373c:	2a24      	cmp	r2, #36	; 0x24
  40373e:	d003      	beq.n	403748 <_realloc_r+0x334>
  403740:	3510      	adds	r5, #16
  403742:	f10a 0218 	add.w	r2, sl, #24
  403746:	e76c      	b.n	403622 <_realloc_r+0x20e>
  403748:	692a      	ldr	r2, [r5, #16]
  40374a:	f8ca 2018 	str.w	r2, [sl, #24]
  40374e:	696a      	ldr	r2, [r5, #20]
  403750:	f8ca 201c 	str.w	r2, [sl, #28]
  403754:	3518      	adds	r5, #24
  403756:	f10a 0220 	add.w	r2, sl, #32
  40375a:	e762      	b.n	403622 <_realloc_r+0x20e>
  40375c:	204005a8 	.word	0x204005a8

00403760 <_sbrk_r>:
  403760:	b538      	push	{r3, r4, r5, lr}
  403762:	4c07      	ldr	r4, [pc, #28]	; (403780 <_sbrk_r+0x20>)
  403764:	2300      	movs	r3, #0
  403766:	4605      	mov	r5, r0
  403768:	4608      	mov	r0, r1
  40376a:	6023      	str	r3, [r4, #0]
  40376c:	f7fd f9aa 	bl	400ac4 <_sbrk>
  403770:	1c43      	adds	r3, r0, #1
  403772:	d000      	beq.n	403776 <_sbrk_r+0x16>
  403774:	bd38      	pop	{r3, r4, r5, pc}
  403776:	6823      	ldr	r3, [r4, #0]
  403778:	2b00      	cmp	r3, #0
  40377a:	d0fb      	beq.n	403774 <_sbrk_r+0x14>
  40377c:	602b      	str	r3, [r5, #0]
  40377e:	bd38      	pop	{r3, r4, r5, pc}
  403780:	20400ab8 	.word	0x20400ab8

00403784 <__sread>:
  403784:	b510      	push	{r4, lr}
  403786:	460c      	mov	r4, r1
  403788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40378c:	f000 f9f6 	bl	403b7c <_read_r>
  403790:	2800      	cmp	r0, #0
  403792:	db03      	blt.n	40379c <__sread+0x18>
  403794:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403796:	4403      	add	r3, r0
  403798:	6523      	str	r3, [r4, #80]	; 0x50
  40379a:	bd10      	pop	{r4, pc}
  40379c:	89a3      	ldrh	r3, [r4, #12]
  40379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4037a2:	81a3      	strh	r3, [r4, #12]
  4037a4:	bd10      	pop	{r4, pc}
  4037a6:	bf00      	nop

004037a8 <__swrite>:
  4037a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037ac:	4616      	mov	r6, r2
  4037ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4037b2:	461f      	mov	r7, r3
  4037b4:	05d3      	lsls	r3, r2, #23
  4037b6:	460c      	mov	r4, r1
  4037b8:	4605      	mov	r5, r0
  4037ba:	d507      	bpl.n	4037cc <__swrite+0x24>
  4037bc:	2200      	movs	r2, #0
  4037be:	2302      	movs	r3, #2
  4037c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037c4:	f000 f9c4 	bl	403b50 <_lseek_r>
  4037c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4037d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4037d4:	81a2      	strh	r2, [r4, #12]
  4037d6:	463b      	mov	r3, r7
  4037d8:	4632      	mov	r2, r6
  4037da:	4628      	mov	r0, r5
  4037dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4037e0:	f000 b8a4 	b.w	40392c <_write_r>

004037e4 <__sseek>:
  4037e4:	b510      	push	{r4, lr}
  4037e6:	460c      	mov	r4, r1
  4037e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037ec:	f000 f9b0 	bl	403b50 <_lseek_r>
  4037f0:	89a3      	ldrh	r3, [r4, #12]
  4037f2:	1c42      	adds	r2, r0, #1
  4037f4:	bf0e      	itee	eq
  4037f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4037fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4037fe:	6520      	strne	r0, [r4, #80]	; 0x50
  403800:	81a3      	strh	r3, [r4, #12]
  403802:	bd10      	pop	{r4, pc}

00403804 <__sclose>:
  403804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403808:	f000 b908 	b.w	403a1c <_close_r>

0040380c <__swbuf_r>:
  40380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40380e:	460d      	mov	r5, r1
  403810:	4614      	mov	r4, r2
  403812:	4606      	mov	r6, r0
  403814:	b110      	cbz	r0, 40381c <__swbuf_r+0x10>
  403816:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403818:	2b00      	cmp	r3, #0
  40381a:	d04b      	beq.n	4038b4 <__swbuf_r+0xa8>
  40381c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403820:	69a3      	ldr	r3, [r4, #24]
  403822:	60a3      	str	r3, [r4, #8]
  403824:	b291      	uxth	r1, r2
  403826:	0708      	lsls	r0, r1, #28
  403828:	d539      	bpl.n	40389e <__swbuf_r+0x92>
  40382a:	6923      	ldr	r3, [r4, #16]
  40382c:	2b00      	cmp	r3, #0
  40382e:	d036      	beq.n	40389e <__swbuf_r+0x92>
  403830:	b2ed      	uxtb	r5, r5
  403832:	0489      	lsls	r1, r1, #18
  403834:	462f      	mov	r7, r5
  403836:	d515      	bpl.n	403864 <__swbuf_r+0x58>
  403838:	6822      	ldr	r2, [r4, #0]
  40383a:	6961      	ldr	r1, [r4, #20]
  40383c:	1ad3      	subs	r3, r2, r3
  40383e:	428b      	cmp	r3, r1
  403840:	da1c      	bge.n	40387c <__swbuf_r+0x70>
  403842:	3301      	adds	r3, #1
  403844:	68a1      	ldr	r1, [r4, #8]
  403846:	1c50      	adds	r0, r2, #1
  403848:	3901      	subs	r1, #1
  40384a:	60a1      	str	r1, [r4, #8]
  40384c:	6020      	str	r0, [r4, #0]
  40384e:	7015      	strb	r5, [r2, #0]
  403850:	6962      	ldr	r2, [r4, #20]
  403852:	429a      	cmp	r2, r3
  403854:	d01a      	beq.n	40388c <__swbuf_r+0x80>
  403856:	89a3      	ldrh	r3, [r4, #12]
  403858:	07db      	lsls	r3, r3, #31
  40385a:	d501      	bpl.n	403860 <__swbuf_r+0x54>
  40385c:	2d0a      	cmp	r5, #10
  40385e:	d015      	beq.n	40388c <__swbuf_r+0x80>
  403860:	4638      	mov	r0, r7
  403862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403864:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403866:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40386a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40386e:	81a2      	strh	r2, [r4, #12]
  403870:	6822      	ldr	r2, [r4, #0]
  403872:	6661      	str	r1, [r4, #100]	; 0x64
  403874:	6961      	ldr	r1, [r4, #20]
  403876:	1ad3      	subs	r3, r2, r3
  403878:	428b      	cmp	r3, r1
  40387a:	dbe2      	blt.n	403842 <__swbuf_r+0x36>
  40387c:	4621      	mov	r1, r4
  40387e:	4630      	mov	r0, r6
  403880:	f7fe fd0a 	bl	402298 <_fflush_r>
  403884:	b940      	cbnz	r0, 403898 <__swbuf_r+0x8c>
  403886:	6822      	ldr	r2, [r4, #0]
  403888:	2301      	movs	r3, #1
  40388a:	e7db      	b.n	403844 <__swbuf_r+0x38>
  40388c:	4621      	mov	r1, r4
  40388e:	4630      	mov	r0, r6
  403890:	f7fe fd02 	bl	402298 <_fflush_r>
  403894:	2800      	cmp	r0, #0
  403896:	d0e3      	beq.n	403860 <__swbuf_r+0x54>
  403898:	f04f 37ff 	mov.w	r7, #4294967295
  40389c:	e7e0      	b.n	403860 <__swbuf_r+0x54>
  40389e:	4621      	mov	r1, r4
  4038a0:	4630      	mov	r0, r6
  4038a2:	f7fe fbe5 	bl	402070 <__swsetup_r>
  4038a6:	2800      	cmp	r0, #0
  4038a8:	d1f6      	bne.n	403898 <__swbuf_r+0x8c>
  4038aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4038ae:	6923      	ldr	r3, [r4, #16]
  4038b0:	b291      	uxth	r1, r2
  4038b2:	e7bd      	b.n	403830 <__swbuf_r+0x24>
  4038b4:	f7fe fd48 	bl	402348 <__sinit>
  4038b8:	e7b0      	b.n	40381c <__swbuf_r+0x10>
  4038ba:	bf00      	nop

004038bc <_wcrtomb_r>:
  4038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038be:	4606      	mov	r6, r0
  4038c0:	b085      	sub	sp, #20
  4038c2:	461f      	mov	r7, r3
  4038c4:	b189      	cbz	r1, 4038ea <_wcrtomb_r+0x2e>
  4038c6:	4c10      	ldr	r4, [pc, #64]	; (403908 <_wcrtomb_r+0x4c>)
  4038c8:	4d10      	ldr	r5, [pc, #64]	; (40390c <_wcrtomb_r+0x50>)
  4038ca:	6824      	ldr	r4, [r4, #0]
  4038cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4038ce:	2c00      	cmp	r4, #0
  4038d0:	bf08      	it	eq
  4038d2:	462c      	moveq	r4, r5
  4038d4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4038d8:	47a0      	blx	r4
  4038da:	1c43      	adds	r3, r0, #1
  4038dc:	d103      	bne.n	4038e6 <_wcrtomb_r+0x2a>
  4038de:	2200      	movs	r2, #0
  4038e0:	238a      	movs	r3, #138	; 0x8a
  4038e2:	603a      	str	r2, [r7, #0]
  4038e4:	6033      	str	r3, [r6, #0]
  4038e6:	b005      	add	sp, #20
  4038e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038ea:	460c      	mov	r4, r1
  4038ec:	4906      	ldr	r1, [pc, #24]	; (403908 <_wcrtomb_r+0x4c>)
  4038ee:	4a07      	ldr	r2, [pc, #28]	; (40390c <_wcrtomb_r+0x50>)
  4038f0:	6809      	ldr	r1, [r1, #0]
  4038f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4038f4:	2900      	cmp	r1, #0
  4038f6:	bf08      	it	eq
  4038f8:	4611      	moveq	r1, r2
  4038fa:	4622      	mov	r2, r4
  4038fc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403900:	a901      	add	r1, sp, #4
  403902:	47a0      	blx	r4
  403904:	e7e9      	b.n	4038da <_wcrtomb_r+0x1e>
  403906:	bf00      	nop
  403908:	20400008 	.word	0x20400008
  40390c:	2040043c 	.word	0x2040043c

00403910 <__ascii_wctomb>:
  403910:	b121      	cbz	r1, 40391c <__ascii_wctomb+0xc>
  403912:	2aff      	cmp	r2, #255	; 0xff
  403914:	d804      	bhi.n	403920 <__ascii_wctomb+0x10>
  403916:	700a      	strb	r2, [r1, #0]
  403918:	2001      	movs	r0, #1
  40391a:	4770      	bx	lr
  40391c:	4608      	mov	r0, r1
  40391e:	4770      	bx	lr
  403920:	238a      	movs	r3, #138	; 0x8a
  403922:	6003      	str	r3, [r0, #0]
  403924:	f04f 30ff 	mov.w	r0, #4294967295
  403928:	4770      	bx	lr
  40392a:	bf00      	nop

0040392c <_write_r>:
  40392c:	b570      	push	{r4, r5, r6, lr}
  40392e:	460d      	mov	r5, r1
  403930:	4c08      	ldr	r4, [pc, #32]	; (403954 <_write_r+0x28>)
  403932:	4611      	mov	r1, r2
  403934:	4606      	mov	r6, r0
  403936:	461a      	mov	r2, r3
  403938:	4628      	mov	r0, r5
  40393a:	2300      	movs	r3, #0
  40393c:	6023      	str	r3, [r4, #0]
  40393e:	f7fc fc9f 	bl	400280 <_write>
  403942:	1c43      	adds	r3, r0, #1
  403944:	d000      	beq.n	403948 <_write_r+0x1c>
  403946:	bd70      	pop	{r4, r5, r6, pc}
  403948:	6823      	ldr	r3, [r4, #0]
  40394a:	2b00      	cmp	r3, #0
  40394c:	d0fb      	beq.n	403946 <_write_r+0x1a>
  40394e:	6033      	str	r3, [r6, #0]
  403950:	bd70      	pop	{r4, r5, r6, pc}
  403952:	bf00      	nop
  403954:	20400ab8 	.word	0x20400ab8

00403958 <__register_exitproc>:
  403958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40395c:	4d2c      	ldr	r5, [pc, #176]	; (403a10 <__register_exitproc+0xb8>)
  40395e:	4606      	mov	r6, r0
  403960:	6828      	ldr	r0, [r5, #0]
  403962:	4698      	mov	r8, r3
  403964:	460f      	mov	r7, r1
  403966:	4691      	mov	r9, r2
  403968:	f7ff f8ae 	bl	402ac8 <__retarget_lock_acquire_recursive>
  40396c:	4b29      	ldr	r3, [pc, #164]	; (403a14 <__register_exitproc+0xbc>)
  40396e:	681c      	ldr	r4, [r3, #0]
  403970:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403974:	2b00      	cmp	r3, #0
  403976:	d03e      	beq.n	4039f6 <__register_exitproc+0x9e>
  403978:	685a      	ldr	r2, [r3, #4]
  40397a:	2a1f      	cmp	r2, #31
  40397c:	dc1c      	bgt.n	4039b8 <__register_exitproc+0x60>
  40397e:	f102 0e01 	add.w	lr, r2, #1
  403982:	b176      	cbz	r6, 4039a2 <__register_exitproc+0x4a>
  403984:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403988:	2401      	movs	r4, #1
  40398a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40398e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403992:	4094      	lsls	r4, r2
  403994:	4320      	orrs	r0, r4
  403996:	2e02      	cmp	r6, #2
  403998:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40399c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4039a0:	d023      	beq.n	4039ea <__register_exitproc+0x92>
  4039a2:	3202      	adds	r2, #2
  4039a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4039a8:	6828      	ldr	r0, [r5, #0]
  4039aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4039ae:	f7ff f88d 	bl	402acc <__retarget_lock_release_recursive>
  4039b2:	2000      	movs	r0, #0
  4039b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4039b8:	4b17      	ldr	r3, [pc, #92]	; (403a18 <__register_exitproc+0xc0>)
  4039ba:	b30b      	cbz	r3, 403a00 <__register_exitproc+0xa8>
  4039bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4039c0:	f7ff f8fe 	bl	402bc0 <malloc>
  4039c4:	4603      	mov	r3, r0
  4039c6:	b1d8      	cbz	r0, 403a00 <__register_exitproc+0xa8>
  4039c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4039cc:	6002      	str	r2, [r0, #0]
  4039ce:	2100      	movs	r1, #0
  4039d0:	6041      	str	r1, [r0, #4]
  4039d2:	460a      	mov	r2, r1
  4039d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4039d8:	f04f 0e01 	mov.w	lr, #1
  4039dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4039e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4039e4:	2e00      	cmp	r6, #0
  4039e6:	d0dc      	beq.n	4039a2 <__register_exitproc+0x4a>
  4039e8:	e7cc      	b.n	403984 <__register_exitproc+0x2c>
  4039ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4039ee:	430c      	orrs	r4, r1
  4039f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4039f4:	e7d5      	b.n	4039a2 <__register_exitproc+0x4a>
  4039f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4039fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4039fe:	e7bb      	b.n	403978 <__register_exitproc+0x20>
  403a00:	6828      	ldr	r0, [r5, #0]
  403a02:	f7ff f863 	bl	402acc <__retarget_lock_release_recursive>
  403a06:	f04f 30ff 	mov.w	r0, #4294967295
  403a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a0e:	bf00      	nop
  403a10:	20400438 	.word	0x20400438
  403a14:	00403f38 	.word	0x00403f38
  403a18:	00402bc1 	.word	0x00402bc1

00403a1c <_close_r>:
  403a1c:	b538      	push	{r3, r4, r5, lr}
  403a1e:	4c07      	ldr	r4, [pc, #28]	; (403a3c <_close_r+0x20>)
  403a20:	2300      	movs	r3, #0
  403a22:	4605      	mov	r5, r0
  403a24:	4608      	mov	r0, r1
  403a26:	6023      	str	r3, [r4, #0]
  403a28:	f7fd f868 	bl	400afc <_close>
  403a2c:	1c43      	adds	r3, r0, #1
  403a2e:	d000      	beq.n	403a32 <_close_r+0x16>
  403a30:	bd38      	pop	{r3, r4, r5, pc}
  403a32:	6823      	ldr	r3, [r4, #0]
  403a34:	2b00      	cmp	r3, #0
  403a36:	d0fb      	beq.n	403a30 <_close_r+0x14>
  403a38:	602b      	str	r3, [r5, #0]
  403a3a:	bd38      	pop	{r3, r4, r5, pc}
  403a3c:	20400ab8 	.word	0x20400ab8

00403a40 <_fclose_r>:
  403a40:	b570      	push	{r4, r5, r6, lr}
  403a42:	b159      	cbz	r1, 403a5c <_fclose_r+0x1c>
  403a44:	4605      	mov	r5, r0
  403a46:	460c      	mov	r4, r1
  403a48:	b110      	cbz	r0, 403a50 <_fclose_r+0x10>
  403a4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a4c:	2b00      	cmp	r3, #0
  403a4e:	d03c      	beq.n	403aca <_fclose_r+0x8a>
  403a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403a52:	07d8      	lsls	r0, r3, #31
  403a54:	d505      	bpl.n	403a62 <_fclose_r+0x22>
  403a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a5a:	b92b      	cbnz	r3, 403a68 <_fclose_r+0x28>
  403a5c:	2600      	movs	r6, #0
  403a5e:	4630      	mov	r0, r6
  403a60:	bd70      	pop	{r4, r5, r6, pc}
  403a62:	89a3      	ldrh	r3, [r4, #12]
  403a64:	0599      	lsls	r1, r3, #22
  403a66:	d53c      	bpl.n	403ae2 <_fclose_r+0xa2>
  403a68:	4621      	mov	r1, r4
  403a6a:	4628      	mov	r0, r5
  403a6c:	f7fe fb74 	bl	402158 <__sflush_r>
  403a70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403a72:	4606      	mov	r6, r0
  403a74:	b133      	cbz	r3, 403a84 <_fclose_r+0x44>
  403a76:	69e1      	ldr	r1, [r4, #28]
  403a78:	4628      	mov	r0, r5
  403a7a:	4798      	blx	r3
  403a7c:	2800      	cmp	r0, #0
  403a7e:	bfb8      	it	lt
  403a80:	f04f 36ff 	movlt.w	r6, #4294967295
  403a84:	89a3      	ldrh	r3, [r4, #12]
  403a86:	061a      	lsls	r2, r3, #24
  403a88:	d422      	bmi.n	403ad0 <_fclose_r+0x90>
  403a8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a8c:	b141      	cbz	r1, 403aa0 <_fclose_r+0x60>
  403a8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a92:	4299      	cmp	r1, r3
  403a94:	d002      	beq.n	403a9c <_fclose_r+0x5c>
  403a96:	4628      	mov	r0, r5
  403a98:	f7fe fd7c 	bl	402594 <_free_r>
  403a9c:	2300      	movs	r3, #0
  403a9e:	6323      	str	r3, [r4, #48]	; 0x30
  403aa0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403aa2:	b121      	cbz	r1, 403aae <_fclose_r+0x6e>
  403aa4:	4628      	mov	r0, r5
  403aa6:	f7fe fd75 	bl	402594 <_free_r>
  403aaa:	2300      	movs	r3, #0
  403aac:	6463      	str	r3, [r4, #68]	; 0x44
  403aae:	f7fe fc77 	bl	4023a0 <__sfp_lock_acquire>
  403ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ab4:	2200      	movs	r2, #0
  403ab6:	07db      	lsls	r3, r3, #31
  403ab8:	81a2      	strh	r2, [r4, #12]
  403aba:	d50e      	bpl.n	403ada <_fclose_r+0x9a>
  403abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403abe:	f7ff f801 	bl	402ac4 <__retarget_lock_close_recursive>
  403ac2:	f7fe fc73 	bl	4023ac <__sfp_lock_release>
  403ac6:	4630      	mov	r0, r6
  403ac8:	bd70      	pop	{r4, r5, r6, pc}
  403aca:	f7fe fc3d 	bl	402348 <__sinit>
  403ace:	e7bf      	b.n	403a50 <_fclose_r+0x10>
  403ad0:	6921      	ldr	r1, [r4, #16]
  403ad2:	4628      	mov	r0, r5
  403ad4:	f7fe fd5e 	bl	402594 <_free_r>
  403ad8:	e7d7      	b.n	403a8a <_fclose_r+0x4a>
  403ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403adc:	f7fe fff6 	bl	402acc <__retarget_lock_release_recursive>
  403ae0:	e7ec      	b.n	403abc <_fclose_r+0x7c>
  403ae2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ae4:	f7fe fff0 	bl	402ac8 <__retarget_lock_acquire_recursive>
  403ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403aec:	2b00      	cmp	r3, #0
  403aee:	d1bb      	bne.n	403a68 <_fclose_r+0x28>
  403af0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403af2:	f016 0601 	ands.w	r6, r6, #1
  403af6:	d1b1      	bne.n	403a5c <_fclose_r+0x1c>
  403af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403afa:	f7fe ffe7 	bl	402acc <__retarget_lock_release_recursive>
  403afe:	4630      	mov	r0, r6
  403b00:	bd70      	pop	{r4, r5, r6, pc}
  403b02:	bf00      	nop

00403b04 <_fstat_r>:
  403b04:	b538      	push	{r3, r4, r5, lr}
  403b06:	460b      	mov	r3, r1
  403b08:	4c07      	ldr	r4, [pc, #28]	; (403b28 <_fstat_r+0x24>)
  403b0a:	4605      	mov	r5, r0
  403b0c:	4611      	mov	r1, r2
  403b0e:	4618      	mov	r0, r3
  403b10:	2300      	movs	r3, #0
  403b12:	6023      	str	r3, [r4, #0]
  403b14:	f7fc fff5 	bl	400b02 <_fstat>
  403b18:	1c43      	adds	r3, r0, #1
  403b1a:	d000      	beq.n	403b1e <_fstat_r+0x1a>
  403b1c:	bd38      	pop	{r3, r4, r5, pc}
  403b1e:	6823      	ldr	r3, [r4, #0]
  403b20:	2b00      	cmp	r3, #0
  403b22:	d0fb      	beq.n	403b1c <_fstat_r+0x18>
  403b24:	602b      	str	r3, [r5, #0]
  403b26:	bd38      	pop	{r3, r4, r5, pc}
  403b28:	20400ab8 	.word	0x20400ab8

00403b2c <_isatty_r>:
  403b2c:	b538      	push	{r3, r4, r5, lr}
  403b2e:	4c07      	ldr	r4, [pc, #28]	; (403b4c <_isatty_r+0x20>)
  403b30:	2300      	movs	r3, #0
  403b32:	4605      	mov	r5, r0
  403b34:	4608      	mov	r0, r1
  403b36:	6023      	str	r3, [r4, #0]
  403b38:	f7fc ffe8 	bl	400b0c <_isatty>
  403b3c:	1c43      	adds	r3, r0, #1
  403b3e:	d000      	beq.n	403b42 <_isatty_r+0x16>
  403b40:	bd38      	pop	{r3, r4, r5, pc}
  403b42:	6823      	ldr	r3, [r4, #0]
  403b44:	2b00      	cmp	r3, #0
  403b46:	d0fb      	beq.n	403b40 <_isatty_r+0x14>
  403b48:	602b      	str	r3, [r5, #0]
  403b4a:	bd38      	pop	{r3, r4, r5, pc}
  403b4c:	20400ab8 	.word	0x20400ab8

00403b50 <_lseek_r>:
  403b50:	b570      	push	{r4, r5, r6, lr}
  403b52:	460d      	mov	r5, r1
  403b54:	4c08      	ldr	r4, [pc, #32]	; (403b78 <_lseek_r+0x28>)
  403b56:	4611      	mov	r1, r2
  403b58:	4606      	mov	r6, r0
  403b5a:	461a      	mov	r2, r3
  403b5c:	4628      	mov	r0, r5
  403b5e:	2300      	movs	r3, #0
  403b60:	6023      	str	r3, [r4, #0]
  403b62:	f7fc ffd5 	bl	400b10 <_lseek>
  403b66:	1c43      	adds	r3, r0, #1
  403b68:	d000      	beq.n	403b6c <_lseek_r+0x1c>
  403b6a:	bd70      	pop	{r4, r5, r6, pc}
  403b6c:	6823      	ldr	r3, [r4, #0]
  403b6e:	2b00      	cmp	r3, #0
  403b70:	d0fb      	beq.n	403b6a <_lseek_r+0x1a>
  403b72:	6033      	str	r3, [r6, #0]
  403b74:	bd70      	pop	{r4, r5, r6, pc}
  403b76:	bf00      	nop
  403b78:	20400ab8 	.word	0x20400ab8

00403b7c <_read_r>:
  403b7c:	b570      	push	{r4, r5, r6, lr}
  403b7e:	460d      	mov	r5, r1
  403b80:	4c08      	ldr	r4, [pc, #32]	; (403ba4 <_read_r+0x28>)
  403b82:	4611      	mov	r1, r2
  403b84:	4606      	mov	r6, r0
  403b86:	461a      	mov	r2, r3
  403b88:	4628      	mov	r0, r5
  403b8a:	2300      	movs	r3, #0
  403b8c:	6023      	str	r3, [r4, #0]
  403b8e:	f7fc fb59 	bl	400244 <_read>
  403b92:	1c43      	adds	r3, r0, #1
  403b94:	d000      	beq.n	403b98 <_read_r+0x1c>
  403b96:	bd70      	pop	{r4, r5, r6, pc}
  403b98:	6823      	ldr	r3, [r4, #0]
  403b9a:	2b00      	cmp	r3, #0
  403b9c:	d0fb      	beq.n	403b96 <_read_r+0x1a>
  403b9e:	6033      	str	r3, [r6, #0]
  403ba0:	bd70      	pop	{r4, r5, r6, pc}
  403ba2:	bf00      	nop
  403ba4:	20400ab8 	.word	0x20400ab8

00403ba8 <__aeabi_uldivmod>:
  403ba8:	b953      	cbnz	r3, 403bc0 <__aeabi_uldivmod+0x18>
  403baa:	b94a      	cbnz	r2, 403bc0 <__aeabi_uldivmod+0x18>
  403bac:	2900      	cmp	r1, #0
  403bae:	bf08      	it	eq
  403bb0:	2800      	cmpeq	r0, #0
  403bb2:	bf1c      	itt	ne
  403bb4:	f04f 31ff 	movne.w	r1, #4294967295
  403bb8:	f04f 30ff 	movne.w	r0, #4294967295
  403bbc:	f000 b97a 	b.w	403eb4 <__aeabi_idiv0>
  403bc0:	f1ad 0c08 	sub.w	ip, sp, #8
  403bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403bc8:	f000 f806 	bl	403bd8 <__udivmoddi4>
  403bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
  403bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403bd4:	b004      	add	sp, #16
  403bd6:	4770      	bx	lr

00403bd8 <__udivmoddi4>:
  403bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bdc:	468c      	mov	ip, r1
  403bde:	460d      	mov	r5, r1
  403be0:	4604      	mov	r4, r0
  403be2:	9e08      	ldr	r6, [sp, #32]
  403be4:	2b00      	cmp	r3, #0
  403be6:	d151      	bne.n	403c8c <__udivmoddi4+0xb4>
  403be8:	428a      	cmp	r2, r1
  403bea:	4617      	mov	r7, r2
  403bec:	d96d      	bls.n	403cca <__udivmoddi4+0xf2>
  403bee:	fab2 fe82 	clz	lr, r2
  403bf2:	f1be 0f00 	cmp.w	lr, #0
  403bf6:	d00b      	beq.n	403c10 <__udivmoddi4+0x38>
  403bf8:	f1ce 0c20 	rsb	ip, lr, #32
  403bfc:	fa01 f50e 	lsl.w	r5, r1, lr
  403c00:	fa20 fc0c 	lsr.w	ip, r0, ip
  403c04:	fa02 f70e 	lsl.w	r7, r2, lr
  403c08:	ea4c 0c05 	orr.w	ip, ip, r5
  403c0c:	fa00 f40e 	lsl.w	r4, r0, lr
  403c10:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403c14:	0c25      	lsrs	r5, r4, #16
  403c16:	fbbc f8fa 	udiv	r8, ip, sl
  403c1a:	fa1f f987 	uxth.w	r9, r7
  403c1e:	fb0a cc18 	mls	ip, sl, r8, ip
  403c22:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403c26:	fb08 f309 	mul.w	r3, r8, r9
  403c2a:	42ab      	cmp	r3, r5
  403c2c:	d90a      	bls.n	403c44 <__udivmoddi4+0x6c>
  403c2e:	19ed      	adds	r5, r5, r7
  403c30:	f108 32ff 	add.w	r2, r8, #4294967295
  403c34:	f080 8123 	bcs.w	403e7e <__udivmoddi4+0x2a6>
  403c38:	42ab      	cmp	r3, r5
  403c3a:	f240 8120 	bls.w	403e7e <__udivmoddi4+0x2a6>
  403c3e:	f1a8 0802 	sub.w	r8, r8, #2
  403c42:	443d      	add	r5, r7
  403c44:	1aed      	subs	r5, r5, r3
  403c46:	b2a4      	uxth	r4, r4
  403c48:	fbb5 f0fa 	udiv	r0, r5, sl
  403c4c:	fb0a 5510 	mls	r5, sl, r0, r5
  403c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403c54:	fb00 f909 	mul.w	r9, r0, r9
  403c58:	45a1      	cmp	r9, r4
  403c5a:	d909      	bls.n	403c70 <__udivmoddi4+0x98>
  403c5c:	19e4      	adds	r4, r4, r7
  403c5e:	f100 33ff 	add.w	r3, r0, #4294967295
  403c62:	f080 810a 	bcs.w	403e7a <__udivmoddi4+0x2a2>
  403c66:	45a1      	cmp	r9, r4
  403c68:	f240 8107 	bls.w	403e7a <__udivmoddi4+0x2a2>
  403c6c:	3802      	subs	r0, #2
  403c6e:	443c      	add	r4, r7
  403c70:	eba4 0409 	sub.w	r4, r4, r9
  403c74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403c78:	2100      	movs	r1, #0
  403c7a:	2e00      	cmp	r6, #0
  403c7c:	d061      	beq.n	403d42 <__udivmoddi4+0x16a>
  403c7e:	fa24 f40e 	lsr.w	r4, r4, lr
  403c82:	2300      	movs	r3, #0
  403c84:	6034      	str	r4, [r6, #0]
  403c86:	6073      	str	r3, [r6, #4]
  403c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c8c:	428b      	cmp	r3, r1
  403c8e:	d907      	bls.n	403ca0 <__udivmoddi4+0xc8>
  403c90:	2e00      	cmp	r6, #0
  403c92:	d054      	beq.n	403d3e <__udivmoddi4+0x166>
  403c94:	2100      	movs	r1, #0
  403c96:	e886 0021 	stmia.w	r6, {r0, r5}
  403c9a:	4608      	mov	r0, r1
  403c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ca0:	fab3 f183 	clz	r1, r3
  403ca4:	2900      	cmp	r1, #0
  403ca6:	f040 808e 	bne.w	403dc6 <__udivmoddi4+0x1ee>
  403caa:	42ab      	cmp	r3, r5
  403cac:	d302      	bcc.n	403cb4 <__udivmoddi4+0xdc>
  403cae:	4282      	cmp	r2, r0
  403cb0:	f200 80fa 	bhi.w	403ea8 <__udivmoddi4+0x2d0>
  403cb4:	1a84      	subs	r4, r0, r2
  403cb6:	eb65 0503 	sbc.w	r5, r5, r3
  403cba:	2001      	movs	r0, #1
  403cbc:	46ac      	mov	ip, r5
  403cbe:	2e00      	cmp	r6, #0
  403cc0:	d03f      	beq.n	403d42 <__udivmoddi4+0x16a>
  403cc2:	e886 1010 	stmia.w	r6, {r4, ip}
  403cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cca:	b912      	cbnz	r2, 403cd2 <__udivmoddi4+0xfa>
  403ccc:	2701      	movs	r7, #1
  403cce:	fbb7 f7f2 	udiv	r7, r7, r2
  403cd2:	fab7 fe87 	clz	lr, r7
  403cd6:	f1be 0f00 	cmp.w	lr, #0
  403cda:	d134      	bne.n	403d46 <__udivmoddi4+0x16e>
  403cdc:	1beb      	subs	r3, r5, r7
  403cde:	0c3a      	lsrs	r2, r7, #16
  403ce0:	fa1f fc87 	uxth.w	ip, r7
  403ce4:	2101      	movs	r1, #1
  403ce6:	fbb3 f8f2 	udiv	r8, r3, r2
  403cea:	0c25      	lsrs	r5, r4, #16
  403cec:	fb02 3318 	mls	r3, r2, r8, r3
  403cf0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403cf4:	fb0c f308 	mul.w	r3, ip, r8
  403cf8:	42ab      	cmp	r3, r5
  403cfa:	d907      	bls.n	403d0c <__udivmoddi4+0x134>
  403cfc:	19ed      	adds	r5, r5, r7
  403cfe:	f108 30ff 	add.w	r0, r8, #4294967295
  403d02:	d202      	bcs.n	403d0a <__udivmoddi4+0x132>
  403d04:	42ab      	cmp	r3, r5
  403d06:	f200 80d1 	bhi.w	403eac <__udivmoddi4+0x2d4>
  403d0a:	4680      	mov	r8, r0
  403d0c:	1aed      	subs	r5, r5, r3
  403d0e:	b2a3      	uxth	r3, r4
  403d10:	fbb5 f0f2 	udiv	r0, r5, r2
  403d14:	fb02 5510 	mls	r5, r2, r0, r5
  403d18:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403d1c:	fb0c fc00 	mul.w	ip, ip, r0
  403d20:	45a4      	cmp	ip, r4
  403d22:	d907      	bls.n	403d34 <__udivmoddi4+0x15c>
  403d24:	19e4      	adds	r4, r4, r7
  403d26:	f100 33ff 	add.w	r3, r0, #4294967295
  403d2a:	d202      	bcs.n	403d32 <__udivmoddi4+0x15a>
  403d2c:	45a4      	cmp	ip, r4
  403d2e:	f200 80b8 	bhi.w	403ea2 <__udivmoddi4+0x2ca>
  403d32:	4618      	mov	r0, r3
  403d34:	eba4 040c 	sub.w	r4, r4, ip
  403d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403d3c:	e79d      	b.n	403c7a <__udivmoddi4+0xa2>
  403d3e:	4631      	mov	r1, r6
  403d40:	4630      	mov	r0, r6
  403d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d46:	f1ce 0420 	rsb	r4, lr, #32
  403d4a:	fa05 f30e 	lsl.w	r3, r5, lr
  403d4e:	fa07 f70e 	lsl.w	r7, r7, lr
  403d52:	fa20 f804 	lsr.w	r8, r0, r4
  403d56:	0c3a      	lsrs	r2, r7, #16
  403d58:	fa25 f404 	lsr.w	r4, r5, r4
  403d5c:	ea48 0803 	orr.w	r8, r8, r3
  403d60:	fbb4 f1f2 	udiv	r1, r4, r2
  403d64:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403d68:	fb02 4411 	mls	r4, r2, r1, r4
  403d6c:	fa1f fc87 	uxth.w	ip, r7
  403d70:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403d74:	fb01 f30c 	mul.w	r3, r1, ip
  403d78:	42ab      	cmp	r3, r5
  403d7a:	fa00 f40e 	lsl.w	r4, r0, lr
  403d7e:	d909      	bls.n	403d94 <__udivmoddi4+0x1bc>
  403d80:	19ed      	adds	r5, r5, r7
  403d82:	f101 30ff 	add.w	r0, r1, #4294967295
  403d86:	f080 808a 	bcs.w	403e9e <__udivmoddi4+0x2c6>
  403d8a:	42ab      	cmp	r3, r5
  403d8c:	f240 8087 	bls.w	403e9e <__udivmoddi4+0x2c6>
  403d90:	3902      	subs	r1, #2
  403d92:	443d      	add	r5, r7
  403d94:	1aeb      	subs	r3, r5, r3
  403d96:	fa1f f588 	uxth.w	r5, r8
  403d9a:	fbb3 f0f2 	udiv	r0, r3, r2
  403d9e:	fb02 3310 	mls	r3, r2, r0, r3
  403da2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403da6:	fb00 f30c 	mul.w	r3, r0, ip
  403daa:	42ab      	cmp	r3, r5
  403dac:	d907      	bls.n	403dbe <__udivmoddi4+0x1e6>
  403dae:	19ed      	adds	r5, r5, r7
  403db0:	f100 38ff 	add.w	r8, r0, #4294967295
  403db4:	d26f      	bcs.n	403e96 <__udivmoddi4+0x2be>
  403db6:	42ab      	cmp	r3, r5
  403db8:	d96d      	bls.n	403e96 <__udivmoddi4+0x2be>
  403dba:	3802      	subs	r0, #2
  403dbc:	443d      	add	r5, r7
  403dbe:	1aeb      	subs	r3, r5, r3
  403dc0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403dc4:	e78f      	b.n	403ce6 <__udivmoddi4+0x10e>
  403dc6:	f1c1 0720 	rsb	r7, r1, #32
  403dca:	fa22 f807 	lsr.w	r8, r2, r7
  403dce:	408b      	lsls	r3, r1
  403dd0:	fa05 f401 	lsl.w	r4, r5, r1
  403dd4:	ea48 0303 	orr.w	r3, r8, r3
  403dd8:	fa20 fe07 	lsr.w	lr, r0, r7
  403ddc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403de0:	40fd      	lsrs	r5, r7
  403de2:	ea4e 0e04 	orr.w	lr, lr, r4
  403de6:	fbb5 f9fc 	udiv	r9, r5, ip
  403dea:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403dee:	fb0c 5519 	mls	r5, ip, r9, r5
  403df2:	fa1f f883 	uxth.w	r8, r3
  403df6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403dfa:	fb09 f408 	mul.w	r4, r9, r8
  403dfe:	42ac      	cmp	r4, r5
  403e00:	fa02 f201 	lsl.w	r2, r2, r1
  403e04:	fa00 fa01 	lsl.w	sl, r0, r1
  403e08:	d908      	bls.n	403e1c <__udivmoddi4+0x244>
  403e0a:	18ed      	adds	r5, r5, r3
  403e0c:	f109 30ff 	add.w	r0, r9, #4294967295
  403e10:	d243      	bcs.n	403e9a <__udivmoddi4+0x2c2>
  403e12:	42ac      	cmp	r4, r5
  403e14:	d941      	bls.n	403e9a <__udivmoddi4+0x2c2>
  403e16:	f1a9 0902 	sub.w	r9, r9, #2
  403e1a:	441d      	add	r5, r3
  403e1c:	1b2d      	subs	r5, r5, r4
  403e1e:	fa1f fe8e 	uxth.w	lr, lr
  403e22:	fbb5 f0fc 	udiv	r0, r5, ip
  403e26:	fb0c 5510 	mls	r5, ip, r0, r5
  403e2a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403e2e:	fb00 f808 	mul.w	r8, r0, r8
  403e32:	45a0      	cmp	r8, r4
  403e34:	d907      	bls.n	403e46 <__udivmoddi4+0x26e>
  403e36:	18e4      	adds	r4, r4, r3
  403e38:	f100 35ff 	add.w	r5, r0, #4294967295
  403e3c:	d229      	bcs.n	403e92 <__udivmoddi4+0x2ba>
  403e3e:	45a0      	cmp	r8, r4
  403e40:	d927      	bls.n	403e92 <__udivmoddi4+0x2ba>
  403e42:	3802      	subs	r0, #2
  403e44:	441c      	add	r4, r3
  403e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403e4a:	eba4 0408 	sub.w	r4, r4, r8
  403e4e:	fba0 8902 	umull	r8, r9, r0, r2
  403e52:	454c      	cmp	r4, r9
  403e54:	46c6      	mov	lr, r8
  403e56:	464d      	mov	r5, r9
  403e58:	d315      	bcc.n	403e86 <__udivmoddi4+0x2ae>
  403e5a:	d012      	beq.n	403e82 <__udivmoddi4+0x2aa>
  403e5c:	b156      	cbz	r6, 403e74 <__udivmoddi4+0x29c>
  403e5e:	ebba 030e 	subs.w	r3, sl, lr
  403e62:	eb64 0405 	sbc.w	r4, r4, r5
  403e66:	fa04 f707 	lsl.w	r7, r4, r7
  403e6a:	40cb      	lsrs	r3, r1
  403e6c:	431f      	orrs	r7, r3
  403e6e:	40cc      	lsrs	r4, r1
  403e70:	6037      	str	r7, [r6, #0]
  403e72:	6074      	str	r4, [r6, #4]
  403e74:	2100      	movs	r1, #0
  403e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e7a:	4618      	mov	r0, r3
  403e7c:	e6f8      	b.n	403c70 <__udivmoddi4+0x98>
  403e7e:	4690      	mov	r8, r2
  403e80:	e6e0      	b.n	403c44 <__udivmoddi4+0x6c>
  403e82:	45c2      	cmp	sl, r8
  403e84:	d2ea      	bcs.n	403e5c <__udivmoddi4+0x284>
  403e86:	ebb8 0e02 	subs.w	lr, r8, r2
  403e8a:	eb69 0503 	sbc.w	r5, r9, r3
  403e8e:	3801      	subs	r0, #1
  403e90:	e7e4      	b.n	403e5c <__udivmoddi4+0x284>
  403e92:	4628      	mov	r0, r5
  403e94:	e7d7      	b.n	403e46 <__udivmoddi4+0x26e>
  403e96:	4640      	mov	r0, r8
  403e98:	e791      	b.n	403dbe <__udivmoddi4+0x1e6>
  403e9a:	4681      	mov	r9, r0
  403e9c:	e7be      	b.n	403e1c <__udivmoddi4+0x244>
  403e9e:	4601      	mov	r1, r0
  403ea0:	e778      	b.n	403d94 <__udivmoddi4+0x1bc>
  403ea2:	3802      	subs	r0, #2
  403ea4:	443c      	add	r4, r7
  403ea6:	e745      	b.n	403d34 <__udivmoddi4+0x15c>
  403ea8:	4608      	mov	r0, r1
  403eaa:	e708      	b.n	403cbe <__udivmoddi4+0xe6>
  403eac:	f1a8 0802 	sub.w	r8, r8, #2
  403eb0:	443d      	add	r5, r7
  403eb2:	e72b      	b.n	403d0c <__udivmoddi4+0x134>

00403eb4 <__aeabi_idiv0>:
  403eb4:	4770      	bx	lr
  403eb6:	bf00      	nop
  403eb8:	52202d2d 	.word	0x52202d2d
  403ebc:	54205454 	.word	0x54205454
  403ec0:	72656d69 	.word	0x72656d69
  403ec4:	646e6120 	.word	0x646e6120
  403ec8:	616c4120 	.word	0x616c4120
  403ecc:	53206d72 	.word	0x53206d72
  403ed0:	70757465 	.word	0x70757465
  403ed4:	0d2d2d20 	.word	0x0d2d2d20
  403ed8:	202d2d0a 	.word	0x202d2d0a
  403edc:	564d4153 	.word	0x564d4153
  403ee0:	582d3137 	.word	0x582d3137
  403ee4:	4152544c 	.word	0x4152544c
  403ee8:	0d2d2d20 	.word	0x0d2d2d20
  403eec:	202d2d0a 	.word	0x202d2d0a
  403ef0:	706d6f43 	.word	0x706d6f43
  403ef4:	64656c69 	.word	0x64656c69
  403ef8:	7541203a 	.word	0x7541203a
  403efc:	36202067 	.word	0x36202067
  403f00:	32303220 	.word	0x32303220
  403f04:	36312034 	.word	0x36312034
  403f08:	3a38313a 	.word	0x3a38313a
  403f0c:	2d203530 	.word	0x2d203530
  403f10:	000a0d2d 	.word	0x000a0d2d
  403f14:	325b6325 	.word	0x325b6325
  403f18:	00000d4a 	.word	0x00000d4a
  403f1c:	656d6954 	.word	0x656d6954
  403f20:	7525203a 	.word	0x7525203a
  403f24:	00000d0a 	.word	0x00000d0a
  403f28:	20212121 	.word	0x20212121
  403f2c:	52414c41 	.word	0x52414c41
  403f30:	2121204d 	.word	0x2121204d
  403f34:	00000d21 	.word	0x00000d21

00403f38 <_global_impure_ptr>:
  403f38:	20400010 0000000a 33323130 37363534     ..@ ....01234567
  403f48:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  403f58:	37363534 62613938 66656463 00000000     456789abcdef....
  403f68:	6c756e28 0000296c                       (null)..

00403f70 <blanks.7217>:
  403f70:	20202020 20202020 20202020 20202020                     

00403f80 <zeroes.7218>:
  403f80:	30303030 30303030 30303030 30303030     0000000000000000
  403f90:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00403fa0 <_ctype_>:
  403fa0:	20202000 20202020 28282020 20282828     .         ((((( 
  403fb0:	20202020 20202020 20202020 20202020                     
  403fc0:	10108820 10101010 10101010 10101010      ...............
  403fd0:	04040410 04040404 10040404 10101010     ................
  403fe0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403ff0:	01010101 01010101 01010101 10101010     ................
  404000:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404010:	02020202 02020202 02020202 10101010     ................
  404020:	00000020 00000000 00000000 00000000      ...............
	...

004040a4 <_init>:
  4040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040a6:	bf00      	nop
  4040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4040aa:	bc08      	pop	{r3}
  4040ac:	469e      	mov	lr, r3
  4040ae:	4770      	bx	lr

004040b0 <__init_array_start>:
  4040b0:	00402139 	.word	0x00402139

004040b4 <__frame_dummy_init_array_entry>:
  4040b4:	0040018d                                ..@.

004040b8 <_fini>:
  4040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040ba:	bf00      	nop
  4040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4040be:	bc08      	pop	{r3}
  4040c0:	469e      	mov	lr, r3
  4040c2:	4770      	bx	lr

004040c4 <__fini_array_start>:
  4040c4:	00400169 	.word	0x00400169
